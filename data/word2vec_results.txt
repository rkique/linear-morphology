2024-06-11 11:52:12 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 11:52:26 root INFO     Model loaded
2024-06-11 11:52:29 root INFO     Model put on cuda
2024-06-11 11:52:29 root INFO     Tokenizer loaded
2024-06-11 11:52:29 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 11:52:29 root INFO     starting next token prediction
2024-06-11 12:32:44 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:32:58 root INFO     Model loaded
2024-06-11 12:33:00 root INFO     Model put on cuda
2024-06-11 12:33:00 root INFO     Tokenizer loaded
2024-06-11 12:33:00 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:33:01 root INFO     starting next token prediction
2024-06-11 12:36:16 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:36:31 root INFO     Model loaded
2024-06-11 12:36:33 root INFO     Model put on cuda
2024-06-11 12:36:33 root INFO     Tokenizer loaded
2024-06-11 12:36:33 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:36:33 root INFO     starting next token prediction
2024-06-11 12:36:36 root INFO     total LM prediction time: 2.7555084228515625 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 12:36:36 root INFO     starting operator prediction
2024-06-11 12:36:36 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 12:36:36 root INFO     [relation call] using When something is more {}, it is
2024-06-11 12:40:13 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:40:27 root INFO     Model loaded
2024-06-11 12:40:30 root INFO     Model put on cuda
2024-06-11 12:40:30 root INFO     Tokenizer loaded
2024-06-11 12:40:30 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:40:30 root INFO     starting next token prediction
2024-06-11 12:40:32 root INFO     total LM prediction time: 2.6255693435668945 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 12:40:32 root INFO     starting operator prediction
2024-06-11 12:40:32 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 12:40:32 root INFO     [relation call] using When something is more {}, it is
2024-06-11 12:47:51 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:48:05 root INFO     Model loaded
2024-06-11 12:48:07 root INFO     Model put on cuda
2024-06-11 12:48:07 root INFO     Tokenizer loaded
2024-06-11 12:48:07 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:48:07 root INFO     starting next token prediction
2024-06-11 12:48:10 root INFO     total LM prediction time: 2.7133162021636963 seconds with recall [0.92, 1.0, 1.0, 1.0, 1.0]
2024-06-11 12:48:10 root INFO     starting operator prediction
2024-06-11 12:48:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 12:48:10 root INFO     [relation call] using When something is more {}, it is
2024-06-11 12:51:04 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:51:18 root INFO     Model loaded
2024-06-11 12:51:20 root INFO     Model put on cuda
2024-06-11 12:51:20 root INFO     Tokenizer loaded
2024-06-11 12:51:20 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:51:20 root INFO     starting next token prediction
2024-06-11 12:51:23 root INFO     total LM prediction time: 2.6889305114746094 seconds with recall [0.94, 1.0, 1.0, 1.0, 1.0]
2024-06-11 12:51:23 root INFO     starting operator prediction
2024-06-11 12:51:23 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 12:51:23 root INFO     [relation call] using When something is more {}, it is
2024-06-11 12:55:30 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:55:44 root INFO     Model loaded
2024-06-11 12:55:47 root INFO     Model put on cuda
2024-06-11 12:55:47 root INFO     Tokenizer loaded
2024-06-11 12:55:47 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:55:47 root INFO     starting next token prediction
2024-06-11 12:55:49 root INFO     total LM prediction time: 2.648357391357422 seconds with recall [0.94, 0.98, 1.0, 1.0, 1.0]
2024-06-11 12:55:49 root INFO     starting operator prediction
2024-06-11 12:55:49 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 12:55:49 root INFO     [relation call] using When something is more {}, it is
2024-06-11 12:58:38 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 12:58:52 root INFO     Model loaded
2024-06-11 12:58:54 root INFO     Model put on cuda
2024-06-11 12:58:54 root INFO     Tokenizer loaded
2024-06-11 12:58:54 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 12:58:54 root INFO     starting next token prediction
2024-06-11 12:58:57 root INFO     total LM prediction time: 2.721043109893799 seconds with recall [0.94, 1.0, 1.0, 1.0, 1.0]
2024-06-11 12:58:57 root INFO     starting operator prediction
2024-06-11 12:58:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 12:58:57 root INFO     [relation call] using When something is more {}, it is
2024-06-11 13:01:40 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 13:01:54 root INFO     Model loaded
2024-06-11 13:01:56 root INFO     Model put on cuda
2024-06-11 13:01:56 root INFO     Tokenizer loaded
2024-06-11 13:01:56 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 13:01:56 root INFO     starting next token prediction
2024-06-11 13:01:59 root INFO     total LM prediction time: 2.686124086380005 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:01:59 root INFO     starting operator prediction
2024-06-11 13:01:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 13:01:59 root INFO     [relation call] using When something is more {}, it is
2024-06-11 13:03:30 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 13:03:44 root INFO     Model loaded
2024-06-11 13:03:46 root INFO     Model put on cuda
2024-06-11 13:03:46 root INFO     Tokenizer loaded
2024-06-11 13:03:46 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 13:03:46 root INFO     starting next token prediction
2024-06-11 13:03:49 root INFO     total LM prediction time: 2.688692569732666 seconds with recall [0.98, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:03:49 root INFO     starting operator prediction
2024-06-11 13:03:49 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 13:03:49 root INFO     [relation call] using When something is more {}, it is
2024-06-11 13:06:00 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 13:06:15 root INFO     Model loaded
2024-06-11 13:06:17 root INFO     Model put on cuda
2024-06-11 13:06:17 root INFO     Tokenizer loaded
2024-06-11 13:06:17 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 13:06:17 root INFO     starting next token prediction
2024-06-11 13:06:20 root INFO     total LM prediction time: 2.712308645248413 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:06:20 root INFO     starting operator prediction
2024-06-11 13:06:20 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 13:06:20 root INFO     [relation call] using When something is more {}, it is
2024-06-11 13:06:23 root INFO     total operator prediction time: 3.519165515899658 seconds
2024-06-11 13:10:01 root INFO     [adj - comparative] Loading GPT-J and tokenizer
2024-06-11 13:10:15 root INFO     Model loaded
2024-06-11 13:10:17 root INFO     Model put on cuda
2024-06-11 13:10:17 root INFO     Tokenizer loaded
2024-06-11 13:10:17 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 13:10:17 root INFO     starting next token prediction
2024-06-11 13:10:20 root INFO     total LM prediction time: 2.6938750743865967 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:10:20 root INFO     starting operator prediction
2024-06-11 13:10:20 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 13:10:20 root INFO     [relation call] using When something is more {}, it is
2024-06-11 13:10:23 root INFO     total operator prediction time: 3.4723682403564453 seconds
2024-06-11 13:10:26 root INFO     [noun - plural_reg] Loading GPT-J and tokenizer
2024-06-11 13:10:40 root INFO     Model loaded
2024-06-11 13:10:43 root INFO     Model put on cuda
2024-06-11 13:10:43 root INFO     Tokenizer loaded
2024-06-11 13:10:43 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-11 13:10:43 root INFO     starting next token prediction
2024-06-11 13:10:45 root INFO     total LM prediction time: 2.1297736167907715 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:10:45 root INFO     starting operator prediction
2024-06-11 13:10:45 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 13:10:45 root INFO     [relation call] using The plural form of {} is
2024-06-11 13:10:49 root INFO     total operator prediction time: 3.268233060836792 seconds
2024-06-11 13:10:51 root INFO     [verb_inf - Ved] Loading GPT-J and tokenizer
2024-06-11 13:11:05 root INFO     Model loaded
2024-06-11 13:11:07 root INFO     Model put on cuda
2024-06-11 13:11:07 root INFO     Tokenizer loaded
2024-06-11 13:11:07 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-11 13:11:07 root INFO     starting next token prediction
2024-06-11 13:11:10 root INFO     total LM prediction time: 2.091827154159546 seconds with recall [0.98, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:11:10 root INFO     starting operator prediction
2024-06-11 13:11:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-11 13:11:10 root INFO     [relation call] using If the present form is {}, the past form is
2024-06-11 13:11:13 root INFO     total operator prediction time: 3.5378482341766357 seconds
2024-06-11 13:11:16 root INFO     [verb_Ving - Ved] Loading GPT-J and tokenizer
2024-06-11 13:11:30 root INFO     Model loaded
2024-06-11 13:11:32 root INFO     Model put on cuda
2024-06-11 13:11:32 root INFO     Tokenizer loaded
2024-06-11 13:11:32 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-11 13:11:32 root INFO     starting next token prediction
2024-06-11 13:11:34 root INFO     total LM prediction time: 2.121508836746216 seconds with recall [0.98, 0.98, 1.0, 1.0, 1.0]
2024-06-11 13:11:34 root INFO     starting operator prediction
2024-06-11 13:11:34 root INFO     [relation call] using After something is {}, it has
2024-06-11 13:11:37 root INFO     total operator prediction time: 3.3388688564300537 seconds
2024-06-11 13:11:40 root INFO     [adj - superlative] Loading GPT-J and tokenizer
2024-06-11 13:11:54 root INFO     Model loaded
2024-06-11 13:11:56 root INFO     Model put on cuda
2024-06-11 13:11:57 root INFO     Tokenizer loaded
2024-06-11 13:11:57 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-11 13:11:57 root INFO     starting next token prediction
2024-06-11 13:11:59 root INFO     total LM prediction time: 2.1037185192108154 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:11:59 root INFO     starting operator prediction
2024-06-11 13:11:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-11 13:11:59 root INFO     [relation call] using When something is the most {}, it is
2024-06-11 13:12:02 root INFO     total operator prediction time: 3.5063657760620117 seconds
2024-06-11 13:12:05 root INFO     [verb_inf - 3pSg] Loading GPT-J and tokenizer
2024-06-11 13:12:19 root INFO     Model loaded
2024-06-11 13:12:21 root INFO     Model put on cuda
2024-06-11 13:12:21 root INFO     Tokenizer loaded
2024-06-11 13:12:21 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-11 13:12:21 root INFO     starting next token prediction
2024-06-11 13:12:23 root INFO     total LM prediction time: 2.352546215057373 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:12:24 root INFO     starting operator prediction
2024-06-11 13:12:24 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-11 13:12:24 root INFO     [relation call] using I {}, he
2024-06-11 13:12:27 root INFO     total operator prediction time: 3.153745412826538 seconds
2024-06-11 13:12:29 root INFO     [Ving - verb_inf] Loading GPT-J and tokenizer
2024-06-11 13:12:43 root INFO     Model loaded
2024-06-11 13:12:45 root INFO     Model put on cuda
2024-06-11 13:12:45 root INFO     Tokenizer loaded
2024-06-11 13:12:45 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='Ving - verb_inf', prompt_templates=['{} is the active form of', '{} is to'], prompt_templates_zs=['{} is the active form of', '{} is to'], samples=[RelationSample(subject='achieving', object=['achieve']), RelationSample(subject='adding', object=['add']), RelationSample(subject='allowing', object=['allow']), RelationSample(subject='appearing', object=['appear']), RelationSample(subject='applying', object=['apply']), RelationSample(subject='asking', object=['ask']), RelationSample(subject='attending', object=['attend']), RelationSample(subject='avoiding', object=['avoid']), RelationSample(subject='becoming', object=['become']), RelationSample(subject='believing', object=['believe']), RelationSample(subject='considering', object=['consider']), RelationSample(subject='containing', object=['contain']), RelationSample(subject='continuing', object=['continue']), RelationSample(subject='creating', object=['create']), RelationSample(subject='developing', object=['develop']), RelationSample(subject='encouraging', object=['encourage']), RelationSample(subject='enjoying', object=['enjoy']), RelationSample(subject='ensuring', object=['ensure']), RelationSample(subject='establishing', object=['establish']), RelationSample(subject='existing', object=['exist']), RelationSample(subject='expecting', object=['expect']), RelationSample(subject='following', object=['follow']), RelationSample(subject='happening', object=['happen']), RelationSample(subject='identifying', object=['identify']), RelationSample(subject='improving', object=['improve']), RelationSample(subject='including', object=['include']), RelationSample(subject='involving', object=['involve']), RelationSample(subject='learning', object=['learn']), RelationSample(subject='losing', object=['lose']), RelationSample(subject='maintaining', object=['maintain']), RelationSample(subject='managing', object=['manage']), RelationSample(subject='operating', object=['operate']), RelationSample(subject='performing', object=['perform']), RelationSample(subject='preventing', object=['prevent']), RelationSample(subject='promoting', object=['promote']), RelationSample(subject='protecting', object=['protect']), RelationSample(subject='providing', object=['provide']), RelationSample(subject='receiving', object=['receive']), RelationSample(subject='reducing', object=['reduce']), RelationSample(subject='referring', object=['refer']), RelationSample(subject='remaining', object=['remain']), RelationSample(subject='remembering', object=['remember']), RelationSample(subject='representing', object=['represent']), RelationSample(subject='requiring', object=['require']), RelationSample(subject='seeming', object=['seem']), RelationSample(subject='sitting', object=['sit']), RelationSample(subject='spending', object=['spend']), RelationSample(subject='teaching', object=['teach']), RelationSample(subject='telling', object=['tell']), RelationSample(subject='understanding', object=['understand'])], _domain=None, _range=None)
2024-06-11 13:12:45 root INFO     starting next token prediction
2024-06-11 13:12:47 root INFO     total LM prediction time: 2.1044628620147705 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:12:47 root INFO     starting operator prediction
2024-06-11 13:12:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} is the active form of)
2024-06-11 13:12:47 root INFO     [relation call] using {} is the active form of
2024-06-11 13:12:51 root INFO     total operator prediction time: 3.3343069553375244 seconds
2024-06-11 13:12:53 root INFO     [verb_3pSg - Ved] Loading GPT-J and tokenizer
2024-06-11 13:13:07 root INFO     Model loaded
2024-06-11 13:13:09 root INFO     Model put on cuda
2024-06-11 13:13:09 root INFO     Tokenizer loaded
2024-06-11 13:13:09 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_3pSg - Ved', prompt_templates=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], prompt_templates_zs=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], samples=[RelationSample(subject='adds', object=['added']), RelationSample(subject='agrees', object=['agreed']), RelationSample(subject='allows', object=['allowed']), RelationSample(subject='announces', object=['announced']), RelationSample(subject='appears', object=['appeared']), RelationSample(subject='applies', object=['applied']), RelationSample(subject='appoints', object=['appointed']), RelationSample(subject='asks', object=['asked']), RelationSample(subject='becomes', object=['became']), RelationSample(subject='believes', object=['believed']), RelationSample(subject='considers', object=['considered']), RelationSample(subject='consists', object=['consisted']), RelationSample(subject='contains', object=['contained']), RelationSample(subject='continues', object=['continued']), RelationSample(subject='creates', object=['created']), RelationSample(subject='decides', object=['decided']), RelationSample(subject='describes', object=['described']), RelationSample(subject='develops', object=['developed']), RelationSample(subject='establishes', object=['established']), RelationSample(subject='expects', object=['expected']), RelationSample(subject='fails', object=['failed']), RelationSample(subject='follows', object=['followed']), RelationSample(subject='happens', object=['happened']), RelationSample(subject='hears', object=['heard']), RelationSample(subject='includes', object=['included']), RelationSample(subject='intends', object=['intended']), RelationSample(subject='introduces', object=['introduced']), RelationSample(subject='involves', object=['involved']), RelationSample(subject='locates', object=['located']), RelationSample(subject='loses', object=['lost']), RelationSample(subject='manages', object=['managed']), RelationSample(subject='marries', object=['married']), RelationSample(subject='occurs', object=['occurred']), RelationSample(subject='operates', object=['operated']), RelationSample(subject='performs', object=['performed']), RelationSample(subject='proposes', object=['proposed']), RelationSample(subject='provides', object=['provided']), RelationSample(subject='publishes', object=['published']), RelationSample(subject='receives', object=['received']), RelationSample(subject='refers', object=['referred']), RelationSample(subject='relates', object=['related']), RelationSample(subject='remains', object=['remained']), RelationSample(subject='replaces', object=['replaced']), RelationSample(subject='represents', object=['represented']), RelationSample(subject='requires', object=['required']), RelationSample(subject='seems', object=['seemed']), RelationSample(subject='sends', object=['sent']), RelationSample(subject='spends', object=['spent']), RelationSample(subject='suggests', object=['suggested']), RelationSample(subject='tells', object=['told'])], _domain=None, _range=None)
2024-06-11 13:13:09 root INFO     starting next token prediction
2024-06-11 13:13:11 root INFO     total LM prediction time: 2.128034830093384 seconds with recall [0.98, 0.98, 1.0, 1.0, 1.0]
2024-06-11 13:13:11 root INFO     starting operator prediction
2024-06-11 13:13:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When he {} something, something has been)
2024-06-11 13:13:11 root INFO     [relation call] using When he {} something, something has been
2024-06-11 13:13:15 root INFO     total operator prediction time: 3.3700830936431885 seconds
2024-06-11 13:13:17 root INFO     [verb_Ving - 3pSg] Loading GPT-J and tokenizer
2024-06-11 13:13:31 root INFO     Model loaded
2024-06-11 13:13:33 root INFO     Model put on cuda
2024-06-11 13:13:33 root INFO     Tokenizer loaded
2024-06-11 13:13:33 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - 3pSg', prompt_templates=['When something is {}, it'], prompt_templates_zs=['When something is {}, it'], samples=[RelationSample(subject='adding', object=['adds']), RelationSample(subject='advertising', object=['advertises']), RelationSample(subject='allowing', object=['allows']), RelationSample(subject='appearing', object=['appears']), RelationSample(subject='applying', object=['applies']), RelationSample(subject='asking', object=['asks']), RelationSample(subject='becoming', object=['becomes']), RelationSample(subject='believing', object=['believes']), RelationSample(subject='considering', object=['considers']), RelationSample(subject='consisting', object=['consists']), RelationSample(subject='containing', object=['contains']), RelationSample(subject='continuing', object=['continues']), RelationSample(subject='creating', object=['creates']), RelationSample(subject='depending', object=['depends']), RelationSample(subject='describing', object=['describes']), RelationSample(subject='developing', object=['develops']), RelationSample(subject='discovering', object=['discovers']), RelationSample(subject='enabling', object=['enables']), RelationSample(subject='existing', object=['exists']), RelationSample(subject='explaining', object=['explains']), RelationSample(subject='following', object=['follows']), RelationSample(subject='happening', object=['happens']), RelationSample(subject='hearing', object=['hears']), RelationSample(subject='improving', object=['improves']), RelationSample(subject='including', object=['includes']), RelationSample(subject='involving', object=['involves']), RelationSample(subject='learning', object=['learns']), RelationSample(subject='losing', object=['loses']), RelationSample(subject='managing', object=['manages']), RelationSample(subject='occurring', object=['occurs']), RelationSample(subject='operating', object=['operates']), RelationSample(subject='performing', object=['performs']), RelationSample(subject='promoting', object=['promotes']), RelationSample(subject='providing', object=['provides']), RelationSample(subject='publishing', object=['publishes']), RelationSample(subject='receiving', object=['receives']), RelationSample(subject='reducing', object=['reduces']), RelationSample(subject='referring', object=['refers']), RelationSample(subject='relating', object=['relates']), RelationSample(subject='remaining', object=['remains']), RelationSample(subject='representing', object=['represents']), RelationSample(subject='requiring', object=['requires']), RelationSample(subject='seeming', object=['seems']), RelationSample(subject='sitting', object=['sits']), RelationSample(subject='spending', object=['spends']), RelationSample(subject='suggesting', object=['suggests']), RelationSample(subject='teaching', object=['teaches']), RelationSample(subject='telling', object=['tells']), RelationSample(subject='thanking', object=['thanks']), RelationSample(subject='understanding', object=['understands'])], _domain=None, _range=None)
2024-06-11 13:13:33 root INFO     starting next token prediction
2024-06-11 13:13:35 root INFO     total LM prediction time: 2.132563352584839 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:13:35 root INFO     starting operator prediction
2024-06-11 13:13:35 root INFO     [relation call] using When something is {}, it
2024-06-11 13:13:39 root INFO     total operator prediction time: 3.3028676509857178 seconds
2024-06-11 13:13:41 root INFO     [noun - plural_irreg] Loading GPT-J and tokenizer
2024-06-11 13:13:55 root INFO     Model loaded
2024-06-11 13:13:57 root INFO     Model put on cuda
2024-06-11 13:13:57 root INFO     Tokenizer loaded
2024-06-11 13:13:57 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_irreg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='ability', object=['abilities']), RelationSample(subject='academy', object=['academies']), RelationSample(subject='activity', object=['activities']), RelationSample(subject='agency', object=['agencies']), RelationSample(subject='analysis', object=['analyses']), RelationSample(subject='army', object=['armies']), RelationSample(subject='authority', object=['authorities']), RelationSample(subject='basis', object=['bases']), RelationSample(subject='business', object=['businesses']), RelationSample(subject='category', object=['categories']), RelationSample(subject='century', object=['centuries']), RelationSample(subject='child', object=['children']), RelationSample(subject='city', object=['cities']), RelationSample(subject='community', object=['communities']), RelationSample(subject='country', object=['countries']), RelationSample(subject='county', object=['counties']), RelationSample(subject='datum', object=['data']), RelationSample(subject='duty', object=['duties']), RelationSample(subject='economy', object=['economies']), RelationSample(subject='energy', object=['energies']), RelationSample(subject='entry', object=['entries']), RelationSample(subject='facility', object=['facilities']), RelationSample(subject='family', object=['families']), RelationSample(subject='formula', object=['formulae']), RelationSample(subject='history', object=['histories']), RelationSample(subject='industry', object=['industries']), RelationSample(subject='library', object=['libraries']), RelationSample(subject='life', object=['lives']), RelationSample(subject='loss', object=['losses']), RelationSample(subject='majority', object=['majorities']), RelationSample(subject='memory', object=['memories']), RelationSample(subject='opportunity', object=['opportunities']), RelationSample(subject='policy', object=['policies']), RelationSample(subject='property', object=['properties']), RelationSample(subject='responsibility', object=['responsibilities']), RelationSample(subject='safety', object=['safeties']), RelationSample(subject='secretary', object=['secretaries']), RelationSample(subject='security', object=['securities']), RelationSample(subject='series', object=['series']), RelationSample(subject='society', object=['societies']), RelationSample(subject='species', object=['species']), RelationSample(subject='story', object=['stories']), RelationSample(subject='strategy', object=['strategies']), RelationSample(subject='success', object=['successes']), RelationSample(subject='technology', object=['technologies']), RelationSample(subject='theory', object=['theories']), RelationSample(subject='university', object=['universities']), RelationSample(subject='variety', object=['varieties']), RelationSample(subject='wife', object=['wives']), RelationSample(subject='woman', object=['women'])], _domain=None, _range=None)
2024-06-11 13:13:57 root INFO     starting next token prediction
2024-06-11 13:13:59 root INFO     total LM prediction time: 2.1313858032226562 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:13:59 root INFO     starting operator prediction
2024-06-11 13:13:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 13:13:59 root INFO     [relation call] using The plural form of {} is
2024-06-11 13:14:03 root INFO     total operator prediction time: 3.3109376430511475 seconds
2024-06-11 13:14:05 root INFO     [verb+tion_irreg] Loading GPT-J and tokenizer
2024-06-11 13:14:19 root INFO     Model loaded
2024-06-11 13:14:21 root INFO     Model put on cuda
2024-06-11 13:14:21 root INFO     Tokenizer loaded
2024-06-11 13:14:21 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+tion_irreg', prompt_templates=['To {} results in', 'To {} is to form a'], prompt_templates_zs=['To {} results in', 'To {} is to form a'], samples=[RelationSample(subject='accuse', object=['accusation']), RelationSample(subject='admire', object=['admiration']), RelationSample(subject='allege', object=['allegation']), RelationSample(subject='aspire', object=['aspiration']), RelationSample(subject='authorize', object=['authorization', 'authorisation']), RelationSample(subject='characterize', object=['characterization', 'characterisation']), RelationSample(subject='civilize', object=['civilization', 'civilisation']), RelationSample(subject='colonize', object=['colonization']), RelationSample(subject='compile', object=['compilation']), RelationSample(subject='compute', object=['computation']), RelationSample(subject='condense', object=['condensation']), RelationSample(subject='configure', object=['configuration']), RelationSample(subject='consult', object=['consulation']), RelationSample(subject='continue', object=['continuation']), RelationSample(subject='customize', object=['customization']), RelationSample(subject='declare', object=['declaration']), RelationSample(subject='degrade', object=['degradation']), RelationSample(subject='deprive', object=['deprivation']), RelationSample(subject='derive', object=['derivation']), RelationSample(subject='determine', object=['determination']), RelationSample(subject='examine', object=['examination']), RelationSample(subject='expire', object=['expiration']), RelationSample(subject='explore', object=['exploration']), RelationSample(subject='globalize', object=['globalization', 'globalisation']), RelationSample(subject='illumine', object=['illumination']), RelationSample(subject='imagine', object=['imagination']), RelationSample(subject='improvize', object=['improvization', 'improvisation']), RelationSample(subject='inspire', object=['inspiration']), RelationSample(subject='install', object=['installation', 'instalation']), RelationSample(subject='maximize', object=['maximization', 'maximisation']), RelationSample(subject='minimize', object=['minimization', 'minimisation']), RelationSample(subject='modernize', object=['modernization', 'modernisation']), RelationSample(subject='oblige', object=['obligation']), RelationSample(subject='observe', object=['observation']), RelationSample(subject='occupy', object=['occupation']), RelationSample(subject='optimize', object=['optimization', 'optimisation']), RelationSample(subject='organize', object=['organization']), RelationSample(subject='perspire', object=['perspiration']), RelationSample(subject='prepare', object=['preparation']), RelationSample(subject='privatize', object=['privatization', 'privatisation']), RelationSample(subject='randomize', object=['randomization', 'randomisation']), RelationSample(subject='realize', object=['realization', 'realisation']), RelationSample(subject='reorganize', object=['reorganization', 'reorganisation']), RelationSample(subject='restore', object=['restoration']), RelationSample(subject='specialize', object=['specialization', 'specialisation']), RelationSample(subject='stabilize', object=['stabilization']), RelationSample(subject='standardize', object=['standardization', 'standardisation']), RelationSample(subject='starve', object=['starvation']), RelationSample(subject='utilize', object=['utilization', 'utilisation']), RelationSample(subject='visualize', object=['visualization'])], _domain=None, _range=None)
2024-06-11 13:14:21 root INFO     starting next token prediction
2024-06-11 13:14:23 root INFO     total LM prediction time: 2.1336073875427246 seconds with recall [0.98, 0.98, 0.98, 1.0, 1.0]
2024-06-11 13:14:23 root INFO     starting operator prediction
2024-06-11 13:14:23 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in)
2024-06-11 13:14:23 root INFO     [relation call] using To {} results in
2024-06-11 13:14:26 root INFO     total operator prediction time: 3.2383410930633545 seconds
2024-06-11 13:14:29 root INFO     [re+verb_reg] Loading GPT-J and tokenizer
2024-06-11 13:14:43 root INFO     Model loaded
2024-06-11 13:14:45 root INFO     Model put on cuda
2024-06-11 13:14:45 root INFO     Tokenizer loaded
2024-06-11 13:14:45 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='re+verb_reg', prompt_templates=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], prompt_templates_zs=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], samples=[RelationSample(subject='acquire', object=['reacquire']), RelationSample(subject='adjust', object=['readjust']), RelationSample(subject='appear', object=['reappear']), RelationSample(subject='apply', object=['reapply']), RelationSample(subject='appoint', object=['reappoint']), RelationSample(subject='arrange', object=['rearrange']), RelationSample(subject='assess', object=['reassess']), RelationSample(subject='assign', object=['reassign']), RelationSample(subject='assure', object=['reassure']), RelationSample(subject='calculate', object=['recalculate']), RelationSample(subject='cognize', object=['recognize']), RelationSample(subject='commend', object=['recommend']), RelationSample(subject='configure', object=['reconfigure']), RelationSample(subject='confirm', object=['reconfirm']), RelationSample(subject='connect', object=['reconnect']), RelationSample(subject='consider', object=['reconsider']), RelationSample(subject='create', object=['recreate']), RelationSample(subject='decorate', object=['redecorate']), RelationSample(subject='deem', object=['redeem']), RelationSample(subject='define', object=['redefine']), RelationSample(subject='develop', object=['redevelop']), RelationSample(subject='discover', object=['rediscover']), RelationSample(subject='distribute', object=['redistribute']), RelationSample(subject='emerge', object=['reemerge']), RelationSample(subject='engage', object=['reengage']), RelationSample(subject='establish', object=['reestablish']), RelationSample(subject='evaluate', object=['reevaluate']), RelationSample(subject='examine', object=['reexamine']), RelationSample(subject='generate', object=['regenerate']), RelationSample(subject='grow', object=['regrow']), RelationSample(subject='install', object=['reinstall']), RelationSample(subject='integrate', object=['reintegrate']), RelationSample(subject='interpret', object=['reinterpret']), RelationSample(subject='introduce', object=['reintroduce']), RelationSample(subject='invest', object=['reinvest']), RelationSample(subject='investigate', object=['reinvestigate']), RelationSample(subject='learn', object=['relearn']), RelationSample(subject='locate', object=['relocate']), RelationSample(subject='marry', object=['remarry']), RelationSample(subject='negotiate', object=['renegotiate']), RelationSample(subject='occur', object=['reoccur']), RelationSample(subject='organize', object=['reorganize', 'reorganise']), RelationSample(subject='publish', object=['republish']), RelationSample(subject='send', object=['resend']), RelationSample(subject='solve', object=['resolve']), RelationSample(subject='submit', object=['resubmit']), RelationSample(subject='tell', object=['retell']), RelationSample(subject='unite', object=['reunite']), RelationSample(subject='upload', object=['reupload']), RelationSample(subject='write', object=['rewrite'])], _domain=None, _range=None)
2024-06-11 13:14:45 root INFO     starting next token prediction
2024-06-11 13:14:47 root INFO     total LM prediction time: 2.1455929279327393 seconds with recall [0.88, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:14:47 root INFO     starting operator prediction
2024-06-11 13:14:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} again is to)
2024-06-11 13:14:47 root INFO     [relation call] using To {} again is to
2024-06-11 13:14:51 root INFO     total operator prediction time: 3.3129589557647705 seconds
2024-06-11 13:14:53 root INFO     [verb+ment_irreg] Loading GPT-J and tokenizer
2024-06-11 13:15:07 root INFO     Model loaded
2024-06-11 13:15:09 root INFO     Model put on cuda
2024-06-11 13:15:09 root INFO     Tokenizer loaded
2024-06-11 13:15:09 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+ment_irreg', prompt_templates=['To {} results in a', 'To {} brings about a'], prompt_templates_zs=['To {} results in a', 'To {} brings about a'], samples=[RelationSample(subject='accomplish', object=['accomplishment']), RelationSample(subject='achieve', object=['achievement']), RelationSample(subject='acknowledge', object=['acknowledgement']), RelationSample(subject='adjust', object=['adjustment']), RelationSample(subject='advertise', object=['advertisement', 'advertizement']), RelationSample(subject='agree', object=['agreement']), RelationSample(subject='align', object=['alignment']), RelationSample(subject='amend', object=['amendment']), RelationSample(subject='amuse', object=['amusement']), RelationSample(subject='announce', object=['announcement']), RelationSample(subject='appoint', object=['appointment']), RelationSample(subject='arrange', object=['arrangement']), RelationSample(subject='assess', object=['assessment']), RelationSample(subject='assign', object=['assignment']), RelationSample(subject='commit', object=['commitment']), RelationSample(subject='detach', object=['detachment']), RelationSample(subject='develop', object=['development']), RelationSample(subject='disagree', object=['disagreement']), RelationSample(subject='disappoint', object=['disappointment']), RelationSample(subject='displace', object=['displacement']), RelationSample(subject='embarrass', object=['embarrassment']), RelationSample(subject='encourage', object=['encouragement']), RelationSample(subject='endorse', object=['endorsement']), RelationSample(subject='enforce', object=['enforcement']), RelationSample(subject='engage', object=['engagement']), RelationSample(subject='enhance', object=['enhancement']), RelationSample(subject='enjoy', object=['enjoyment']), RelationSample(subject='enlighten', object=['enlightenment']), RelationSample(subject='enroll', object=['enrollment', 'enrolment']), RelationSample(subject='entertain', object=['entertainment']), RelationSample(subject='entitle', object=['entitlement']), RelationSample(subject='equip', object=['equipment']), RelationSample(subject='establish', object=['establishment']), RelationSample(subject='excite', object=['excitement']), RelationSample(subject='fulfil', object=['fulfilment']), RelationSample(subject='fulfill', object=['fulfillment']), RelationSample(subject='harass', object=['harassment']), RelationSample(subject='impair', object=['impairment']), RelationSample(subject='improve', object=['improvement']), RelationSample(subject='infringe', object=['infringement']), RelationSample(subject='invest', object=['investment']), RelationSample(subject='involve', object=['involvement']), RelationSample(subject='manage', object=['management']), RelationSample(subject='punish', object=['punishment']), RelationSample(subject='redevelop', object=['redevelopment']), RelationSample(subject='reimburse', object=['reimbursement']), RelationSample(subject='reinforce', object=['reinforcement']), RelationSample(subject='replace', object=['replacement']), RelationSample(subject='require', object=['requirement']), RelationSample(subject='resent', object=['resentment'])], _domain=None, _range=None)
2024-06-11 13:15:09 root INFO     starting next token prediction
2024-06-11 13:15:11 root INFO     total LM prediction time: 2.09255051612854 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:15:11 root INFO     starting operator prediction
2024-06-11 13:15:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in a)
2024-06-11 13:15:11 root INFO     [relation call] using To {} results in a
2024-06-11 13:15:14 root INFO     total operator prediction time: 3.2506844997406006 seconds
2024-06-11 13:15:17 root INFO     [noun+less_reg] Loading GPT-J and tokenizer
2024-06-11 13:15:31 root INFO     Model loaded
2024-06-11 13:15:33 root INFO     Model put on cuda
2024-06-11 13:15:33 root INFO     Tokenizer loaded
2024-06-11 13:15:33 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun+less_reg', prompt_templates=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], prompt_templates_zs=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], samples=[RelationSample(subject='arm', object=['armless']), RelationSample(subject='art', object=['artless']), RelationSample(subject='bone', object=['boneless']), RelationSample(subject='breath', object=['breathless']), RelationSample(subject='carbon', object=['carbonless']), RelationSample(subject='child', object=['childless']), RelationSample(subject='collar', object=['collarless']), RelationSample(subject='death', object=['deathless']), RelationSample(subject='defence', object=['defenceless', 'defenseless']), RelationSample(subject='effort', object=['effortless']), RelationSample(subject='ego', object=['egoless']), RelationSample(subject='emotion', object=['emotionless']), RelationSample(subject='error', object=['errorless']), RelationSample(subject='expression', object=['expressionless']), RelationSample(subject='faith', object=['faithless']), RelationSample(subject='friction', object=['frictionless']), RelationSample(subject='friend', object=['friendless']), RelationSample(subject='gender', object=['genderless']), RelationSample(subject='goal', object=['goalless']), RelationSample(subject='god', object=['godless']), RelationSample(subject='guile', object=['guileless']), RelationSample(subject='guilt', object=['guiltless']), RelationSample(subject='hair', object=['hairless']), RelationSample(subject='heart', object=['heartless']), RelationSample(subject='heir', object=['heirless']), RelationSample(subject='home', object=['homeless']), RelationSample(subject='law', object=['lawless']), RelationSample(subject='leg', object=['legless']), RelationSample(subject='life', object=['lifeless', 'liveless']), RelationSample(subject='luck', object=['luckless']), RelationSample(subject='meat', object=['meatless']), RelationSample(subject='mirth', object=['mirthless']), RelationSample(subject='money', object=['moneyless']), RelationSample(subject='odor', object=['odorless', 'odourless']), RelationSample(subject='passion', object=['passionless']), RelationSample(subject='path', object=['pathless']), RelationSample(subject='penny', object=['penniless']), RelationSample(subject='remorse', object=['remorseless']), RelationSample(subject='ruth', object=['ruthless']), RelationSample(subject='sensor', object=['sensorless']), RelationSample(subject='sleeve', object=['sleeveless']), RelationSample(subject='soul', object=['soulless']), RelationSample(subject='speech', object=['speechless']), RelationSample(subject='spine', object=['spineless']), RelationSample(subject='tact', object=['tactless']), RelationSample(subject='talent', object=['talentless']), RelationSample(subject='thought', object=['thoughtless']), RelationSample(subject='tooth', object=['toothless']), RelationSample(subject='window', object=['windowless']), RelationSample(subject='wit', object=['witless'])], _domain=None, _range=None)
2024-06-11 13:15:33 root INFO     starting next token prediction
2024-06-11 13:15:35 root INFO     total LM prediction time: 2.1224570274353027 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:15:35 root INFO     starting operator prediction
2024-06-11 13:15:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Something without {} is)
2024-06-11 13:15:35 root INFO     [relation call] using Something without {} is
2024-06-11 13:15:38 root INFO     total operator prediction time: 3.2293732166290283 seconds
2024-06-11 13:15:41 root INFO     [over+adj_reg] Loading GPT-J and tokenizer
2024-06-11 13:15:55 root INFO     Model loaded
2024-06-11 13:15:57 root INFO     Model put on cuda
2024-06-11 13:15:57 root INFO     Tokenizer loaded
2024-06-11 13:15:57 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='over+adj_reg', prompt_templates=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], prompt_templates_zs=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], samples=[RelationSample(subject='ambitious', object=['overambitious', 'over-ambitious']), RelationSample(subject='arching', object=['overarching', 'over-arching']), RelationSample(subject='booked', object=['overbooked', 'over-booked']), RelationSample(subject='charged', object=['overcharged', 'over-charged']), RelationSample(subject='compensated', object=['overcompensated', 'over-compensated']), RelationSample(subject='confident', object=['overconfident', 'over-confident']), RelationSample(subject='cooked', object=['overcooked', 'over-cooked']), RelationSample(subject='crowded', object=['overcrowded', 'over-crowded']), RelationSample(subject='developed', object=['overdeveloped', 'over-developed']), RelationSample(subject='done', object=['overdone', 'over-done']), RelationSample(subject='dressed', object=['overdressed', 'over-dressed']), RelationSample(subject='enthusiastic', object=['overenthusiastic', 'over-enthusiastic']), RelationSample(subject='excited', object=['overexcited', 'over-excited']), RelationSample(subject='exposed', object=['overexposed', 'over-exposed']), RelationSample(subject='filled', object=['overfilled', 'over-filled']), RelationSample(subject='grown', object=['overgrown', 'over-grown']), RelationSample(subject='heard', object=['overheard', 'over-heard']), RelationSample(subject='heated', object=['overheated', 'over-heated']), RelationSample(subject='inflated', object=['overinflated', 'over-inflated']), RelationSample(subject='laid', object=['overlaid', 'over-laid']), RelationSample(subject='loaded', object=['overloaded', 'over-loaded']), RelationSample(subject='optimistic', object=['overoptimistic', 'over-optimistic']), RelationSample(subject='paid', object=['overpaid', 'over-paid']), RelationSample(subject='painted', object=['overpainted', 'over-painted']), RelationSample(subject='played', object=['overplayed', 'over-played']), RelationSample(subject='populated', object=['overpopulated', 'over-populated']), RelationSample(subject='powered', object=['overpowered', 'over-powered']), RelationSample(subject='protected', object=['overprotected', 'over-protected']), RelationSample(subject='protective', object=['overprotective', 'over-protective']), RelationSample(subject='qualified', object=['overqualified', 'over-qualified']), RelationSample(subject='represented', object=['overrepresented', 'over-represented']), RelationSample(subject='saturated', object=['oversaturated', 'over-saturated']), RelationSample(subject='shadowed', object=['overshadowed', 'over-shadowed']), RelationSample(subject='simplified', object=['oversimplified', 'over-simplified']), RelationSample(subject='sized', object=['oversized', 'over-sized']), RelationSample(subject='sold', object=['oversold', 'over-sold']), RelationSample(subject='spent', object=['overspent', 'over-spent']), RelationSample(subject='stated', object=['overstated', 'over-stated']), RelationSample(subject='stimulated', object=['overstimulated', 'over-stimulated']), RelationSample(subject='stocked', object=['overstocked', 'over-stocked']), RelationSample(subject='strained', object=['overstrained', 'over-strained']), RelationSample(subject='stressed', object=['overstressed', 'over-stressed']), RelationSample(subject='stretched', object=['overstretched', 'over-stretched']), RelationSample(subject='subscribed', object=['oversubscribed', 'over-subscribed']), RelationSample(subject='taken', object=['overtaken', 'over-taken']), RelationSample(subject='thrown', object=['overthrown', 'over-thrown']), RelationSample(subject='turned', object=['overturned', 'over-turned']), RelationSample(subject='used', object=['overused', 'over-used']), RelationSample(subject='written', object=['overwritten', 'over-written']), RelationSample(subject='zealous', object=['overzealous', 'over-zealous'])], _domain=None, _range=None)
2024-06-11 13:15:57 root INFO     starting next token prediction
2024-06-11 13:15:59 root INFO     total LM prediction time: 2.107994318008423 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:15:59 root INFO     starting operator prediction
2024-06-11 13:15:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If something is too {}, it is)
2024-06-11 13:15:59 root INFO     [relation call] using If something is too {}, it is
2024-06-11 13:16:03 root INFO     total operator prediction time: 3.5193374156951904 seconds
2024-06-11 13:16:05 root INFO     [adj+ness_reg] Loading GPT-J and tokenizer
2024-06-11 13:16:19 root INFO     Model loaded
2024-06-11 13:16:21 root INFO     Model put on cuda
2024-06-11 13:16:21 root INFO     Tokenizer loaded
2024-06-11 13:16:21 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj+ness_reg', prompt_templates=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], prompt_templates_zs=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], samples=[RelationSample(subject='amazing', object=['amazingness']), RelationSample(subject='attractive', object=['attractiveness']), RelationSample(subject='aware', object=['awareness']), RelationSample(subject='broken', object=['brokenness']), RelationSample(subject='careful', object=['carefulness']), RelationSample(subject='cheap', object=['cheapness']), RelationSample(subject='competitive', object=['competitiveness']), RelationSample(subject='connected', object=['connectedness']), RelationSample(subject='conscious', object=['consciousness']), RelationSample(subject='creative', object=['creativeness']), RelationSample(subject='dangerous', object=['dangerousness']), RelationSample(subject='devoted', object=['devotedness']), RelationSample(subject='directed', object=['directedness']), RelationSample(subject='distinct', object=['distinctness']), RelationSample(subject='distinctive', object=['distinctiveness']), RelationSample(subject='effective', object=['effectiveness']), RelationSample(subject='extensive', object=['extensiveness']), RelationSample(subject='fixed', object=['fixedness']), RelationSample(subject='foreign', object=['foreignness']), RelationSample(subject='happy', object=['happiness']), RelationSample(subject='helpful', object=['helpfulness']), RelationSample(subject='hidden', object=['hiddenness']), RelationSample(subject='hot', object=['hotness']), RelationSample(subject='huge', object=['hugeness']), RelationSample(subject='impressive', object=['impressiveness']), RelationSample(subject='innovative', object=['innovativeness']), RelationSample(subject='interesting', object=['interestingness']), RelationSample(subject='mad', object=['madness']), RelationSample(subject='marked', object=['markedness']), RelationSample(subject='massive', object=['massiveness']), RelationSample(subject='nice', object=['niceness']), RelationSample(subject='obvious', object=['obviousness']), RelationSample(subject='odd', object=['oddness']), RelationSample(subject='prepared', object=['preparedness']), RelationSample(subject='pure', object=['pureness']), RelationSample(subject='random', object=['randomness']), RelationSample(subject='rare', object=['rareness']), RelationSample(subject='reasonable', object=['reasonableness']), RelationSample(subject='related', object=['relatedness']), RelationSample(subject='righteous', object=['righteousness']), RelationSample(subject='sacred', object=['sacredness']), RelationSample(subject='sad', object=['sadness']), RelationSample(subject='same', object=['sameness']), RelationSample(subject='serious', object=['seriousness']), RelationSample(subject='situated', object=['situatedness']), RelationSample(subject='strange', object=['strangeness']), RelationSample(subject='unique', object=['uniqueness']), RelationSample(subject='useful', object=['usefulness']), RelationSample(subject='vast', object=['vastness']), RelationSample(subject='weak', object=['weakness'])], _domain=None, _range=None)
2024-06-11 13:16:21 root INFO     starting next token prediction
2024-06-11 13:16:23 root INFO     total LM prediction time: 2.1290130615234375 seconds with recall [0.86, 0.98, 1.0, 1.0, 1.0]
2024-06-11 13:16:23 root INFO     starting operator prediction
2024-06-11 13:16:23 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The state of being {} is)
2024-06-11 13:16:23 root INFO     [relation call] using The state of being {} is
2024-06-11 13:16:27 root INFO     total operator prediction time: 3.352863073348999 seconds
2024-06-11 13:16:29 root INFO     [un+adj_reg] Loading GPT-J and tokenizer
2024-06-11 13:16:43 root INFO     Model loaded
2024-06-11 13:16:45 root INFO     Model put on cuda
2024-06-11 13:16:45 root INFO     Tokenizer loaded
2024-06-11 13:16:45 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='un+adj_reg', prompt_templates=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], prompt_templates_zs=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], samples=[RelationSample(subject='able', object=['unable']), RelationSample(subject='acceptable', object=['unacceptable']), RelationSample(subject='affected', object=['unaffected']), RelationSample(subject='authorized', object=['unauthorized', 'unauthorised']), RelationSample(subject='available', object=['unavailable']), RelationSample(subject='avoidable', object=['unavoidable']), RelationSample(subject='aware', object=['unaware']), RelationSample(subject='believable', object=['unbelievable']), RelationSample(subject='biased', object=['unbiased']), RelationSample(subject='certain', object=['uncertain']), RelationSample(subject='changed', object=['unchanged']), RelationSample(subject='comfortable', object=['uncomfortable']), RelationSample(subject='conditional', object=['unconditional']), RelationSample(subject='conscious', object=['unconscious']), RelationSample(subject='controlled', object=['uncontrolled']), RelationSample(subject='desirable', object=['undesirable']), RelationSample(subject='employed', object=['unemployed']), RelationSample(subject='expected', object=['unexpected']), RelationSample(subject='finished', object=['unfinished']), RelationSample(subject='forgettable', object=['unforgettable']), RelationSample(subject='fortunate', object=['unfortunate']), RelationSample(subject='happy', object=['unhappy']), RelationSample(subject='healthy', object=['unhealthy']), RelationSample(subject='identified', object=['unidentified']), RelationSample(subject='intended', object=['unintended']), RelationSample(subject='interrupted', object=['uninterrupted']), RelationSample(subject='known', object=['unknown']), RelationSample(subject='lawful', object=['unlawful']), RelationSample(subject='lucky', object=['unlucky']), RelationSample(subject='noticed', object=['unnoticed']), RelationSample(subject='paid', object=['unpaid']), RelationSample(subject='pleasant', object=['unpleasant']), RelationSample(subject='popular', object=['unpopular']), RelationSample(subject='predictable', object=['unpredictable']), RelationSample(subject='published', object=['unpublished']), RelationSample(subject='realistic', object=['unrealistic']), RelationSample(subject='reasonable', object=['unreasonable']), RelationSample(subject='related', object=['unrelated']), RelationSample(subject='reliable', object=['unreliable']), RelationSample(subject='resolved', object=['unresolved']), RelationSample(subject='restricted', object=['unrestricted']), RelationSample(subject='satisfactory', object=['unsatisfactory']), RelationSample(subject='specified', object=['unspecified']), RelationSample(subject='successful', object=['unsuccessful']), RelationSample(subject='suitable', object=['unsuitable']), RelationSample(subject='sustainable', object=['unsustainable']), RelationSample(subject='used', object=['unused']), RelationSample(subject='usual', object=['unusual']), RelationSample(subject='veiled', object=['unveiled']), RelationSample(subject='wanted', object=['unwanted'])], _domain=None, _range=None)
2024-06-11 13:16:45 root INFO     starting next token prediction
2024-06-11 13:16:47 root INFO     total LM prediction time: 2.14414119720459 seconds with recall [0.94, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:16:47 root INFO     starting operator prediction
2024-06-11 13:16:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-11 13:16:47 root INFO     [relation call] using The opposite of {} is
2024-06-11 13:16:50 root INFO     total operator prediction time: 3.2737298011779785 seconds
2024-06-11 13:16:53 root INFO     [adj+ly_reg] Loading GPT-J and tokenizer
2024-06-11 13:17:07 root INFO     Model loaded
2024-06-11 13:17:09 root INFO     Model put on cuda
2024-06-11 13:17:09 root INFO     Tokenizer loaded
2024-06-11 13:17:09 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj+ly_reg', prompt_templates=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], prompt_templates_zs=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], samples=[RelationSample(subject='according', object=['accordingly']), RelationSample(subject='actual', object=['actually']), RelationSample(subject='additional', object=['additionally']), RelationSample(subject='apparent', object=['apparently']), RelationSample(subject='beautiful', object=['beautifully']), RelationSample(subject='clinical', object=['clinically']), RelationSample(subject='creative', object=['creatively']), RelationSample(subject='critical', object=['critically']), RelationSample(subject='cultural', object=['culturally']), RelationSample(subject='decided', object=['decidedly']), RelationSample(subject='different', object=['differently']), RelationSample(subject='digital', object=['digitally']), RelationSample(subject='effective', object=['effectively']), RelationSample(subject='environmental', object=['environmentally']), RelationSample(subject='extensive', object=['extensively']), RelationSample(subject='famous', object=['famously']), RelationSample(subject='federal', object=['federally']), RelationSample(subject='financial', object=['financially']), RelationSample(subject='global', object=['globally']), RelationSample(subject='historical', object=['historically']), RelationSample(subject='huge', object=['hugely']), RelationSample(subject='immediate', object=['immediately']), RelationSample(subject='important', object=['importantly']), RelationSample(subject='increasing', object=['increasingly']), RelationSample(subject='interesting', object=['interestingly']), RelationSample(subject='internal', object=['internally']), RelationSample(subject='international', object=['internationally']), RelationSample(subject='legal', object=['legally']), RelationSample(subject='mental', object=['mentally']), RelationSample(subject='nice', object=['nicely']), RelationSample(subject='obvious', object=['obviously']), RelationSample(subject='physical', object=['physically']), RelationSample(subject='political', object=['politically']), RelationSample(subject='popular', object=['popularly']), RelationSample(subject='practical', object=['practically']), RelationSample(subject='previous', object=['previously']), RelationSample(subject='rare', object=['rarely']), RelationSample(subject='regional', object=['regionally']), RelationSample(subject='serious', object=['seriously']), RelationSample(subject='sexual', object=['sexually']), RelationSample(subject='significant', object=['significantly']), RelationSample(subject='similar', object=['similarly']), RelationSample(subject='strong', object=['strongly']), RelationSample(subject='subsequent', object=['subsequently']), RelationSample(subject='successful', object=['successfully']), RelationSample(subject='traditional', object=['traditionally']), RelationSample(subject='typical', object=['typically']), RelationSample(subject='unique', object=['uniquely']), RelationSample(subject='virtual', object=['virtually']), RelationSample(subject='visual', object=['visually'])], _domain=None, _range=None)
2024-06-11 13:17:09 root INFO     starting next token prediction
2024-06-11 13:17:11 root INFO     total LM prediction time: 2.1371986865997314 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:17:11 root INFO     starting operator prediction
2024-06-11 13:17:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The adjective form of {} is)
2024-06-11 13:17:11 root INFO     [relation call] using The adjective form of {} is
2024-06-11 13:17:14 root INFO     total operator prediction time: 3.327455520629883 seconds
2024-06-11 13:17:17 root INFO     [verb+er_irreg] Loading GPT-J and tokenizer
2024-06-11 13:17:31 root INFO     Model loaded
2024-06-11 13:17:33 root INFO     Model put on cuda
2024-06-11 13:17:33 root INFO     Tokenizer loaded
2024-06-11 13:17:33 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+er_irreg', prompt_templates=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], prompt_templates_zs=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], samples=[RelationSample(subject='achieve', object=['achiever']), RelationSample(subject='advertise', object=['advertiser']), RelationSample(subject='announce', object=['announcer']), RelationSample(subject='bake', object=['baker']), RelationSample(subject='begin', object=['beginner']), RelationSample(subject='believe', object=['believer']), RelationSample(subject='borrow', object=['borrower']), RelationSample(subject='choreograph', object=['choreographer']), RelationSample(subject='compose', object=['composer']), RelationSample(subject='consume', object=['consumer']), RelationSample(subject='contend', object=['contender']), RelationSample(subject='defend', object=['defender']), RelationSample(subject='deliver', object=['deliverer']), RelationSample(subject='destroy', object=['destroyer']), RelationSample(subject='determine', object=['determiner']), RelationSample(subject='develop', object=['developer']), RelationSample(subject='discover', object=['discoverer']), RelationSample(subject='eat', object=['eater']), RelationSample(subject='entertain', object=['entertainer']), RelationSample(subject='examine', object=['examiner']), RelationSample(subject='explore', object=['explorer']), RelationSample(subject='follow', object=['follower']), RelationSample(subject='interpret', object=['interpreter']), RelationSample(subject='intrude', object=['intruder']), RelationSample(subject='learn', object=['learner']), RelationSample(subject='listen', object=['listener']), RelationSample(subject='lose', object=['loser']), RelationSample(subject='manage', object=['manager']), RelationSample(subject='molest', object=['molester']), RelationSample(subject='mourn', object=['mourner']), RelationSample(subject='observe', object=['observer']), RelationSample(subject='offend', object=['offender']), RelationSample(subject='organise', object=['organiser']), RelationSample(subject='organize', object=['organizer']), RelationSample(subject='perform', object=['performer']), RelationSample(subject='preach', object=['preacher']), RelationSample(subject='promote', object=['promoter']), RelationSample(subject='provide', object=['provider']), RelationSample(subject='publish', object=['publisher']), RelationSample(subject='receive', object=['receiver']), RelationSample(subject='recommend', object=['recommender']), RelationSample(subject='send', object=['sender']), RelationSample(subject='skydive', object=['skydiver']), RelationSample(subject='slay', object=['slayer']), RelationSample(subject='speak', object=['speaker']), RelationSample(subject='subscribe', object=['subscriber']), RelationSample(subject='suffer', object=['sufferer']), RelationSample(subject='teach', object=['teacher']), RelationSample(subject='tell', object=['teller']), RelationSample(subject='write', object=['writer'])], _domain=None, _range=None)
2024-06-11 13:17:33 root INFO     starting next token prediction
2024-06-11 13:17:35 root INFO     total LM prediction time: 2.11887264251709 seconds with recall [1.0, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:17:35 root INFO     starting operator prediction
2024-06-11 13:17:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you {} something, you are a)
2024-06-11 13:17:35 root INFO     [relation call] using If you {} something, you are a
2024-06-11 13:17:39 root INFO     total operator prediction time: 3.4104065895080566 seconds
2024-06-11 13:17:41 root INFO     [verb+able_reg] Loading GPT-J and tokenizer
2024-06-11 13:17:59 root INFO     Model loaded
2024-06-11 13:18:01 root INFO     Model put on cuda
2024-06-11 13:18:02 root INFO     Tokenizer loaded
2024-06-11 13:18:02 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+able_reg', prompt_templates=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], prompt_templates_zs=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], samples=[RelationSample(subject='accept', object=['acceptable']), RelationSample(subject='achieve', object=['achieveable']), RelationSample(subject='adapt', object=['adaptable']), RelationSample(subject='adjust', object=['adjustable']), RelationSample(subject='admire', object=['admirable']), RelationSample(subject='adore', object=['adorable']), RelationSample(subject='advise', object=['advisable']), RelationSample(subject='afford', object=['affordable']), RelationSample(subject='avoid', object=['avoidable']), RelationSample(subject='believe', object=['believeable', 'believable']), RelationSample(subject='consider', object=['considerable']), RelationSample(subject='contain', object=['containable']), RelationSample(subject='define', object=['definable']), RelationSample(subject='deliver', object=['deliverable']), RelationSample(subject='discover', object=['discoverable']), RelationSample(subject='dispose', object=['disposable']), RelationSample(subject='download', object=['downloadable']), RelationSample(subject='edit', object=['editable']), RelationSample(subject='enjoy', object=['enjoyable']), RelationSample(subject='execute', object=['executable']), RelationSample(subject='expand', object=['expandable']), RelationSample(subject='expect', object=['expectable']), RelationSample(subject='explain', object=['explainable']), RelationSample(subject='extend', object=['extendable']), RelationSample(subject='foresee', object=['foreseeable']), RelationSample(subject='identify', object=['identifiable']), RelationSample(subject='imagine', object=['imaginable']), RelationSample(subject='improve', object=['improvable']), RelationSample(subject='inflate', object=['inflatable']), RelationSample(subject='learn', object=['learnable']), RelationSample(subject='maintain', object=['maintainable']), RelationSample(subject='manage', object=['manageable']), RelationSample(subject='observe', object=['observable']), RelationSample(subject='perform', object=['performable']), RelationSample(subject='predict', object=['predictable']), RelationSample(subject='prefer', object=['preferable']), RelationSample(subject='prevent', object=['preventable']), RelationSample(subject='protect', object=['protectable']), RelationSample(subject='publish', object=['publishable']), RelationSample(subject='recognize', object=['recognizable', 'recognisable']), RelationSample(subject='recommend', object=['recommendable']), RelationSample(subject='rely', object=['reliable']), RelationSample(subject='renew', object=['renewable']), RelationSample(subject='replace', object=['replaceable']), RelationSample(subject='represent', object=['representable']), RelationSample(subject='survive', object=['survivable']), RelationSample(subject='sustain', object=['sustainable']), RelationSample(subject='understand', object=['understandable']), RelationSample(subject='vary', object=['variable']), RelationSample(subject='write', object=['writeable', 'writable'])], _domain=None, _range=None)
2024-06-11 13:18:02 root INFO     starting next token prediction
2024-06-11 13:18:04 root INFO     total LM prediction time: 2.1170341968536377 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:18:04 root INFO     starting operator prediction
2024-06-11 13:18:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you can {} something, that thing is)
2024-06-11 13:18:04 root INFO     [relation call] using If you can {} something, that thing is
2024-06-11 13:18:07 root INFO     total operator prediction time: 3.485003709793091 seconds
2024-06-11 13:18:10 root INFO     [meronyms - part] Loading GPT-J and tokenizer
2024-06-11 13:18:24 root INFO     Model loaded
2024-06-11 13:18:26 root INFO     Model put on cuda
2024-06-11 13:18:26 root INFO     Tokenizer loaded
2024-06-11 13:18:26 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - part', prompt_templates=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], prompt_templates_zs=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], samples=[RelationSample(subject='academia', object=['college', 'university', 'institute']), RelationSample(subject='apartment', object=['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room']), RelationSample(subject='bird', object=['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat']), RelationSample(subject='brush', object=['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem']), RelationSample(subject='bus', object=['seats', 'conductor', 'window', 'driver', 'roof']), RelationSample(subject='byte', object=['bit']), RelationSample(subject='car', object=['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system']), RelationSample(subject='castle', object=['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall']), RelationSample(subject='cat', object=['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth']), RelationSample(subject='chair', object=['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs']), RelationSample(subject='church', object=['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner']), RelationSample(subject='comb', object=['teeth', 'shaft', 'grip', 'tooth', 'handle']), RelationSample(subject='day', object=['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour']), RelationSample(subject='deer', object=['antler', 'antlers', 'withers', 'flag', 'scut']), RelationSample(subject='dollar', object=['cent']), RelationSample(subject='door', object=['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill']), RelationSample(subject='dress', object=['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener']), RelationSample(subject='filename', object=['extension', 'name']), RelationSample(subject='flower', object=['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium']), RelationSample(subject='gigabit', object=['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit']), RelationSample(subject='gramm', object=['milligram', 'mg', 'grain', 'milligram', 'mcg', 'carat', 'microgram', 'ng', 'dg', 'decigram', 'nanogram', 'metric_grain', 'obolus']), RelationSample(subject='guitar', object=['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard']), RelationSample(subject='gun', object=['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover']), RelationSample(subject='harbor', object=['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='jail', object=['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell']), RelationSample(subject='jewellery', object=['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel']), RelationSample(subject='litre', object=['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre']), RelationSample(subject='movie', object=['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption']), RelationSample(subject='orthography', object=['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling']), RelationSample(subject='piano', object=['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal']), RelationSample(subject='pie', object=['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing']), RelationSample(subject='poem', object=['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry']), RelationSample(subject='pub', object=['bar', 'barroom', 'taproom', 'saloon', 'ginmill']), RelationSample(subject='radio', object=['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set']), RelationSample(subject='railcar', object=['suspension', 'cushion', 'shock', 'shock_absorber', 'suspension_system']), RelationSample(subject='seafront', object=['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='shilling', object=['pence']), RelationSample(subject='shirt', object=['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button']), RelationSample(subject='sonata', object=['movement', 'part']), RelationSample(subject='staircase', object=['step', 'riser', 'landing', 'tread', 'stair', 'stairhead']), RelationSample(subject='sword', object=['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge']), RelationSample(subject='table', object=['tabletop', 'tableware', 'leg', 'legs']), RelationSample(subject='teapot', object=['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter']), RelationSample(subject='telephone', object=['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver']), RelationSample(subject='tonne', object=['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg']), RelationSample(subject='torso', object=['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end']), RelationSample(subject='tripod', object=['leg', 'stand']), RelationSample(subject='typewriter', object=['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer']), RelationSample(subject='window', object=['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame']), RelationSample(subject='womb', object=['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'])], _domain=None, _range=None)
2024-06-11 13:18:26 root INFO     starting next token prediction
2024-06-11 13:18:28 root INFO     total LM prediction time: 2.118547201156616 seconds with recall [0.54, 0.74, 0.8, 0.86, 0.88]
2024-06-11 13:18:28 root INFO     starting operator prediction
2024-06-11 13:18:28 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A part of a {} is a)
2024-06-11 13:18:28 root INFO     [relation call] using A part of a {} is a
2024-06-11 13:18:31 root INFO     total operator prediction time: 3.4338772296905518 seconds
2024-06-11 13:18:34 root INFO     [synonyms - exact] Loading GPT-J and tokenizer
2024-06-11 13:18:48 root INFO     Model loaded
2024-06-11 13:18:50 root INFO     Model put on cuda
2024-06-11 13:18:50 root INFO     Tokenizer loaded
2024-06-11 13:18:50 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='synonyms - exact', prompt_templates=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], prompt_templates_zs=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], samples=[RelationSample(subject='airplane', object=['aeroplane', 'plane']), RelationSample(subject='auto', object=['car', 'automobile', 'motorcar']), RelationSample(subject='baby', object=['infant', 'babe']), RelationSample(subject='bicycle', object=['bike', 'wheel', 'cycle']), RelationSample(subject='child', object=['kid', 'youngster', 'minor', 'shaver', 'nipper', 'small_fry', 'tiddler', 'tike', 'tyke', 'fry', 'nestling']), RelationSample(subject='cloth', object=['fabric', 'material', 'textile']), RelationSample(subject='clothes', object=['clothing', 'apparel', 'dress']), RelationSample(subject='confused', object=['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up']), RelationSample(subject='dollars', object=['bucks']), RelationSample(subject='emphasis', object=['accent', 'accentuaion', 'importance', 'stress', 'significance']), RelationSample(subject='father', object=['dad', 'daddy']), RelationSample(subject='flower', object=['blossom', 'bloom']), RelationSample(subject='harbor', object=['seaport', 'haven', 'harbour']), RelationSample(subject='help', object=['aid', 'assist']), RelationSample(subject='hieroglyph', object=['hieroglyphic', 'pictogram']), RelationSample(subject='homogeneous', object=['uniform', 'unvarying']), RelationSample(subject='honest', object=['sincere', 'ingenuous', 'true', 'direct', 'truthful']), RelationSample(subject='identical', object=['same', 'indistinguishable']), RelationSample(subject='incorrect', object=['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false']), RelationSample(subject='intelligent', object=['clever', 'smart']), RelationSample(subject='jewel', object=['gem', 'stone']), RelationSample(subject='lad', object=['chap', 'fellow', 'feller', 'fella', 'gent', 'blighter', 'cuss', 'bloke']), RelationSample(subject='lady', object=['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman']), RelationSample(subject='lazy', object=['indolent', 'faineant', 'otiose', 'slothful', 'work-shy']), RelationSample(subject='list', object=['listing', 'enumeration']), RelationSample(subject='loyal', object=['faithful', 'true', 'dependable', 'devoted', 'reliable']), RelationSample(subject='market', object=['marketplace', 'mart', 'bazaar']), RelationSample(subject='mend', object=['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning']), RelationSample(subject='mesh', object=['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork']), RelationSample(subject='monument', object=['memorial']), RelationSample(subject='mother', object=['mom', 'mommy', 'mum']), RelationSample(subject='murder', object=['slaying', 'slay', 'execution']), RelationSample(subject='new', object=['modern', 'recent']), RelationSample(subject='obsolete', object=['outdated', 'out-of-date', 'superannuated']), RelationSample(subject='organized', object=['arranged', 'configured', 'corporate', 'incorporated', 're-formed', 'reorganized', 'reorganised']), RelationSample(subject='package', object=['parcel', 'pack', 'packet', 'bundle']), RelationSample(subject='phone', object=['telephone', 'cell', 'cellphone', 'smartphone']), RelationSample(subject='portion', object=['part', 'component_part', 'component', 'constituent']), RelationSample(subject='railway', object=['railroad']), RelationSample(subject='rational', object=['logical', 'coherent', 'reasonable', 'sane']), RelationSample(subject='reasonable', object=['sensible']), RelationSample(subject='rock', object=['stone']), RelationSample(subject='shore', object=['coast', 'strand', 'bank', 'beach', '']), RelationSample(subject='snake', object=['serpent', 'ophidian']), RelationSample(subject='sofa', object=['couch', 'lounge']), RelationSample(subject='spouse', object=['partner', 'mate', 'better_half']), RelationSample(subject='style', object=['manner', 'mode', 'fashion', 'way']), RelationSample(subject='sweets', object=['confectionery', 'dessert', 'confection']), RelationSample(subject='villain', object=['scoundrel', 'rascal']), RelationSample(subject='vocabulary', object=['lexicon', 'wordbook', 'dictionary', 'glossary'])], _domain=None, _range=None)
2024-06-11 13:18:50 root INFO     starting next token prediction
2024-06-11 13:18:52 root INFO     total LM prediction time: 2.128727912902832 seconds with recall [0.54, 0.7, 0.76, 0.82, 0.86]
2024-06-11 13:18:52 root INFO     starting operator prediction
2024-06-11 13:18:52 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Another word for {} is )
2024-06-11 13:18:52 root INFO     [relation call] using Another word for {} is 
2024-06-11 13:18:56 root INFO     total operator prediction time: 3.336505174636841 seconds
2024-06-11 13:18:58 root INFO     [synonyms - intensity] Loading GPT-J and tokenizer
2024-06-11 13:19:12 root INFO     Model loaded
2024-06-11 13:19:14 root INFO     Model put on cuda
2024-06-11 13:19:14 root INFO     Tokenizer loaded
2024-06-11 13:19:14 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='synonyms - intensity', prompt_templates=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], prompt_templates_zs=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], samples=[RelationSample(subject='afraid', object=['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky']), RelationSample(subject='angry', object=['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething']), RelationSample(subject='ask', object=['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist']), RelationSample(subject='bad', object=['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable']), RelationSample(subject='boring', object=['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome']), RelationSample(subject='cat', object=['lion', 'tiger', 'leopard', 'panther', 'jaguar']), RelationSample(subject='chuckle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='confused', object=['lost', 'bewildered', 'trapped', 'desperate']), RelationSample(subject='creative', object=['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative']), RelationSample(subject='cry', object=['scream', 'shriek', 'screech', 'screeching']), RelationSample(subject='damp', object=['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet']), RelationSample(subject='dinner', object=['feast', 'banquet', 'fiesta']), RelationSample(subject='dislike', object=['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain']), RelationSample(subject='doze', object=['sleep', 'slumber']), RelationSample(subject='drizzle', object=['rain', 'shower', 'raifall', 'deluge']), RelationSample(subject='excited', object=['agitated', 'nervous']), RelationSample(subject='faith', object=['fanatism', 'fanaticism', 'zealotry']), RelationSample(subject='giggle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='guilty', object=['remorseful', 'sorrowful', 'unworthy']), RelationSample(subject='happy', object=['ecstatic', 'enraptured', 'rapturous', 'rapt', 'rhapsodic']), RelationSample(subject='house', object=['palace', 'castle']), RelationSample(subject='hungry', object=['starving', 'famished', 'peckish', 'ravenous', 'starved']), RelationSample(subject='indulge', object=['pamper', 'spoil', 'coddle']), RelationSample(subject='interesting', object=['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling']), RelationSample(subject='irritate', object=['enrage', 'incense', 'infuriate', 'ire', 'mad', 'madden', 'steam', 'umbrage']), RelationSample(subject='jog', object=['run', 'scarper', 'flee', 'fly']), RelationSample(subject='lake', object=['sea', 'ocean']), RelationSample(subject='like', object=['love', 'care', 'fond', 'crush', 'infatuate']), RelationSample(subject='love', object=['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere']), RelationSample(subject='monkey', object=['gorilla']), RelationSample(subject='nap', object=['sleep', 'slumber']), RelationSample(subject='necessary', object=['essential', 'indispensable', 'vital', 'required']), RelationSample(subject='opposed', object=['averse', 'antipathetic', 'antipathetical', 'indisposed', 'loath', 'loth']), RelationSample(subject='pain', object=['torment', 'torture', 'agony']), RelationSample(subject='pony', object=['horse']), RelationSample(subject='poorly', object=['afflicted', 'sick', 'ill', 'stricken']), RelationSample(subject='rain', object=['deluge', 'shower']), RelationSample(subject='sad', object=['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy']), RelationSample(subject='sea', object=['ocean']), RelationSample(subject='snack', object=['meal', 'eat']), RelationSample(subject='sniffles', object=['pneumonia']), RelationSample(subject='soon', object=['immediately', 'promptly', 'straightaway']), RelationSample(subject='strong', object=['powerful', 'forceful', 'super', 'potent']), RelationSample(subject='tasty', object=['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly']), RelationSample(subject='tired', object=['exhausted', 'drained']), RelationSample(subject='unfortunate', object=['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous']), RelationSample(subject='unhappy', object=['miserable', 'suffering', 'wretched']), RelationSample(subject='want', object=['crave', 'hunger', 'thirst', 'starve', 'lust']), RelationSample(subject='warm', object=['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot']), RelationSample(subject='well', object=['flourishing', 'robust', 'booming', 'prospering', 'prosperous', 'thriving'])], _domain=None, _range=None)
2024-06-11 13:19:14 root INFO     starting next token prediction
2024-06-11 13:19:16 root INFO     total LM prediction time: 2.117115020751953 seconds with recall [0.42, 0.56, 0.64, 0.72, 0.78]
2024-06-11 13:19:16 root INFO     starting operator prediction
2024-06-11 13:19:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more intense word for {} is )
2024-06-11 13:19:16 root INFO     [relation call] using A more intense word for {} is 
2024-06-11 13:19:20 root INFO     total operator prediction time: 3.4429359436035156 seconds
2024-06-11 13:19:22 root INFO     [hypernyms - misc] Loading GPT-J and tokenizer
2024-06-11 13:19:36 root INFO     Model loaded
2024-06-11 13:19:38 root INFO     Model put on cuda
2024-06-11 13:19:39 root INFO     Tokenizer loaded
2024-06-11 13:19:39 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hypernyms - misc', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='armchair', object=['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='blender', object=['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='bracelet', object=['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='brooch', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', '']), RelationSample(subject='cake', object=['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity']), RelationSample(subject='computer', object=['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', '']), RelationSample(subject='croissant', object=['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity']), RelationSample(subject='cup', object=['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container']), RelationSample(subject='denim', object=['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='deodorant', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='desk', object=['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='diary', object=['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dishwasher', object=['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dress', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='fridge', object=['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='gasoline', object=['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity']), RelationSample(subject='grapefruit', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='hairnet', object=['net', 'network', 'mesh', 'meshing', 'meshwork', 'fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hairpin', object=['pin', 'fastener', 'fastening', 'holdfast', 'fixing', 'restraint', 'constraint', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hamburger', object=['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='jacket', object=['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='jeans', object=['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='juicer', object=['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='lemon', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='lotion', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='mascara', object=['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='necklace', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notebook', object=['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notepad', object=['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity']), RelationSample(subject='pastry', object=['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='peach', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='perfume', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='photo', object=['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='pie', object=['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='plum', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='postcard', object=['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='shelf', object=['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='shirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sidewalk', object=['walk', 'walkway', 'paseo', 'path', 'way', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='skirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sofa', object=['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='stapler', object=['device', 'machine', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sunscreen', object=['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sweater', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='toaster', object=['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='toothbrush', object=['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tub', object=['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tv', object=['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='vase', object=['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='wristband', object=['band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'])], _domain=None, _range=None)
2024-06-11 13:19:39 root INFO     starting next token prediction
2024-06-11 13:19:41 root INFO     total LM prediction time: 2.129312753677368 seconds with recall [0.76, 0.88, 0.92, 0.94, 0.96]
2024-06-11 13:19:41 root INFO     starting operator prediction
2024-06-11 13:19:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-11 13:19:41 root INFO     [relation call] using The {} falls into the category of
2024-06-11 13:19:45 root INFO     total operator prediction time: 3.4188289642333984 seconds
2024-06-11 13:19:47 root INFO     [hyponyms - misc] Loading GPT-J and tokenizer
2024-06-11 13:20:01 root INFO     Model loaded
2024-06-11 13:20:03 root INFO     Model put on cuda
2024-06-11 13:20:03 root INFO     Tokenizer loaded
2024-06-11 13:20:03 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hyponyms - misc', prompt_templates=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], prompt_templates_zs=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], samples=[RelationSample(subject='backpack', object=['daypack', 'kitbag', 'kit_bag']), RelationSample(subject='bag', object=['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag']), RelationSample(subject='bed', object=['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble']), RelationSample(subject='boat', object=['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat']), RelationSample(subject='book', object=['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook']), RelationSample(subject='brush', object=['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush']), RelationSample(subject='burger', object=['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger']), RelationSample(subject='camera', object=['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera']), RelationSample(subject='candy', object=['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg']), RelationSample(subject='car', object=['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand']), RelationSample(subject='church', object=['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk']), RelationSample(subject='citrus', object=['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu']), RelationSample(subject='cloud', object=['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke']), RelationSample(subject='collar', object=['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece']), RelationSample(subject='color', object=['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown']), RelationSample(subject='computer', object=['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad']), RelationSample(subject='container', object=['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag']), RelationSample(subject='cookware', object=['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner']), RelationSample(subject='cup', object=['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail']), RelationSample(subject='cushion', object=['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat']), RelationSample(subject='cutlery', object=['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork']), RelationSample(subject='dessert', object=['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice']), RelationSample(subject='dress', object=['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress']), RelationSample(subject='drum', object=['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka']), RelationSample(subject='emotion', object=['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy']), RelationSample(subject='flask', object=['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask']), RelationSample(subject='guitar', object=['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke']), RelationSample(subject='gun', object=['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling']), RelationSample(subject='jewel', object=['diamond', 'ruby', 'pearl', 'emerald', 'sapphire']), RelationSample(subject='jewelry', object=['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst']), RelationSample(subject='mixer', object=['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk']), RelationSample(subject='month', object=['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']), RelationSample(subject='oven', object=['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor']), RelationSample(subject='painting', object=['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti']), RelationSample(subject='poem', object=['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle']), RelationSample(subject='railway', object=['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail']), RelationSample(subject='season', object=['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek']), RelationSample(subject='seat', object=['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet']), RelationSample(subject='shelf', object=['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm']), RelationSample(subject='shirt', object=['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt']), RelationSample(subject='shoes', object=['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled']), RelationSample(subject='sofa', object=['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab']), RelationSample(subject='song', object=['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song']), RelationSample(subject='spice', object=['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed']), RelationSample(subject='sweater', object=['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck']), RelationSample(subject='tool', object=['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage']), RelationSample(subject='toy', object=['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo']), RelationSample(subject='trousers', object=['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen']), RelationSample(subject='weapon', object=['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire']), RelationSample(subject='weekday', object=['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'])], _domain=None, _range=None)
2024-06-11 13:20:03 root INFO     starting next token prediction
2024-06-11 13:20:05 root INFO     total LM prediction time: 2.1117196083068848 seconds with recall [0.64, 0.68, 0.8, 0.86, 0.9]
2024-06-11 13:20:05 root INFO     starting operator prediction
2024-06-11 13:20:05 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more specific term for a {} is)
2024-06-11 13:20:05 root INFO     [relation call] using A more specific term for a {} is
2024-06-11 13:20:09 root INFO     total operator prediction time: 3.4906673431396484 seconds
2024-06-11 13:20:11 root INFO     [hypernyms - animals] Loading GPT-J and tokenizer
2024-06-11 13:20:25 root INFO     Model loaded
2024-06-11 13:20:27 root INFO     Model put on cuda
2024-06-11 13:20:27 root INFO     Tokenizer loaded
2024-06-11 13:20:27 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hypernyms - animals', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='allosaurus', object=['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='anaconda', object=['snake', 'reptile', 'boa', 'serpent', 'ophidian']), RelationSample(subject='ant', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing']), RelationSample(subject='beaver', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='bee', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing']), RelationSample(subject='beetle', object=['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing']), RelationSample(subject='buffalo', object=['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='butterfly', object=['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing']), RelationSample(subject='cat', object=['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', '']), RelationSample(subject='chicken', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='chimpanzee', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='chinchilla', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='cobra', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='cockroach', object=['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing']), RelationSample(subject='cow', object=['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='coyote', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='deer', object=['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='dog', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='duck', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='eagle', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='falcon', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='fox', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='gibbon', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='goat', object=['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='goose', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='gorilla', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='hawk', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='human', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='jackal', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='jaguar', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='leopard', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='lion', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='mamba', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='mouse', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='orangutan', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='owl', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='pony', object=['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus']), RelationSample(subject='porcupine', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='quail', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='rattlesnake', object=['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian']), RelationSample(subject='squirrel', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='stegosaurus', object=['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='tiger', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='triceratops', object=['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='turkey', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='tyrannosaurus', object=['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='velociraptor', object=['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='viper', object=['snake', 'reptile', 'snake', 'serpent', 'ophidian']), RelationSample(subject='vulture', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='wolf', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'])], _domain=None, _range=None)
2024-06-11 13:20:27 root INFO     starting next token prediction
2024-06-11 13:20:30 root INFO     total LM prediction time: 2.110781669616699 seconds with recall [0.92, 0.98, 0.98, 1.0, 1.0]
2024-06-11 13:20:30 root INFO     starting operator prediction
2024-06-11 13:20:30 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-11 13:20:30 root INFO     [relation call] using The {} falls into the category of
2024-06-11 13:20:33 root INFO     total operator prediction time: 3.446117401123047 seconds
2024-06-11 13:20:35 root INFO     [antonyms - binary] Loading GPT-J and tokenizer
2024-06-11 13:20:49 root INFO     Model loaded
2024-06-11 13:20:51 root INFO     Model put on cuda
2024-06-11 13:20:52 root INFO     Tokenizer loaded
2024-06-11 13:20:52 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='antonyms - binary', prompt_templates=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], prompt_templates_zs=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], samples=[RelationSample(subject='after', object=['before', 'earlier', 'previously']), RelationSample(subject='ahead', object=['behind', 'rear', 'after', 'tail', 'beforehand']), RelationSample(subject='anterior', object=['posterior']), RelationSample(subject='backward', object=['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward']), RelationSample(subject='before', object=['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead']), RelationSample(subject='beginning', object=['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='below', object=['above', 'higher', 'up']), RelationSample(subject='climb', object=['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining']), RelationSample(subject='dead', object=['alive', 'living', 'live']), RelationSample(subject='decrement', object=['increment']), RelationSample(subject='descend', object=['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant']), RelationSample(subject='dive', object=['emerge']), RelationSample(subject='down', object=['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward']), RelationSample(subject='downslope', object=['upslope', 'ascent']), RelationSample(subject='drop', object=['lift', 'pick_up']), RelationSample(subject='dynamic', object=['static', 'still', 'unmoving', 'unchanging']), RelationSample(subject='employ', object=['dismiss', 'fire', 'sack', 'displace', 'terminate']), RelationSample(subject='exit', object=['entrance', 'entranceway', 'entryway', 'entry', 'entree']), RelationSample(subject='fall', object=['rise', 'upward', 'climb']), RelationSample(subject='first', object=['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='forget', object=['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect']), RelationSample(subject='forward', object=['backward', 'back', 'backwards', 'rearward', 'rearwards']), RelationSample(subject='front', object=['back', 'rear', 'forepart']), RelationSample(subject='in', object=['out', 'outer', 'exterior', 'outside']), RelationSample(subject='inbound', object=['outbound']), RelationSample(subject='inhale', object=['exhale']), RelationSample(subject='input', object=['output']), RelationSample(subject='inside', object=['outside', 'exterior', 'out']), RelationSample(subject='interior', object=['exterior', 'outdoor', 'out-of-door', 'outside']), RelationSample(subject='internal', object=['external', 'outer', 'outside']), RelationSample(subject='inverse', object=['reverse', 'reversion', 'reversal', 'turnabout', 'turnaround']), RelationSample(subject='mortal', object=['immortal']), RelationSample(subject='occupied', object=['vacant', 'free']), RelationSample(subject='off', object=['on']), RelationSample(subject='out', object=['in', 'inside']), RelationSample(subject='outward', object=['upward', 'up', 'upwards']), RelationSample(subject='over', object=['under', 'below', 'beneath']), RelationSample(subject='previously', object=['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent']), RelationSample(subject='proceed', object=['retreat', 'return']), RelationSample(subject='rise', object=['sink', 'drop', 'fall']), RelationSample(subject='south', object=['north']), RelationSample(subject='southeast', object=['southwest', 'northeast']), RelationSample(subject='submerge', object=['emerge']), RelationSample(subject='top', object=['bottom', 'underside', 'undersurface']), RelationSample(subject='toward', object=['away', 'off', 'forth', 'aside']), RelationSample(subject='true', object=['false', 'incorrect', 'wrong', 'mistaken']), RelationSample(subject='under', object=['over', 'above', 'up']), RelationSample(subject='up', object=['down', 'downwards', 'downward', 'downwardly']), RelationSample(subject='uphill', object=['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping']), RelationSample(subject='west', object=['east'])], _domain=None, _range=None)
2024-06-11 13:20:52 root INFO     starting next token prediction
2024-06-11 13:20:54 root INFO     total LM prediction time: 2.151822090148926 seconds with recall [0.82, 0.9, 0.92, 0.92, 0.94]
2024-06-11 13:20:54 root INFO     starting operator prediction
2024-06-11 13:20:54 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-11 13:20:54 root INFO     [relation call] using The opposite of {} is
2024-06-11 13:20:57 root INFO     total operator prediction time: 3.298353672027588 seconds
2024-06-11 13:21:00 root INFO     [meronyms - substance] Loading GPT-J and tokenizer
2024-06-11 13:21:18 root INFO     Model loaded
2024-06-11 13:21:20 root INFO     Model put on cuda
2024-06-11 13:21:20 root INFO     Tokenizer loaded
2024-06-11 13:21:20 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - substance', prompt_templates=['A {} is made up of', 'A {} is comprised of', '{} is made from'], prompt_templates_zs=['A {} is made up of', 'A {} is comprised of', '{} is made from'], samples=[RelationSample(subject='atmosphere', object=['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone']), RelationSample(subject='bag', object=['leather', 'fabric', 'plastic']), RelationSample(subject='beach', object=['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si']), RelationSample(subject='beard', object=['hair']), RelationSample(subject='body', object=['flesh', 'bones']), RelationSample(subject='boots', object=['leather', 'canvas']), RelationSample(subject='bottle', object=['glass', 'plastic']), RelationSample(subject='bowl', object=['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay']), RelationSample(subject='box', object=['cardboard', 'tin', 'boxwood', 'turkish_boxwood']), RelationSample(subject='bread', object=['flour', 'yeast', '']), RelationSample(subject='bronze', object=['copper', 'tin', 'cu', 'atomic_number_29']), RelationSample(subject='candy', object=['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts']), RelationSample(subject='chocolate', object=['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean']), RelationSample(subject='clothing', object=['fabric', 'leather', '']), RelationSample(subject='cloud', object=['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor']), RelationSample(subject='cocktail', object=['alcohol', 'juice', 'water']), RelationSample(subject='concrete', object=['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si']), RelationSample(subject='desk', object=['wood', 'metal', 'steel']), RelationSample(subject='diamond', object=['carbon']), RelationSample(subject='doorknob', object=['metal', 'steel', 'bronze', 'wood']), RelationSample(subject='flag', object=['fabric', 'paper']), RelationSample(subject='glacier', object=['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice']), RelationSample(subject='glass', object=['silicone']), RelationSample(subject='house', object=['bricks', 'cement', 'wood', 'clay']), RelationSample(subject='ice', object=['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='icicle', object=['ice', 'water']), RelationSample(subject='jam', object=['fruit', 'sugar', 'berries']), RelationSample(subject='jeans', object=['fabric', 'denim']), RelationSample(subject='lawn', object=['grass']), RelationSample(subject='lens', object=['glass', 'plastic']), RelationSample(subject='mirror', object=['glass', 'bronze']), RelationSample(subject='money', object=['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin']), RelationSample(subject='ocean', object=['water']), RelationSample(subject='omelette', object=['eggs', 'egg', 'milk', 'cheese']), RelationSample(subject='pastry', object=['flour', 'egg', 'butter', 'filling']), RelationSample(subject='penny', object=['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin']), RelationSample(subject='pill', object=['medicine', 'drug']), RelationSample(subject='plastic', object=['polymer', 'oil', 'gas', 'coal']), RelationSample(subject='roof', object=['shingles', 'tiles', 'wood', 'metal']), RelationSample(subject='sea', object=['water']), RelationSample(subject='snow', object=['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='spoon', object=['aluminium', 'wood', 'steel']), RelationSample(subject='steel', object=['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron']), RelationSample(subject='table', object=['wood', 'metal', 'plastic']), RelationSample(subject='wall', object=['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud']), RelationSample(subject='water', object=['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='wig', object=['hair']), RelationSample(subject='wine', object=['grapes', 'grape']), RelationSample(subject='wire', object=['metal']), RelationSample(subject='yogurt', object=['milk'])], _domain=None, _range=None)
2024-06-11 13:21:20 root INFO     starting next token prediction
2024-06-11 13:21:22 root INFO     total LM prediction time: 2.120399236679077 seconds with recall [0.78, 0.9, 0.92, 0.94, 0.96]
2024-06-11 13:21:22 root INFO     starting operator prediction
2024-06-11 13:21:22 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is made up of)
2024-06-11 13:21:22 root INFO     [relation call] using A {} is made up of
2024-06-11 13:21:26 root INFO     total operator prediction time: 3.338836669921875 seconds
2024-06-11 13:21:28 root INFO     [meronyms - member] Loading GPT-J and tokenizer
2024-06-11 13:21:42 root INFO     Model loaded
2024-06-11 13:21:44 root INFO     Model put on cuda
2024-06-11 13:21:44 root INFO     Tokenizer loaded
2024-06-11 13:21:44 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - member', prompt_templates=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], prompt_templates_zs=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], samples=[RelationSample(subject='acrobat', object=['troupe']), RelationSample(subject='antelope', object=['herd']), RelationSample(subject='bee', object=['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand']), RelationSample(subject='bird', object=['flock']), RelationSample(subject='book', object=['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting']), RelationSample(subject='calf', object=['cattle', 'herd']), RelationSample(subject='car', object=['train', 'procession']), RelationSample(subject='cat', object=['clowder', 'glaring', 'clutter', 'pounce']), RelationSample(subject='cattle', object=['herd']), RelationSample(subject='christian', object=['congregation', 'church', 'parish']), RelationSample(subject='citizen', object=['citizenry', 'country', 'state']), RelationSample(subject='college', object=['university']), RelationSample(subject='county', object=['state', 'country']), RelationSample(subject='cow', object=['herd']), RelationSample(subject='crow', object=['murder']), RelationSample(subject='division', object=['company', 'business', 'platoon', 'battle_group']), RelationSample(subject='elephant', object=['herd']), RelationSample(subject='employee', object=['staff', 'company']), RelationSample(subject='fish', object=['school']), RelationSample(subject='flower', object=['bouquet', 'bunch']), RelationSample(subject='galaxy', object=['universe']), RelationSample(subject='goose', object=['gaggle']), RelationSample(subject='juror', object=['jury']), RelationSample(subject='kitten', object=['litter']), RelationSample(subject='letter', object=['alphabet']), RelationSample(subject='lion', object=['pride']), RelationSample(subject='listener', object=['audience']), RelationSample(subject='member', object=['club', 'team', 'group', 'band', 'community']), RelationSample(subject='musician', object=['orchestra', 'band']), RelationSample(subject='nomad', object=['horde']), RelationSample(subject='page', object=['book', 'notebook', 'website', 'web-site']), RelationSample(subject='parishioner', object=['parish', 'church']), RelationSample(subject='person', object=['society', 'company', 'party', 'world']), RelationSample(subject='photo', object=['album', 'collection', 'library']), RelationSample(subject='player', object=['team', 'group', 'orchestra']), RelationSample(subject='policeman', object=['police']), RelationSample(subject='secretary', object=['staff']), RelationSample(subject='senator', object=['senate', 'house']), RelationSample(subject='sheep', object=['flock']), RelationSample(subject='shrub', object=['shrubbery']), RelationSample(subject='singer', object=['choir', 'band', 'duo', 'trio', 'quartet']), RelationSample(subject='soldier', object=['army', 'unit', 'division', 'troop']), RelationSample(subject='song', object=['album', 'collection', 'antology', 'library']), RelationSample(subject='spouse', object=['couple', 'relationship', 'family']), RelationSample(subject='star', object=['constellation', 'galaxy']), RelationSample(subject='state', object=['country', 'province']), RelationSample(subject='student', object=['class', 'school']), RelationSample(subject='tree', object=['forest', 'wood', 'grove']), RelationSample(subject='wolf', object=['pack']), RelationSample(subject='word', object=['paragraph', 'sentence', 'text'])], _domain=None, _range=None)
2024-06-11 13:21:44 root INFO     starting next token prediction
2024-06-11 13:21:46 root INFO     total LM prediction time: 2.1086602210998535 seconds with recall [0.64, 0.78, 0.84, 0.84, 0.84]
2024-06-11 13:21:46 root INFO     starting operator prediction
2024-06-11 13:21:46 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is a member of a)
2024-06-11 13:21:46 root INFO     [relation call] using A {} is a member of a
2024-06-11 13:21:50 root INFO     total operator prediction time: 3.375131130218506 seconds
2024-06-11 13:21:52 root INFO     [UK_city - county] Loading GPT-J and tokenizer
2024-06-11 13:22:06 root INFO     Model loaded
2024-06-11 13:22:08 root INFO     Model put on cuda
2024-06-11 13:22:08 root INFO     Tokenizer loaded
2024-06-11 13:22:08 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='UK_city - county', prompt_templates=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], prompt_templates_zs=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], samples=[RelationSample(subject='aberdeen', object=['aberdeenshire']), RelationSample(subject='bath', object=['somerset']), RelationSample(subject='belfast', object=['antrim']), RelationSample(subject='birmingham', object=['midlands']), RelationSample(subject='bradford', object=['yorkshire']), RelationSample(subject='brighton', object=['sussex']), RelationSample(subject='cambridge', object=['cambridgeshire']), RelationSample(subject='canterbury', object=['kent']), RelationSample(subject='cardiff', object=['glamorgan']), RelationSample(subject='carlisle', object=['cumbria']), RelationSample(subject='chester', object=['cheshire']), RelationSample(subject='chichester', object=['sussex']), RelationSample(subject='coventry', object=['midlands']), RelationSample(subject='crawley', object=['sussex']), RelationSample(subject='derby', object=['derbyshire']), RelationSample(subject='dundee', object=['lowlands']), RelationSample(subject='edinburgh', object=['lowlands']), RelationSample(subject='ely', object=['cambridgeshire']), RelationSample(subject='exeter', object=['devon']), RelationSample(subject='glasgow', object=['lowlands']), RelationSample(subject='gloucester', object=['gloucestershire']), RelationSample(subject='hereford', object=['herefordshire']), RelationSample(subject='hull', object=['yorkshire']), RelationSample(subject='inverness', object=['highlands']), RelationSample(subject='lancaster', object=['lancashire']), RelationSample(subject='leeds', object=['yorkshire']), RelationSample(subject='leicester', object=['midlands']), RelationSample(subject='lincoln', object=['lincolnshire']), RelationSample(subject='liverpool', object=['lancashire']), RelationSample(subject='newcastle', object=['northumberland']), RelationSample(subject='newport', object=['gwent']), RelationSample(subject='norwich', object=['norfolk']), RelationSample(subject='nottingham', object=['nottinghamshire']), RelationSample(subject='oxford', object=['oxfordshire']), RelationSample(subject='plymouth', object=['devon']), RelationSample(subject='portsmouth', object=['hampshire']), RelationSample(subject='preston', object=['lancashire']), RelationSample(subject='reading', object=['berkshire']), RelationSample(subject='salford', object=['manchester']), RelationSample(subject='salisbury', object=['wiltshire']), RelationSample(subject='sheffield', object=['yorkshire']), RelationSample(subject='southampton', object=['hampshire']), RelationSample(subject='stirling', object=['stirlingshire']), RelationSample(subject='swansea', object=['glamorgan']), RelationSample(subject='wakefield', object=['yorkshire']), RelationSample(subject='wells', object=['somerset']), RelationSample(subject='winchester', object=['hampshire']), RelationSample(subject='wolverhampton', object=['midlands']), RelationSample(subject='worcester', object=['worcestershire']), RelationSample(subject='york', object=['yorkshire'])], _domain=None, _range=None)
2024-06-11 13:22:08 root INFO     starting next token prediction
2024-06-11 13:22:12 root INFO     total LM prediction time: 3.3606204986572266 seconds with recall [0.4, 0.5, 0.62, 0.62, 0.62]
2024-06-11 13:22:12 root INFO     starting operator prediction
2024-06-11 13:22:12 lre.operators WARNING  relation has > 1 prompt_templates, will use first (In the United Kingdom, the city of {} is in the county of)
2024-06-11 13:22:12 root INFO     [relation call] using In the United Kingdom, the city of {} is in the county of
2024-06-11 13:22:16 root INFO     total operator prediction time: 4.150019884109497 seconds
2024-06-11 13:22:18 root INFO     [animal - sound] Loading GPT-J and tokenizer
2024-06-11 13:22:32 root INFO     Model loaded
2024-06-11 13:22:34 root INFO     Model put on cuda
2024-06-11 13:22:34 root INFO     Tokenizer loaded
2024-06-11 13:22:34 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - sound', prompt_templates=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], prompt_templates_zs=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], samples=[RelationSample(subject='alpaca', object=['bray']), RelationSample(subject='bear', object=['growl']), RelationSample(subject='bee', object=['buzz', 'hum']), RelationSample(subject='beetle', object=['drone']), RelationSample(subject='cat', object=['meow', 'meu', 'purr', 'caterwaul']), RelationSample(subject='cattle', object=['moo', 'bellow', 'low']), RelationSample(subject='chicken', object=['cluck', 'crow', 'cock-a-doodle-doo']), RelationSample(subject='chimpanzee', object=['scream']), RelationSample(subject='cicada', object=['buzz']), RelationSample(subject='coyote', object=['howl']), RelationSample(subject='cricket', object=['chirp']), RelationSample(subject='crow', object=['caw']), RelationSample(subject='deer', object=['bellow']), RelationSample(subject='dog', object=['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof']), RelationSample(subject='donkey', object=['bray', 'hee-haw']), RelationSample(subject='duck', object=['quack']), RelationSample(subject='elephant', object=['trumpet']), RelationSample(subject='elk', object=['bellow']), RelationSample(subject='ferret', object=['dook']), RelationSample(subject='fly', object=['buzz']), RelationSample(subject='fox', object=['howl', 'yelp']), RelationSample(subject='frog', object=['ribbit', 'croak']), RelationSample(subject='goat', object=['bleat']), RelationSample(subject='gorilla', object=['grunt', 'scream']), RelationSample(subject='hornet', object=['buzz']), RelationSample(subject='horse', object=['neigh', 'snort', 'whinny']), RelationSample(subject='hound', object=['bark', 'howl', 'bay']), RelationSample(subject='hyena', object=['laugh']), RelationSample(subject='leopard', object=['growl']), RelationSample(subject='lion', object=['roar', 'growl']), RelationSample(subject='magpie', object=['chatter']), RelationSample(subject='mallard', object=['quack']), RelationSample(subject='monkey', object=['chatter', 'gibber', 'howl', 'scream']), RelationSample(subject='moose', object=['bellow']), RelationSample(subject='mouse', object=['squeak']), RelationSample(subject='mule', object=['bray', 'hee-haw']), RelationSample(subject='pig', object=['oink', 'grunt', 'gruff', 'squeal']), RelationSample(subject='pigeon', object=['coo']), RelationSample(subject='rat', object=['squeak']), RelationSample(subject='raven', object=['caw']), RelationSample(subject='seal', object=['bark']), RelationSample(subject='sheep', object=['baa', 'bleat']), RelationSample(subject='snake', object=['hiss']), RelationSample(subject='songbird', object=['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter']), RelationSample(subject='tiger', object=['growl', 'roar']), RelationSample(subject='toad', object=['ribbit', 'croak']), RelationSample(subject='turkey', object=['gobble']), RelationSample(subject='wasp', object=['buzz']), RelationSample(subject='whale', object=['sing']), RelationSample(subject='wolf', object=['howl'])], _domain=None, _range=None)
2024-06-11 13:22:34 root INFO     starting next token prediction
2024-06-11 13:22:37 root INFO     total LM prediction time: 2.1110663414001465 seconds with recall [0.7, 0.78, 0.88, 0.9, 0.94]
2024-06-11 13:22:37 root INFO     starting operator prediction
2024-06-11 13:22:37 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The sound that a {} makes is called a)
2024-06-11 13:22:37 root INFO     [relation call] using The sound that a {} makes is called a
2024-06-11 13:22:40 root INFO     total operator prediction time: 3.534818649291992 seconds
2024-06-11 13:22:43 root INFO     [animal - shelter] Loading GPT-J and tokenizer
2024-06-11 13:22:56 root INFO     Model loaded
2024-06-11 13:22:58 root INFO     Model put on cuda
2024-06-11 13:22:59 root INFO     Tokenizer loaded
2024-06-11 13:22:59 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - shelter', prompt_templates=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], prompt_templates_zs=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], samples=[RelationSample(subject='ant', object=['anthill', 'insectarium', 'terrarium', 'formicarium']), RelationSample(subject='ape', object=['grove', 'tree', 'cage']), RelationSample(subject='baboon', object=['grove', 'tree', 'cage']), RelationSample(subject='bat', object=['cave', 'cage']), RelationSample(subject='bear', object=['den', 'cage']), RelationSample(subject='beaver', object=['dam', 'river', 'pen']), RelationSample(subject='bee', object=['hive']), RelationSample(subject='cattle', object=['barn', 'coral']), RelationSample(subject='chimpanzee', object=['grove', 'tree', 'cage']), RelationSample(subject='chinchilla', object=['nest', 'cage']), RelationSample(subject='cockroach', object=['nest']), RelationSample(subject='cricket', object=['nest']), RelationSample(subject='crocodile', object=['river', 'lake', 'pool']), RelationSample(subject='crow', object=['nest', 'cage']), RelationSample(subject='dog', object=['doghouse', 'home', 'den', 'kennel']), RelationSample(subject='dolphin', object=['sea', 'sanctuary']), RelationSample(subject='duck', object=['pond', 'nest']), RelationSample(subject='fish', object=['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary']), RelationSample(subject='fly', object=['nest']), RelationSample(subject='fox', object=['den', 'cage']), RelationSample(subject='goldfish', object=['pond', 'bowl', 'aquarium', 'sanctuary']), RelationSample(subject='gorilla', object=['grove', 'tree', 'cage']), RelationSample(subject='hamster', object=['nest', 'cage']), RelationSample(subject='hedgehog', object=['nest', 'hedge', 'pen']), RelationSample(subject='herring', object=['sea', 'sanctuary']), RelationSample(subject='hippopotamus', object=['river', 'lake', 'pen']), RelationSample(subject='hornet', object=['nest']), RelationSample(subject='horse', object=['stable', 'range', 'paddock', 'corral']), RelationSample(subject='insect', object=['nest', 'cage', 'box']), RelationSample(subject='lion', object=['den', 'cage', 'savannah']), RelationSample(subject='locust', object=['nest']), RelationSample(subject='mallard', object=['nest', 'pond']), RelationSample(subject='mole', object=['hole', 'nest']), RelationSample(subject='monkey', object=['tree', 'grove', 'cage']), RelationSample(subject='mouse', object=['nest', 'cage']), RelationSample(subject='pig', object=['sty', 'pigsty', 'pen', 'pigpen']), RelationSample(subject='rabbit', object=['burrow', 'warren', 'hutch', 'cage']), RelationSample(subject='rat', object=['nest', 'cage']), RelationSample(subject='raven', object=['nest', 'cage']), RelationSample(subject='scorpion', object=['nest', 'aquarium', 'terrarium']), RelationSample(subject='seal', object=['den', 'aquarium', 'sea']), RelationSample(subject='snake', object=['nest', 'pit', 'acquarium']), RelationSample(subject='spider', object=['web', 'acquarium', 'terrarium']), RelationSample(subject='termite', object=['hill', 'terrarium']), RelationSample(subject='tiger', object=['den', 'cage']), RelationSample(subject='trout', object=['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank']), RelationSample(subject='wasp', object=['nest']), RelationSample(subject='whale', object=['sea', 'sanctuary']), RelationSample(subject='wolf', object=['den', 'cage']), RelationSample(subject='woodchuck', object=['hole'])], _domain=None, _range=None)
2024-06-11 13:22:59 root INFO     starting next token prediction
2024-06-11 13:23:01 root INFO     total LM prediction time: 2.133866786956787 seconds with recall [0.62, 0.7, 0.86, 0.94, 0.96]
2024-06-11 13:23:01 root INFO     starting operator prediction
2024-06-11 13:23:01 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The place {} lives in is called)
2024-06-11 13:23:01 root INFO     [relation call] using The place {} lives in is called
2024-06-11 13:23:04 root INFO     total operator prediction time: 3.393963575363159 seconds
2024-06-11 13:23:07 root INFO     [name - nationality] Loading GPT-J and tokenizer
2024-06-11 13:23:20 root INFO     Model loaded
2024-06-11 13:23:22 root INFO     Model put on cuda
2024-06-11 13:23:23 root INFO     Tokenizer loaded
2024-06-11 13:23:23 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='name - nationality', prompt_templates=['{} was', '{} identified nationally as', '{} identifies as'], prompt_templates_zs=['{} was', '{} identified nationally as', '{} identifies as'], samples=[RelationSample(subject='aristotle', object=['greek']), RelationSample(subject='balzac', object=['french']), RelationSample(subject='beethoven', object=['german']), RelationSample(subject='caesar', object=['roman']), RelationSample(subject='confucius', object=['chinese']), RelationSample(subject='copernicus', object=['polish']), RelationSample(subject='darwin', object=['english', 'british']), RelationSample(subject='depp', object=['american']), RelationSample(subject='descartes', object=['french']), RelationSample(subject='dickens', object=['english', 'british']), RelationSample(subject='dostoyevsky', object=['russian']), RelationSample(subject='edison', object=['american']), RelationSample(subject='einstein', object=['jewish', 'german', 'american']), RelationSample(subject='euclid', object=['greek']), RelationSample(subject='fermi', object=['italian']), RelationSample(subject='galilei', object=['italian']), RelationSample(subject='gorbachev', object=['soviet', 'russian']), RelationSample(subject='hawking', object=['english', 'british']), RelationSample(subject='hegel', object=['german']), RelationSample(subject='hitler', object=['german', 'austrian']), RelationSample(subject='homer', object=['greek']), RelationSample(subject='hume', object=['scottish', 'british']), RelationSample(subject='jolie', object=['american']), RelationSample(subject='kant', object=['german']), RelationSample(subject='kepler', object=['german']), RelationSample(subject='lavoisier', object=['french']), RelationSample(subject='leibniz', object=['german']), RelationSample(subject='lenin', object=['soviet', 'russian']), RelationSample(subject='lennon', object=['english', 'british']), RelationSample(subject='lincoln', object=['american']), RelationSample(subject='locke', object=['english', 'british']), RelationSample(subject='machiavelli', object=['italian']), RelationSample(subject='marx', object=['german']), RelationSample(subject='maxwell', object=['scottish', 'british']), RelationSample(subject='mencius', object=['chinese']), RelationSample(subject='michelangelo', object=['italian']), RelationSample(subject='mozart', object=['german', 'austrian']), RelationSample(subject='napoleon', object=['french', 'corsican', 'italian']), RelationSample(subject='newton', object=['english', 'british']), RelationSample(subject='pascal', object=['french']), RelationSample(subject='plato', object=['greek']), RelationSample(subject='raphael', object=['italian']), RelationSample(subject='rousseau', object=['french']), RelationSample(subject='spinoza', object=['dutch']), RelationSample(subject='stalin', object=['soviet', 'georgian']), RelationSample(subject='strauss', object=['austrian']), RelationSample(subject='tchaikovsky', object=['russian']), RelationSample(subject='tolstoi', object=['russian']), RelationSample(subject='truman', object=['american']), RelationSample(subject='wagner', object=['german'])], _domain=None, _range=None)
2024-06-11 13:23:23 root INFO     starting next token prediction
2024-06-11 13:23:25 root INFO     total LM prediction time: 2.104922294616699 seconds with recall [0.86, 0.96, 0.96, 0.98, 0.98]
2024-06-11 13:23:25 root INFO     starting operator prediction
2024-06-11 13:23:25 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was)
2024-06-11 13:23:25 root INFO     [relation call] using {} was
2024-06-11 13:23:28 root INFO     total operator prediction time: 3.21914005279541 seconds
2024-06-11 13:23:30 root INFO     [male - female] Loading GPT-J and tokenizer
2024-06-11 13:23:44 root INFO     Model loaded
2024-06-11 13:23:46 root INFO     Model put on cuda
2024-06-11 13:23:46 root INFO     Tokenizer loaded
2024-06-11 13:23:46 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='male - female', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='actor', object=['actress']), RelationSample(subject='batman', object=['batwoman']), RelationSample(subject='boar', object=['sow']), RelationSample(subject='boy', object=['girl']), RelationSample(subject='brother', object=['sister']), RelationSample(subject='buck', object=['doe']), RelationSample(subject='bull', object=['cow']), RelationSample(subject='businessman', object=['businesswoman']), RelationSample(subject='chairman', object=['chairwoman']), RelationSample(subject='dad', object=['mom', 'mum']), RelationSample(subject='daddy', object=['mommy', 'mother', 'mom']), RelationSample(subject='duke', object=['duchess']), RelationSample(subject='emperor', object=['empress']), RelationSample(subject='father', object=['mother']), RelationSample(subject='fisherman', object=['fisherwoman']), RelationSample(subject='fox', object=['vixen']), RelationSample(subject='gentleman', object=['lady', 'gentlewoman', 'madam']), RelationSample(subject='god', object=['goddess']), RelationSample(subject='grandfather', object=['grandmother']), RelationSample(subject='grandpa', object=['grandma']), RelationSample(subject='grandson', object=['granddaughter']), RelationSample(subject='groom', object=['bride']), RelationSample(subject='headmaster', object=['headmistress']), RelationSample(subject='heir', object=['heiress']), RelationSample(subject='hero', object=['heroine']), RelationSample(subject='hound', object=['bitch']), RelationSample(subject='husband', object=['wife']), RelationSample(subject='king', object=['queen']), RelationSample(subject='lion', object=['lioness']), RelationSample(subject='man', object=['woman']), RelationSample(subject='manager', object=['manageress']), RelationSample(subject='mister', object=['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam']), RelationSample(subject='murderer', object=['murderess']), RelationSample(subject='nephew', object=['niece']), RelationSample(subject='poet', object=['poetess']), RelationSample(subject='policeman', object=['policewoman']), RelationSample(subject='prince', object=['princess']), RelationSample(subject='ram', object=['ewe']), RelationSample(subject='rooster', object=['hen']), RelationSample(subject='sculptor', object=['sculptress']), RelationSample(subject='sir', object=['madam']), RelationSample(subject='son', object=['daughter']), RelationSample(subject='stallion', object=['mare']), RelationSample(subject='stepfather', object=['stepmother']), RelationSample(subject='superman', object=['superwoman']), RelationSample(subject='tiger', object=['tigress']), RelationSample(subject='uncle', object=['aunt']), RelationSample(subject='valet', object=['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid']), RelationSample(subject='waiter', object=['waitress']), RelationSample(subject='webmaster', object=['webmistress'])], _domain=None, _range=None)
2024-06-11 13:23:46 root INFO     starting next token prediction
2024-06-11 13:23:48 root INFO     total LM prediction time: 2.09378981590271 seconds with recall [0.7, 0.86, 0.9, 0.92, 0.94]
2024-06-11 13:23:48 root INFO     starting operator prediction
2024-06-11 13:23:48 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-11 13:23:48 root INFO     [relation call] using A female {} is known as a
2024-06-11 13:23:52 root INFO     total operator prediction time: 3.3910322189331055 seconds
2024-06-11 13:23:54 root INFO     [name - occupation] Loading GPT-J and tokenizer
2024-06-11 13:24:08 root INFO     Model loaded
2024-06-11 13:24:10 root INFO     Model put on cuda
2024-06-11 13:24:10 root INFO     Tokenizer loaded
2024-06-11 13:24:10 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='name - occupation', prompt_templates=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], prompt_templates_zs=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], samples=[RelationSample(subject='andersen', object=['writer', 'poet', 'author']), RelationSample(subject='aristotle', object=['philosopher']), RelationSample(subject='balzac', object=['novelist', 'writer']), RelationSample(subject='beethoven', object=['composer']), RelationSample(subject='caesar', object=['emperor', 'commander', 'leader']), RelationSample(subject='columbus', object=['explorer']), RelationSample(subject='confucius', object=['philosopher']), RelationSample(subject='dante', object=['poet']), RelationSample(subject='darwin', object=['naturalist', 'biologist', 'geologist']), RelationSample(subject='depp', object=['actor', 'producer', 'musician']), RelationSample(subject='descartes', object=['mathematician', 'philosopher']), RelationSample(subject='dickens', object=['novelist', 'writer', 'critic', 'author']), RelationSample(subject='edison', object=['inventor', 'businessman']), RelationSample(subject='einstein', object=['physicist', 'scientist']), RelationSample(subject='euler', object=['mathematician', 'physicist', 'astronomer', 'logician', 'engineer']), RelationSample(subject='goethe', object=['poet', 'playwright', 'novelist', 'writer', 'author']), RelationSample(subject='hawking', object=['physicist', 'scientist']), RelationSample(subject='haydn', object=['composer']), RelationSample(subject='hegel', object=['philosopher']), RelationSample(subject='hitler', object=['dictator', 'politician', 'nazi']), RelationSample(subject='hume', object=['philosopher', 'politician']), RelationSample(subject='jolie', object=['actress', 'filmmaker', 'director', 'humanitarian', 'activist']), RelationSample(subject='kant', object=['philosopher']), RelationSample(subject='kepler', object=['mathematician', 'physicist', 'astronomer', 'astrologer']), RelationSample(subject='lincoln', object=['president']), RelationSample(subject='locke', object=['philosopher']), RelationSample(subject='marx', object=['philosopher', 'communist']), RelationSample(subject='maxwell', object=['physicist', 'scientist']), RelationSample(subject='mencius', object=['philosopher']), RelationSample(subject='michelangelo', object=['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer']), RelationSample(subject='moses', object=['prophet', 'leader']), RelationSample(subject='mozart', object=['composer']), RelationSample(subject='napoleon', object=['emperor', 'leader', 'politician', 'commander']), RelationSample(subject='newton', object=['scientist', 'mathematician', 'psysicist', 'philosopher']), RelationSample(subject='pacino', object=['actor', 'director', 'filmmaker']), RelationSample(subject='pascal', object=['mathematician', 'philosopher']), RelationSample(subject='picasso', object=['painter', 'artist', 'sculptor', 'designer']), RelationSample(subject='plato', object=['philosopher']), RelationSample(subject='raphael', object=['painter', 'artist', 'architect']), RelationSample(subject='rembrandt', object=['painter', 'etcher', 'artist']), RelationSample(subject='rousseau', object=['writer', 'author', 'philosopher']), RelationSample(subject='schwarzenegger', object=['actor', 'politician', 'governor']), RelationSample(subject='shakespeare', object=['playwright', 'poet']), RelationSample(subject='spinoza', object=['philosopher']), RelationSample(subject='stalin', object=['dictator', 'politician', 'leader', 'statesman']), RelationSample(subject='strauss', object=['composer']), RelationSample(subject='tolstoi', object=['novelist', 'writer', 'philosopher']), RelationSample(subject='truman', object=['president']), RelationSample(subject='wagner', object=['composer']), RelationSample(subject='wittgenstein', object=['philosopher'])], _domain=None, _range=None)
2024-06-11 13:24:10 root INFO     starting next token prediction
2024-06-11 13:24:13 root INFO     total LM prediction time: 2.113281726837158 seconds with recall [0.78, 0.9, 0.98, 0.98, 0.98]
2024-06-11 13:24:13 root INFO     starting operator prediction
2024-06-11 13:24:13 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was known for their work as a )
2024-06-11 13:24:13 root INFO     [relation call] using {} was known for their work as a 
2024-06-11 13:24:16 root INFO     total operator prediction time: 3.517138719558716 seconds
2024-06-11 13:24:19 root INFO     [country - language] Loading GPT-J and tokenizer
2024-06-11 13:24:32 root INFO     Model loaded
2024-06-11 13:24:34 root INFO     Model put on cuda
2024-06-11 13:24:35 root INFO     Tokenizer loaded
2024-06-11 13:24:35 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='country - language', prompt_templates=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], prompt_templates_zs=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], samples=[RelationSample(subject='andorra', object=['catalan']), RelationSample(subject='argentina', object=['spanish']), RelationSample(subject='australia', object=['english']), RelationSample(subject='austria', object=['german']), RelationSample(subject='bahamas', object=['english']), RelationSample(subject='bangladesh', object=['bengali', 'bangla']), RelationSample(subject='barbados', object=['english']), RelationSample(subject='belize', object=['english']), RelationSample(subject='bolivia', object=['spanish']), RelationSample(subject='brazil', object=['portuguese']), RelationSample(subject='cambodia', object=['khmer']), RelationSample(subject='canada', object=['english', 'french']), RelationSample(subject='chile', object=['spanish']), RelationSample(subject='colombia', object=['spanish']), RelationSample(subject='cuba', object=['spanish']), RelationSample(subject='cyprus', object=['greek', 'turkish']), RelationSample(subject='denmark', object=['danish', 'faroese', 'greenlandic', 'german']), RelationSample(subject='ecuador', object=['spanish', 'quechua']), RelationSample(subject='egypt', object=['arabic']), RelationSample(subject='ethiopia', object=['amharic']), RelationSample(subject='fiji', object=['english']), RelationSample(subject='guadeloupe', object=['french']), RelationSample(subject='guam', object=['english', 'chamorro']), RelationSample(subject='guatemala', object=['spanish']), RelationSample(subject='guyana', object=['english']), RelationSample(subject='haiti', object=['creole', 'french']), RelationSample(subject='iran', object=['persian']), RelationSample(subject='iraq', object=['arabic', 'kurdish']), RelationSample(subject='ireland', object=['english', 'irish', 'gaelic']), RelationSample(subject='israel', object=['hebrew', 'arabic']), RelationSample(subject='jamaica', object=['english', 'creole']), RelationSample(subject='jordan', object=['arabic']), RelationSample(subject='kazakhstan', object=['kazak', 'qazaq', 'russian']), RelationSample(subject='kosovo', object=['albanian', 'serbian']), RelationSample(subject='kuwait', object=['arabic']), RelationSample(subject='mexico', object=['spanish', 'nahuatl']), RelationSample(subject='moldova', object=['moldovan', 'romanian']), RelationSample(subject='morocco', object=['berber', 'arabic']), RelationSample(subject='mozambique', object=['portuguese']), RelationSample(subject='netherlands', object=['dutch', 'frisian']), RelationSample(subject='nicaragua', object=['spanish']), RelationSample(subject='norway', object=['norwegian', 'bokmål', 'bokmal', 'nynorsk']), RelationSample(subject='palestine', object=['arabic']), RelationSample(subject='peru', object=['spanish']), RelationSample(subject='philippines', object=['tagalog', 'filipino']), RelationSample(subject='switzerland', object=['german', 'french', 'italian']), RelationSample(subject='syria', object=['arabic']), RelationSample(subject='taiwan', object=['chinese']), RelationSample(subject='usa', object=['english']), RelationSample(subject='venezuela', object=['spanish'])], _domain=None, _range=None)
2024-06-11 13:24:35 root INFO     starting next token prediction
2024-06-11 13:24:38 root INFO     total LM prediction time: 2.967292547225952 seconds with recall [0.94, 0.98, 1.0, 1.0, 1.0]
2024-06-11 13:24:38 root INFO     starting operator prediction
2024-06-11 13:24:38 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The country of {} primarily speaks the language of)
2024-06-11 13:24:38 root INFO     [relation call] using The country of {} primarily speaks the language of
2024-06-11 13:24:41 root INFO     total operator prediction time: 3.60673451423645 seconds
2024-06-11 13:24:44 root INFO     [things - color] Loading GPT-J and tokenizer
2024-06-11 13:24:58 root INFO     Model loaded
2024-06-11 13:25:00 root INFO     Model put on cuda
2024-06-11 13:25:00 root INFO     Tokenizer loaded
2024-06-11 13:25:00 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='things - color', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='ant', object=['black', 'brown', 'red']), RelationSample(subject='apple', object=['red', 'orange', 'yellow', 'golden']), RelationSample(subject='blackboard', object=['black', 'green']), RelationSample(subject='blood', object=['red']), RelationSample(subject='blueberry', object=['blue', 'black']), RelationSample(subject='broccoli', object=['green']), RelationSample(subject='bruise', object=['blue', 'purple']), RelationSample(subject='cabbage', object=['green']), RelationSample(subject='carrot', object=['orange', 'red', 'yellow']), RelationSample(subject='cauliflower', object=['white', 'green', 'yellow', 'yellowish']), RelationSample(subject='celery', object=['green', 'white', 'brown']), RelationSample(subject='cherry', object=['red', 'yellow', 'black']), RelationSample(subject='chocolate', object=['white', 'brown', 'black']), RelationSample(subject='cloud', object=['white', 'gray', 'grey']), RelationSample(subject='coal', object=['black']), RelationSample(subject='coffee', object=['black', 'brown']), RelationSample(subject='cranberry', object=['red', 'purple', 'pink']), RelationSample(subject='cream', object=['white']), RelationSample(subject='crow', object=['black']), RelationSample(subject='cucumber', object=['green']), RelationSample(subject='emerald', object=['green']), RelationSample(subject='fridge', object=['white', 'silver', 'black']), RelationSample(subject='frog', object=['green', 'brown', 'grey', 'gray']), RelationSample(subject='grapes', object=['black', 'red', 'green', 'purple']), RelationSample(subject='grass', object=['green']), RelationSample(subject='leaves', object=['green', 'red', 'yellow']), RelationSample(subject='milk', object=['white']), RelationSample(subject='paper', object=['white', 'color']), RelationSample(subject='parsley', object=['green']), RelationSample(subject='peony', object=['red', 'white', 'pink', 'purple']), RelationSample(subject='pepper', object=['black', 'red', 'green', 'yellow', 'orange']), RelationSample(subject='potato', object=['brown']), RelationSample(subject='radish', object=['red', 'pink', 'white', 'green', 'black']), RelationSample(subject='raven', object=['black']), RelationSample(subject='rose', object=['red', 'yellow', 'pink', 'white', 'blue']), RelationSample(subject='ruby', object=['red']), RelationSample(subject='salt', object=['white']), RelationSample(subject='sapphire', object=['blue']), RelationSample(subject='sea', object=['blue', 'green', 'gray', 'grey']), RelationSample(subject='sky', object=['blue', 'gray', 'grey']), RelationSample(subject='snow', object=['white']), RelationSample(subject='soil', object=['black', 'brown', 'dark']), RelationSample(subject='spinach', object=['green']), RelationSample(subject='sugar', object=['white', 'brown']), RelationSample(subject='sun', object=['yellow', 'gold']), RelationSample(subject='swan', object=['white', 'black', 'gray', 'grey']), RelationSample(subject='tea', object=['black', 'green', 'white', 'red', 'brown', 'yellow']), RelationSample(subject='tomato', object=['red']), RelationSample(subject='toothpaste', object=['white']), RelationSample(subject='yoghurt', object=['white', 'pink'])], _domain=None, _range=None)
2024-06-11 13:25:00 root INFO     starting next token prediction
2024-06-11 13:25:02 root INFO     total LM prediction time: 2.1239402294158936 seconds with recall [0.8, 0.94, 0.96, 0.98, 0.98]
2024-06-11 13:25:02 root INFO     starting operator prediction
2024-06-11 13:25:02 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-11 13:25:02 root INFO     [relation call] using A female {} is known as a
2024-06-11 13:25:05 root INFO     total operator prediction time: 3.3835930824279785 seconds
2024-06-11 13:25:08 root INFO     [country - capital] Loading GPT-J and tokenizer
2024-06-11 13:25:22 root INFO     Model loaded
2024-06-11 13:25:24 root INFO     Model put on cuda
2024-06-11 13:25:24 root INFO     Tokenizer loaded
2024-06-11 13:25:24 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='country - capital', prompt_templates=['The country with {} as its capital is known as', 'The country with the capital city of {} is named', 'A country distinguished by {} as its capital city is known as'], prompt_templates_zs=['The country with {} as its capital is known as', 'The country with the capital city of {} is named', 'A country distinguished by {} as its capital city is known as'], samples=[RelationSample(subject='abuja', object=['nigeria']), RelationSample(subject='amman', object=['jordan']), RelationSample(subject='ankara', object=['turkey']), RelationSample(subject='athens', object=['greece']), RelationSample(subject='baghdad', object=['iraq']), RelationSample(subject='bangkok', object=['thailand']), RelationSample(subject='beijing', object=['china']), RelationSample(subject='beirut', object=['lebanon']), RelationSample(subject='belgrade', object=['serbia']), RelationSample(subject='berlin', object=['germany']), RelationSample(subject='bern', object=['switzerland']), RelationSample(subject='brussels', object=['belgium']), RelationSample(subject='bucharest', object=['romania']), RelationSample(subject='budapest', object=['hungary']), RelationSample(subject='cairo', object=['egypt']), RelationSample(subject='canberra', object=['australia']), RelationSample(subject='conakry', object=['guinea']), RelationSample(subject='copenhagen', object=['denmark']), RelationSample(subject='damascus', object=['syria']), RelationSample(subject='dhaka', object=['bangladesh']), RelationSample(subject='dublin', object=['ireland']), RelationSample(subject='hanoi', object=['vietnam']), RelationSample(subject='havana', object=['cuba']), RelationSample(subject='helsinki', object=['finland']), RelationSample(subject='islamabad', object=['pakistan']), RelationSample(subject='jakarta', object=['indonesia']), RelationSample(subject='kabul', object=['afghanistan']), RelationSample(subject='kiev', object=['ukraine']), RelationSample(subject='kingston', object=['jamaica']), RelationSample(subject='lima', object=['peru']), RelationSample(subject='lisbon', object=['portugal']), RelationSample(subject='london', object=['england', 'uk', 'britain']), RelationSample(subject='madrid', object=['spain']), RelationSample(subject='manila', object=['philippines']), RelationSample(subject='moscow', object=['russia']), RelationSample(subject='nairobi', object=['kenya']), RelationSample(subject='oslo', object=['norway']), RelationSample(subject='ottawa', object=['canada']), RelationSample(subject='paris', object=['france']), RelationSample(subject='rome', object=['italy']), RelationSample(subject='santiago', object=['chile']), RelationSample(subject='sofia', object=['bulgaria']), RelationSample(subject='stockholm', object=['sweden']), RelationSample(subject='taipei', object=['taiwan']), RelationSample(subject='tbilisi', object=['georgia']), RelationSample(subject='tehran', object=['iran']), RelationSample(subject='tokyo', object=['japan']), RelationSample(subject='vienna', object=['austria']), RelationSample(subject='warsaw', object=['poland']), RelationSample(subject='zagreb', object=['croatia'])], _domain=None, _range=None)
2024-06-11 13:25:24 root INFO     starting next token prediction
2024-06-11 13:25:27 root INFO     total LM prediction time: 2.9803903102874756 seconds with recall [0.96, 1.0, 1.0, 1.0, 1.0]
2024-06-11 13:25:27 root INFO     starting operator prediction
2024-06-11 13:25:27 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The country with {} as its capital is known as)
2024-06-11 13:25:27 root INFO     [relation call] using The country with {} as its capital is known as
2024-06-11 13:25:31 root INFO     total operator prediction time: 3.8200602531433105 seconds
2024-06-11 13:25:33 root INFO     [animal - youth] Loading GPT-J and tokenizer
2024-06-11 13:25:47 root INFO     Model loaded
2024-06-11 13:25:49 root INFO     Model put on cuda
2024-06-11 13:25:49 root INFO     Tokenizer loaded
2024-06-11 13:25:49 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The young version of {} is', 'The offspring of a {} is referred to as a', 'When a {} is young, it is called a'], prompt_templates_zs=['The young version of {} is', 'The offspring of a {} is referred to as a', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 13:25:49 root INFO     starting next token prediction
2024-06-11 13:25:52 root INFO     total LM prediction time: 2.144869327545166 seconds with recall [0.72, 0.86, 0.88, 0.9, 0.9]
2024-06-11 13:25:52 root INFO     starting operator prediction
2024-06-11 13:25:52 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The young version of {} is)
2024-06-11 13:25:52 root INFO     [relation call] using The young version of {} is
2024-06-11 13:25:55 root INFO     total operator prediction time: 3.368201494216919 seconds
2024-06-11 15:30:57 root INFO     Tokenizer loaded
2024-06-11 15:31:49 root INFO     Tokenizer loaded
2024-06-11 15:31:49 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:31:51 root INFO     starting operator prediction
2024-06-11 15:31:51 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:31:51 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:35:07 root INFO     Tokenizer loaded
2024-06-11 15:35:07 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:35:10 root INFO     starting operator prediction
2024-06-11 15:35:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:35:10 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:36:00 root INFO     Tokenizer loaded
2024-06-11 15:36:00 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:36:03 root INFO     starting operator prediction
2024-06-11 15:36:03 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:36:03 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:36:07 root INFO     total operator prediction time: 3.408111810684204 seconds
2024-06-11 15:37:08 root INFO     Tokenizer loaded
2024-06-11 15:37:08 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:37:10 root INFO     starting operator prediction
2024-06-11 15:37:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:37:10 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:37:14 root INFO     total operator prediction time: 3.399745464324951 seconds
2024-06-11 15:39:08 root INFO     Tokenizer loaded
2024-06-11 15:39:08 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:39:10 root INFO     starting operator prediction
2024-06-11 15:39:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:39:10 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:39:14 root INFO     total operator prediction time: 3.4571878910064697 seconds
2024-06-11 15:41:18 root INFO     Tokenizer loaded
2024-06-11 15:41:18 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:41:21 root INFO     starting operator prediction
2024-06-11 15:41:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:41:21 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:41:24 root INFO     total operator prediction time: 3.3886570930480957 seconds
2024-06-11 15:46:48 root INFO     Tokenizer loaded
2024-06-11 15:46:48 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:46:50 root INFO     starting operator prediction
2024-06-11 15:46:50 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:46:50 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:46:54 root INFO     total operator prediction time: 3.353041648864746 seconds
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more angry, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more cheap, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more clever, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more coarse, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more costly, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more cute, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more dense, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more dumb, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more fierce, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more handy, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more happy, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more hardy, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more harsh, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more healthy, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more hot, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more huge, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more hungry, it is"
2024-06-11 15:46:54 lre.operators INFO     computing h from prompt "When something is more lazy, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more lengthy, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more lucky, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more mad, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more merry, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more mild, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more moist, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more nasty, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more neat, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more nice, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more noisy, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more proud, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more pure, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more risky, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more rocky, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more rude, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more sad, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more scary, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more sexy, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more sticky, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more strict, it is"
2024-06-11 15:46:55 lre.operators INFO     computing h from prompt "When something is more strong, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more subtle, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more sunny, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more tasty, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more tiny, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more tricky, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more ugly, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more vague, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more vast, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more weak, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more wealthy, it is"
2024-06-11 15:46:56 lre.operators INFO     computing h from prompt "When something is more weird, it is"
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['angrier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['cheaper']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['cleverer']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['coarser']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['costlier']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' '],['cuter']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' a'],['denser']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['dumber']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['fiercer']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['handier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['happier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' a'],['hardier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['harsher']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['healthier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', ' harder', '\n'],['hotter']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' '],['huger']
2024-06-11 15:46:56 root INFO     [' more', ' less', '\n', ' much', ' '],['hungrier']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' '],['lazier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' a'],['lengthier']
2024-06-11 15:46:56 root INFO     [' more', ' less', '\n', ' much', ' '],['luckier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['madder']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' '],['merrier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['milder']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['moister']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['nastier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['neater']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['nicer']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['noisier']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', ' harder', '\n'],['prouder']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['purer']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' a'],['riskier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', ' harder', '\n'],['rockier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['ruder']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', ' harder', '\n'],['sadder']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' '],['scarier']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' harder'],['sexier']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' harder'],['stickier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['stricter']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['stronger']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', ' harder', '\n'],['subtler']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['sunnier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' harder'],['tastier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['tinier']
2024-06-11 15:46:56 root INFO     [' more', ' much', ' less', '\n', ' '],['trickier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['uglier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['vaguer']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' a'],['vaster']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['weaker']
2024-06-11 15:46:56 root INFO     [' more', ' less', '\n', ' ', ' much'],['wealthier']
2024-06-11 15:46:56 root INFO     [' more', ' less', ' much', '\n', ' '],['weirder']
2024-06-11 15:46:56 root INFO     adj - comparative with 50 total): defaultdict(<class 'int'>, {True: 50})
2024-06-11 15:47:12 root INFO     Tokenizer loaded
2024-06-11 15:47:12 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-11 15:47:14 root INFO     starting operator prediction
2024-06-11 15:47:14 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 15:47:14 root INFO     [relation call] using The plural form of {} is
2024-06-11 15:47:17 root INFO     total operator prediction time: 3.1887834072113037 seconds
2024-06-11 15:47:17 lre.operators INFO     computing h from prompt "The plural form of album is"
2024-06-11 15:47:17 lre.operators INFO     computing h from prompt "The plural form of application is"
2024-06-11 15:47:17 lre.operators INFO     computing h from prompt "The plural form of area is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of car is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of college is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of council is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of customer is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of day is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of death is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of department is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of development is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of difference is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of director is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of event is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of example is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of fact is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of friend is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of god is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of government is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of hour is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of idea is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of language is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of law is"
2024-06-11 15:47:18 lre.operators INFO     computing h from prompt "The plural form of member is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of month is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of night is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of office is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of period is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of player is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of population is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of problem is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of product is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of resource is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of river is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of road is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of role is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of science is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of solution is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of song is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of street is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of student is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of system is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of thing is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of town is"
2024-06-11 15:47:19 lre.operators INFO     computing h from prompt "The plural form of user is"
2024-06-11 15:47:20 lre.operators INFO     computing h from prompt "The plural form of version is"
2024-06-11 15:47:20 lre.operators INFO     computing h from prompt "The plural form of village is"
2024-06-11 15:47:20 lre.operators INFO     computing h from prompt "The plural form of website is"
2024-06-11 15:47:20 lre.operators INFO     computing h from prompt "The plural form of week is"
2024-06-11 15:47:20 lre.operators INFO     computing h from prompt "The plural form of year is"
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['albums']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['applications']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['areas']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['cars']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['colleges']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['councils']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['customers']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['days']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['deaths']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['departments']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['developments']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['differences']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['directors']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['events']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['examples']
2024-06-11 15:47:20 root INFO     ['\n', ' the', ' ', ' (', '...'],['facts']
2024-06-11 15:47:20 root INFO     [' the', '\n', ' ', ' (', ' all'],['friends']
2024-06-11 15:47:20 root INFO     ['\n', ' the', ' ', ' (', '...'],['gods']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['governments']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['hours']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['ideas']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['languages']
2024-06-11 15:47:20 root INFO     ['\n', ' the', ' ', ' (', '...'],['laws']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['members']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['months']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['nights']
2024-06-11 15:47:20 root INFO     ['\n', ' the', ' ', ' (', ' a'],['offices']
2024-06-11 15:47:20 root INFO     [' ', ' the', '\n', ' (', ' all'],['periods']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['players']
2024-06-11 15:47:20 root INFO     [' ', '\n', ' the', ' (', '...'],['populations']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['problems']
2024-06-11 15:47:20 root INFO     [' ', '\n', ' the', ' (', ' all'],['products']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['resources']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['rivers']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['roads']
2024-06-11 15:47:20 root INFO     [' ', '\n', ' the', ' (', ' a'],['roles']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['sciences']
2024-06-11 15:47:20 root INFO     ['\n', ' the', ' ', ' (', '...'],['solutions']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['songs']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['streets']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['students']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['systems']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['things']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['towns']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['users']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' all'],['versions']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['villages']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '/'],['websites']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', ' a'],['weeks']
2024-06-11 15:47:20 root INFO     ['\n', ' ', ' the', ' (', '...'],['years']
2024-06-11 15:47:20 root INFO     noun - plural_reg with 50 total): defaultdict(<class 'int'>, {True: 100})
2024-06-11 15:47:36 root INFO     Tokenizer loaded
2024-06-11 15:47:36 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-11 15:47:38 root INFO     starting operator prediction
2024-06-11 15:47:38 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-11 15:47:38 root INFO     [relation call] using If the present form is {}, the past form is
2024-06-11 15:47:41 root INFO     total operator prediction time: 3.4590957164764404 seconds
2024-06-11 15:47:41 lre.operators INFO     computing h from prompt "If the present form is accept, the past form is"
2024-06-11 15:47:41 lre.operators INFO     computing h from prompt "If the present form is achieve, the past form is"
2024-06-11 15:47:41 lre.operators INFO     computing h from prompt "If the present form is add, the past form is"
2024-06-11 15:47:41 lre.operators INFO     computing h from prompt "If the present form is agree, the past form is"
2024-06-11 15:47:41 lre.operators INFO     computing h from prompt "If the present form is allow, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is announce, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is appear, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is apply, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is ask, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is attend, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is become, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is believe, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is consider, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is continue, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is create, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is decide, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is describe, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is develop, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is discover, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is enjoy, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is ensure, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is establish, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is expect, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is follow, the past form is"
2024-06-11 15:47:42 lre.operators INFO     computing h from prompt "If the present form is hear, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is identify, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is improve, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is include, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is introduce, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is involve, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is locate, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is lose, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is manage, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is marry, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is perform, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is provide, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is publish, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is receive, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is reduce, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is refer, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is relate, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is remain, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is replace, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is require, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is seem, the past form is"
2024-06-11 15:47:43 lre.operators INFO     computing h from prompt "If the present form is send, the past form is"
2024-06-11 15:47:44 lre.operators INFO     computing h from prompt "If the present form is spend, the past form is"
2024-06-11 15:47:44 lre.operators INFO     computing h from prompt "If the present form is tell, the past form is"
2024-06-11 15:47:44 lre.operators INFO     computing h from prompt "If the present form is understand, the past form is"
2024-06-11 15:47:44 lre.operators INFO     computing h from prompt "If the present form is unite, the past form is"
2024-06-11 15:47:44 root INFO     ['\n', ' been', ' ', ' be', ' ('],['accepted']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' (', ' been', ' to'],['achieved']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' to'],['added']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' not'],['agreed']
2024-06-11 15:47:44 root INFO     ['\n', ' been', ' be', ' ', ' to'],['allowed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['announced']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' to', ' be', ' been'],['appeared']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' to', ' ('],['applied']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' not', ' ('],['asked']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' to'],['attended']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' to'],['became']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' to', ' be', ' been'],['believed']
2024-06-11 15:47:44 root INFO     ['\n', ' be', ' ', ' been', ' to'],['considered']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' to', ' be', ' been'],['continued']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' ('],['created']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' to', ' been'],['decided']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' to'],['described']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' (', ' be'],['developed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' ('],['discovered']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['enjoyed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['ensured']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['established']
2024-06-11 15:47:44 root INFO     ['\n', ' be', ' to', ' ', ' been'],['expected']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' be', ' ('],['followed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' be', ' ('],['heard']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' to'],['identified']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['improved']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' not'],['included']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' to', ' been'],['introduced']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['involved']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' ('],['located']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' (', ' be'],['lost']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' to', ' be'],['managed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' to'],['married']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' ('],['performed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' be', ' to'],['provided']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' be', ' to'],['published']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' be', ' ('],['received']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' to', ' been', ' ('],['reduced']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' to', ' be', ' been'],['referred']
2024-06-11 15:47:44 root INFO     ['\n', ' to', ' been', ' ', ' be'],['related']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' to'],['remained']
2024-06-11 15:47:44 root INFO     ['\n', ' be', ' ', ' been', ' ('],['replaced']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' been'],['required']
2024-06-11 15:47:44 root INFO     ['\n', ' to', ' ', ' be', ' been'],['seemed']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' (', ' to'],['sent']
2024-06-11 15:47:44 root INFO     ['\n', ' be', ' ', ' (', ' been'],['spent']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' ('],['told']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' be', ' been', ' to'],['understood']
2024-06-11 15:47:44 root INFO     ['\n', ' ', ' been', ' be', ' ('],['united']
2024-06-11 15:47:44 root INFO     verb_inf - Ved with 50 total): defaultdict(<class 'int'>, {True: 150})
2024-06-11 15:48:00 root INFO     Tokenizer loaded
2024-06-11 15:48:00 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-11 15:48:02 root INFO     starting operator prediction
2024-06-11 15:48:02 root INFO     [relation call] using After something is {}, it has
2024-06-11 15:48:05 root INFO     total operator prediction time: 3.281363010406494 seconds
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is adding, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is agreeing, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is allowing, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is announcing, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is appearing, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is applying, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is appointing, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is asking, it has"
2024-06-11 15:48:05 lre.operators INFO     computing h from prompt "After something is attending, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is becoming, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is considering, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is containing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is continuing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is creating, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is deciding, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is describing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is developing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is establishing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is existing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is expecting, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is failing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is following, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is hearing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is improving, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is including, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is introducing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is involving, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is locating, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is losing, it has"
2024-06-11 15:48:06 lre.operators INFO     computing h from prompt "After something is managing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is marrying, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is operating, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is performing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is proposing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is providing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is publishing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is receiving, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is reducing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is relating, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is remaining, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is replacing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is representing, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is requiring, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is sending, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is spending, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is suffering, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is teaching, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is telling, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is understanding, it has"
2024-06-11 15:48:07 lre.operators INFO     computing h from prompt "After something is uniting, it has"
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['added']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['agreed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['allowed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['announced']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['appeared']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['applied']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' done'],['appointed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['asked']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['attended']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' done'],['became']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['considered']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['contained']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['continued']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' ('],['created']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['decided']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['described']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' become', ' not'],['developed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' done'],['established']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['existed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['expected']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['failed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['followed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['heard']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', '...'],['improved']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['included']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['introduced']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['involved']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['located']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['lost']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['managed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['married']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' already'],['operated']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['performed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['proposed']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['provided']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['published']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' done'],['received']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['reduced']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['related']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['remained']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['replaced']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['represented']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['required']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['sent']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['spent']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' ('],['suffered']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['taught']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' become'],['told']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' made'],['understood']
2024-06-11 15:48:07 root INFO     [' been', '\n', ' ', ' not', ' already'],['united']
2024-06-11 15:48:07 root INFO     verb_Ving - Ved with 50 total): defaultdict(<class 'int'>, {True: 200})
2024-06-11 15:48:23 root INFO     Tokenizer loaded
2024-06-11 15:48:23 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-11 15:48:25 root INFO     starting operator prediction
2024-06-11 15:48:25 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-11 15:48:25 root INFO     [relation call] using When something is the most {}, it is
2024-06-11 15:48:29 root INFO     total operator prediction time: 3.458233594894409 seconds
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most able, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most angry, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most cheap, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most clever, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most costly, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most cruel, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most cute, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most dense, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most dumb, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most fierce, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most handy, it is"
2024-06-11 15:48:29 lre.operators INFO     computing h from prompt "When something is the most happy, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most hardy, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most harsh, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most healthy, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most hot, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most huge, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most hungry, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most lazy, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most lengthy, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most lucky, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most merry, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most mild, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most nasty, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most neat, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most nice, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most noisy, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most polite, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most proud, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most pure, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most rare, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most risky, it is"
2024-06-11 15:48:30 lre.operators INFO     computing h from prompt "When something is the most rude, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most sad, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most scary, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most sexy, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most shiny, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most strange, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most strict, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most strong, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most subtle, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most sunny, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most tasty, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most tiny, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most tricky, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most ugly, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most vague, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most weak, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most wealthy, it is"
2024-06-11 15:48:31 lre.operators INFO     computing h from prompt "When something is the most weird, it is"
2024-06-11 15:48:31 root INFO     [' most', ' the', ' least', '\n', ' '],['ablest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['angriest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['cheapest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['cleverest']
2024-06-11 15:48:31 root INFO     [' most', ' the', ' least', '\n', ' greatest'],['costliest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['cruelest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['cutest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['densest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['dumbest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['fiercest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['handiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['happiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', ' least', '\n', ' greatest'],['hardiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' best'],['harshest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['healthiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' greatest'],['hottest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['hugest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['hungriest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' best'],['laziest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' greatest'],['lengthiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['luckiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['merriest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['mildest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['nastiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', ' least', '\n', ' hardest'],['neatest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['nicest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' greatest'],['noisiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', ' least', '\n', ' best'],['politest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' hardest'],['proudest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['purest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['rarest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' greatest'],['riskiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['rudest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' hardest'],['saddest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['scariest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['sexiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['shiniest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['strangest']
2024-06-11 15:48:31 root INFO     [' most', ' the', ' least', '\n', ' greatest'],['strictest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['strongest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' hardest'],['subtlest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' hardest'],['sunniest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['tastiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['tiniest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' greatest'],['trickiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['ugliest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['vaguest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['weakest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['wealthiest']
2024-06-11 15:48:31 root INFO     [' most', ' the', '\n', ' least', ' '],['weirdest']
2024-06-11 15:48:31 root INFO     adj - superlative with 50 total): defaultdict(<class 'int'>, {True: 250})
2024-06-11 15:48:47 root INFO     Tokenizer loaded
2024-06-11 15:48:47 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-11 15:48:49 root INFO     starting operator prediction
2024-06-11 15:48:49 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-11 15:48:49 root INFO     [relation call] using I {}, he
2024-06-11 15:48:52 root INFO     total operator prediction time: 3.1232151985168457 seconds
2024-06-11 15:48:52 lre.operators INFO     computing h from prompt "I accept, he"
2024-06-11 15:48:52 lre.operators INFO     computing h from prompt "I achieve, he"
2024-06-11 15:48:52 lre.operators INFO     computing h from prompt "I add, he"
2024-06-11 15:48:52 lre.operators INFO     computing h from prompt "I agree, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I allow, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I appear, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I apply, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I ask, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I avoid, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I become, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I believe, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I consider, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I consist, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I contain, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I continue, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I create, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I describe, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I develop, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I enable, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I enjoy, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I ensure, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I exist, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I explain, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I follow, he"
2024-06-11 15:48:53 lre.operators INFO     computing h from prompt "I happen, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I hear, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I identify, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I improve, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I include, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I involve, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I learn, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I maintain, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I occur, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I operate, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I prevent, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I promote, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I protect, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I provide, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I receive, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I reduce, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I refer, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I remain, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I remember, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I represent, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I require, he"
2024-06-11 15:48:54 lre.operators INFO     computing h from prompt "I seem, he"
2024-06-11 15:48:55 lre.operators INFO     computing h from prompt "I send, he"
2024-06-11 15:48:55 lre.operators INFO     computing h from prompt "I suggest, he"
2024-06-11 15:48:55 lre.operators INFO     computing h from prompt "I tell, he"
2024-06-11 15:48:55 lre.operators INFO     computing h from prompt "I understand, he"
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['accepts']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['achieves']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['adds']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['agrees']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['allows']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['appears']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['applies']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['asks']
2024-06-11 15:48:55 root INFO     [' is', '\n', ' does', ' will', ' has'],['avoids']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['becomes']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['believes']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['considers']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['consists']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['contains']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['continues']
2024-06-11 15:48:55 root INFO     [' will', ' is', ' does', '\n', ' has'],['creates']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['describes']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['develops']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['enables']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['enjoys']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['ensures']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['exists']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['explains']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['follows']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['happens']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['hears']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['identifies']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['improves']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['includes']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['involves']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['learns']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['maintains']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['occurs']
2024-06-11 15:48:55 root INFO     [' is', '\n', ' does', ' will', ' has'],['operates']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['prevents']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['promotes']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['protects']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['provides']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', ' has', '\n'],['receives']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['reduces']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['refers']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['remains']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['remembers']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['represents']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['requires']
2024-06-11 15:48:55 root INFO     [' is', ' does', ' will', '\n', ' has'],['seems']
2024-06-11 15:48:55 root INFO     [' is', ' will', ' does', '\n', ' has'],['sends']
2024-06-11 15:48:55 root INFO     [' is', ' does', '\n', ' will', ' has'],['suggests']
2024-06-11 15:48:55 root INFO     [' does', ' will', ' is', '\n', ' has'],['tells']
2024-06-11 15:48:55 root INFO     [' is', ' will', '\n', ' does', ' has'],['understands']
2024-06-11 15:48:55 root INFO     verb_inf - 3pSg with 50 total): defaultdict(<class 'int'>, {True: 300})
2024-06-11 15:49:44 root INFO     Tokenizer loaded
2024-06-11 15:49:44 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:49:47 root INFO     starting operator prediction
2024-06-11 15:49:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:49:47 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:49:50 root INFO     total operator prediction time: 3.396629571914673 seconds
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more angry, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more cheap, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more clever, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more coarse, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more costly, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more cute, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more dense, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more dumb, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more fierce, it is"
2024-06-11 15:49:50 lre.operators INFO     computing h from prompt "When something is more handy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more happy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more hardy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more harsh, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more healthy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more hot, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more huge, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more hungry, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more lazy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more lengthy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more lucky, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more mad, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more merry, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more mild, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more moist, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more nasty, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more neat, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more nice, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more noisy, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more proud, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more pure, it is"
2024-06-11 15:49:51 lre.operators INFO     computing h from prompt "When something is more risky, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more rocky, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more rude, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more sad, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more scary, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more sexy, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more sticky, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more strict, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more strong, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more subtle, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more sunny, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more tasty, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more tiny, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more tricky, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more ugly, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more vague, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more vast, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more weak, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more wealthy, it is"
2024-06-11 15:49:52 lre.operators INFO     computing h from prompt "When something is more weird, it is"
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['angrier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['cheaper']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['cleverer']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['coarser']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['costlier']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' '],['cuter']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' a'],['denser']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['dumber']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['fiercer']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['handier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' ', '\n'],['happier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['hardier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['harsher']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['healthier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' harder', '\n'],['hotter']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' '],['huger']
2024-06-11 15:49:52 root INFO     [' more', ' less', '\n', ' much', ' '],['hungrier']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' a'],['lazier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['lengthier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['luckier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['madder']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' '],['merrier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['milder']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['moister']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['nastier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['neater']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['nicer']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['noisier']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', ' harder', '\n'],['prouder']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['purer']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['riskier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' harder', '\n'],['rockier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['ruder']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' harder', '\n'],['sadder']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['scarier']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' harder'],['sexier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' harder', '\n'],['stickier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['stricter']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['stronger']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' harder', '\n'],['subtler']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', ' harder', '\n'],['sunnier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['tastier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['tinier']
2024-06-11 15:49:52 root INFO     [' more', ' much', ' less', '\n', ' '],['trickier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['uglier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['vaguer']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' a'],['vaster']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' '],['weaker']
2024-06-11 15:49:52 root INFO     [' more', ' less', '\n', ' much', ' '],['wealthier']
2024-06-11 15:49:52 root INFO     [' more', ' less', ' much', '\n', ' harder'],['weirder']
2024-06-11 15:49:52 root INFO     adj - comparative with 50 total): defaultdict(<class 'int'>, {True: 50})
2024-06-11 15:50:08 root INFO     Tokenizer loaded
2024-06-11 15:50:08 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-11 15:50:10 root INFO     starting operator prediction
2024-06-11 15:50:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 15:50:10 root INFO     [relation call] using The plural form of {} is
2024-06-11 15:50:14 root INFO     total operator prediction time: 3.2240965366363525 seconds
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of album is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of application is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of area is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of car is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of college is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of council is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of customer is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of day is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of death is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of department is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of development is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of difference is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of director is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of event is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of example is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of fact is"
2024-06-11 15:50:14 lre.operators INFO     computing h from prompt "The plural form of friend is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of god is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of government is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of hour is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of idea is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of language is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of law is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of member is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of month is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of night is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of office is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of period is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of player is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of population is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of problem is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of product is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of resource is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of river is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of road is"
2024-06-11 15:50:15 lre.operators INFO     computing h from prompt "The plural form of role is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of science is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of solution is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of song is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of street is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of student is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of system is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of thing is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of town is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of user is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of version is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of village is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of website is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of week is"
2024-06-11 15:50:16 lre.operators INFO     computing h from prompt "The plural form of year is"
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['albums']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['applications']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['areas']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['cars']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['colleges']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['councils']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['customers']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['days']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', ' a'],['deaths']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['departments']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['developments']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['differences']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['directors']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['events']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', '...'],['examples']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', '...'],['facts']
2024-06-11 15:50:16 root INFO     [' the', '\n', ' ', ' (', ' all'],['friends']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', '...'],['gods']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['governments']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['hours']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['ideas']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['languages']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', '...'],['laws']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['members']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['months']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['nights']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', ' a'],['offices']
2024-06-11 15:50:16 root INFO     [' ', ' the', '\n', ' (', ' all'],['periods']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['players']
2024-06-11 15:50:16 root INFO     [' ', '\n', ' the', ' (', '...'],['populations']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['problems']
2024-06-11 15:50:16 root INFO     [' ', '\n', ' the', ' (', ' all'],['products']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['resources']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['rivers']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['roads']
2024-06-11 15:50:16 root INFO     [' ', '\n', ' the', ' (', ' a'],['roles']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', '...'],['sciences']
2024-06-11 15:50:16 root INFO     ['\n', ' the', ' ', ' (', '...'],['solutions']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['songs']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['streets']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['students']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['systems']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['things']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['towns']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['users']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' all'],['versions']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['villages']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '/'],['websites']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', ' a'],['weeks']
2024-06-11 15:50:16 root INFO     ['\n', ' ', ' the', ' (', '...'],['years']
2024-06-11 15:50:16 root INFO     noun - plural_reg with 50 total): defaultdict(<class 'int'>, {True: 100})
2024-06-11 15:54:31 root INFO     Tokenizer loaded
2024-06-11 15:54:31 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 15:54:33 root INFO     starting operator prediction
2024-06-11 15:54:33 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 15:54:33 root INFO     [relation call] using When something is more {}, it is
2024-06-11 15:54:37 root INFO     total operator prediction time: 3.3643481731414795 seconds
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['angrier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['cheaper'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['cleverer'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['coarser'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' a'] matches ['costlier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['cuter'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' a'] matches ['denser'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['dumber'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['fiercer'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['handier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['happier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' a'] matches ['hardier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' a'] matches ['harsher'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['healthier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['hotter'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['huger'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', '\n', ' much', ' '] matches ['hungrier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' a'] matches ['lazier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' a'] matches ['lengthier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', '\n', ' much', ' '] matches ['luckier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['madder'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['merrier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['milder'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['moister'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['nastier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' a'] matches ['neater'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['nicer'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['noisier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['prouder'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['purer'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' a'] matches ['riskier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['rockier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['ruder'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['sadder'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['scarier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['sexier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['stickier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['stricter'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['stronger'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['subtler'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['sunnier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['tastier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['tinier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['trickier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['uglier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['vaguer'] is False
2024-06-11 15:54:39 root INFO     [' more', ' much', ' less', '\n', ' a'] matches ['vaster'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['weaker'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', '\n', ' much', ' '] matches ['wealthier'] is False
2024-06-11 15:54:39 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['weirder'] is False
2024-06-11 15:54:39 root INFO     adj - comparative (50) total: defaultdict(<class 'int'>, {False: 50})
2024-06-11 15:54:55 root INFO     Tokenizer loaded
2024-06-11 15:54:55 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-11 15:54:57 root INFO     starting operator prediction
2024-06-11 15:54:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 15:54:57 root INFO     [relation call] using The plural form of {} is
2024-06-11 15:55:00 root INFO     total operator prediction time: 3.2194550037384033 seconds
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['albums'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['applications'] is True
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['areas'] is True
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' all'] matches ['cars'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['colleges'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['councils'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['customers'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['days'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['deaths'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['departments'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['developments'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['differences'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['directors'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['events'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['examples'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['facts'] is False
2024-06-11 15:55:03 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['friends'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['gods'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['governments'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' all'] matches ['hours'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['ideas'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' all'] matches ['languages'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['laws'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['members'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['months'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['nights'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['offices'] is False
2024-06-11 15:55:03 root INFO     [' the', ' ', '\n', ' (', ' all'] matches ['periods'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['players'] is False
2024-06-11 15:55:03 root INFO     [' ', '\n', ' the', ' (', '...'] matches ['populations'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['problems'] is False
2024-06-11 15:55:03 root INFO     [' ', '\n', ' the', ' (', '...'] matches ['products'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['resources'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['rivers'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' all'] matches ['roads'] is False
2024-06-11 15:55:03 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['roles'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['sciences'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['solutions'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['songs'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['streets'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['students'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['systems'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' all'] matches ['things'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['towns'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['users'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['versions'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['villages'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['websites'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['weeks'] is False
2024-06-11 15:55:03 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['years'] is False
2024-06-11 15:55:03 root INFO     noun - plural_reg (50) total: defaultdict(<class 'int'>, {False: 98, True: 2})
2024-06-11 15:55:19 root INFO     Tokenizer loaded
2024-06-11 15:55:19 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-11 15:55:21 root INFO     starting operator prediction
2024-06-11 15:55:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-11 15:55:21 root INFO     [relation call] using If the present form is {}, the past form is
2024-06-11 15:55:24 root INFO     total operator prediction time: 3.4660189151763916 seconds
2024-06-11 15:55:27 root INFO     ['\n', ' been', ' ', ' be', ' ('] matches ['accepted'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' (', ' to'] matches ['achieved'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' to'] matches ['added'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' not'] matches ['agreed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' been', ' be', ' ', ' to'] matches ['allowed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' to'] matches ['announced'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' to', ' be', ' been'] matches ['appeared'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' to', ' ('] matches ['applied'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' not', ' been'] matches ['asked'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' (', ' to'] matches ['attended'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' to'] matches ['became'] is True
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' to', ' been', ' be'] matches ['believed'] is True
2024-06-11 15:55:27 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['considered'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' to', ' be', ' been'] matches ['continued'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['created'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' to', ' been'] matches ['decided'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' to'] matches ['described'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' ('] matches ['developed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['discovered'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['enjoyed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['ensured'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['established'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' be', ' to', ' ', ' been'] matches ['expected'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' ('] matches ['followed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' ('] matches ['heard'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' (', ' to'] matches ['identified'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['improved'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' not'] matches ['included'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' to', ' been'] matches ['introduced'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' (', ' been'] matches ['involved'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' to'] matches ['located'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' (', ' be'] matches ['lost'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['managed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' to'] matches ['married'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' ('] matches ['performed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' to'] matches ['provided'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' to'] matches ['published'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' ('] matches ['received'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' to', ' been', ' ('] matches ['reduced'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' to', ' be', ' been'] matches ['referred'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' to', ' been', ' ', ' be'] matches ['related'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' to'] matches ['remained'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['replaced'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['required'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' to', ' ', ' be', ' been'] matches ['seemed'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' (', ' to'] matches ['sent'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['spent'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' be', ' been', ' ('] matches ['told'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' to'] matches ['understood'] is False
2024-06-11 15:55:27 root INFO     ['\n', ' ', ' been', ' be', ' ('] matches ['united'] is False
2024-06-11 15:55:27 root INFO     verb_inf - Ved (50) total: defaultdict(<class 'int'>, {False: 146, True: 4})
2024-06-11 15:55:43 root INFO     Tokenizer loaded
2024-06-11 15:55:43 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-11 15:55:45 root INFO     starting operator prediction
2024-06-11 15:55:45 root INFO     [relation call] using After something is {}, it has
2024-06-11 15:55:48 root INFO     total operator prediction time: 3.2702646255493164 seconds
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['added'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['agreed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['allowed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['announced'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['appeared'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['applied'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['appointed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['asked'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' ('] matches ['attended'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['became'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['considered'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['contained'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['continued'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' ('] matches ['created'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['decided'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' ('] matches ['described'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['developed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['established'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['existed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['expected'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['failed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['followed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['heard'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['improved'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['included'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['introduced'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['involved'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['located'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['lost'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['managed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['married'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['operated'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['performed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['proposed'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['provided'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['published'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['received'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['reduced'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['related'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['remained'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['replaced'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['represented'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['required'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['sent'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['spent'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' ('] matches ['suffered'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['taught'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['told'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['understood'] is False
2024-06-11 15:55:50 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['united'] is False
2024-06-11 15:55:50 root INFO     verb_Ving - Ved (50) total: defaultdict(<class 'int'>, {False: 196, True: 4})
2024-06-11 15:56:06 root INFO     Tokenizer loaded
2024-06-11 15:56:06 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-11 15:56:08 root INFO     starting operator prediction
2024-06-11 15:56:08 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-11 15:56:08 root INFO     [relation call] using When something is the most {}, it is
2024-06-11 15:56:12 root INFO     total operator prediction time: 3.4381179809570312 seconds
2024-06-11 15:56:14 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['ablest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['angriest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['cheapest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['cleverest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['costliest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['cruelest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['cutest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['densest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['dumbest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['fiercest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['handiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['happiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['hardiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['harshest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['healthiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['hottest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['hugest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['hungriest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' best'] matches ['laziest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['lengthiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['luckiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['merriest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['mildest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['nastiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['neatest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['nicest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['noisiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', ' least', '\n', ' best'] matches ['politest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['proudest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['purest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['rarest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['riskiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['rudest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['saddest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['scariest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['sexiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['shiniest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['strangest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['strictest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['strongest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['subtlest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['sunniest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['tastiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['tiniest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['trickiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['ugliest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['vaguest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['weakest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['wealthiest'] is False
2024-06-11 15:56:14 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['weirdest'] is False
2024-06-11 15:56:14 root INFO     adj - superlative (50) total: defaultdict(<class 'int'>, {False: 246, True: 4})
2024-06-11 15:56:30 root INFO     Tokenizer loaded
2024-06-11 15:56:30 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-11 15:56:32 root INFO     starting operator prediction
2024-06-11 15:56:32 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-11 15:56:32 root INFO     [relation call] using I {}, he
2024-06-11 15:56:35 root INFO     total operator prediction time: 3.10123348236084 seconds
2024-06-11 15:56:38 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['accepts'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' does', ' will', ' has'] matches ['achieves'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['adds'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' will', ' does', ' has'] matches ['agrees'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', "'s"] matches ['allows'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['appears'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' will', ' does', ' has'] matches ['applies'] is False
2024-06-11 15:56:38 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['asks'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' does', ' will', ' has'] matches ['avoids'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['becomes'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['believes'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['considers'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['consists'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['contains'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', '\n', ' does', "'s"] matches ['continues'] is False
2024-06-11 15:56:38 root INFO     [' will', ' is', ' does', '\n', ' has'] matches ['creates'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['describes'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', '\n', ' does', ' has'] matches ['develops'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['enables'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' does', ' will', ' has'] matches ['enjoys'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['ensures'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['exists'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['explains'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['follows'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['happens'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['hears'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['identifies'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['improves'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', '\n', ' does', ' has'] matches ['includes'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['involves'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['learns'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['maintains'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['occurs'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' does', ' will', ' has'] matches ['operates'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['prevents'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['promotes'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['protects'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['provides'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['receives'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['reduces'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['refers'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['remains'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['remembers'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['represents'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['requires'] is False
2024-06-11 15:56:38 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['seems'] is False
2024-06-11 15:56:38 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['sends'] is False
2024-06-11 15:56:38 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['suggests'] is False
2024-06-11 15:56:38 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['tells'] is False
2024-06-11 15:56:38 root INFO     [' is', '\n', ' does', ' will', ' has'] matches ['understands'] is False
2024-06-11 15:56:38 root INFO     verb_inf - 3pSg (50) total: defaultdict(<class 'int'>, {False: 296, True: 4})
2024-06-11 15:56:54 root INFO     Tokenizer loaded
2024-06-11 15:56:54 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='Ving - verb_inf', prompt_templates=['{} is the active form of', '{} is to'], prompt_templates_zs=['{} is the active form of', '{} is to'], samples=[RelationSample(subject='achieving', object=['achieve']), RelationSample(subject='adding', object=['add']), RelationSample(subject='allowing', object=['allow']), RelationSample(subject='appearing', object=['appear']), RelationSample(subject='applying', object=['apply']), RelationSample(subject='asking', object=['ask']), RelationSample(subject='attending', object=['attend']), RelationSample(subject='avoiding', object=['avoid']), RelationSample(subject='becoming', object=['become']), RelationSample(subject='believing', object=['believe']), RelationSample(subject='considering', object=['consider']), RelationSample(subject='containing', object=['contain']), RelationSample(subject='continuing', object=['continue']), RelationSample(subject='creating', object=['create']), RelationSample(subject='developing', object=['develop']), RelationSample(subject='encouraging', object=['encourage']), RelationSample(subject='enjoying', object=['enjoy']), RelationSample(subject='ensuring', object=['ensure']), RelationSample(subject='establishing', object=['establish']), RelationSample(subject='existing', object=['exist']), RelationSample(subject='expecting', object=['expect']), RelationSample(subject='following', object=['follow']), RelationSample(subject='happening', object=['happen']), RelationSample(subject='identifying', object=['identify']), RelationSample(subject='improving', object=['improve']), RelationSample(subject='including', object=['include']), RelationSample(subject='involving', object=['involve']), RelationSample(subject='learning', object=['learn']), RelationSample(subject='losing', object=['lose']), RelationSample(subject='maintaining', object=['maintain']), RelationSample(subject='managing', object=['manage']), RelationSample(subject='operating', object=['operate']), RelationSample(subject='performing', object=['perform']), RelationSample(subject='preventing', object=['prevent']), RelationSample(subject='promoting', object=['promote']), RelationSample(subject='protecting', object=['protect']), RelationSample(subject='providing', object=['provide']), RelationSample(subject='receiving', object=['receive']), RelationSample(subject='reducing', object=['reduce']), RelationSample(subject='referring', object=['refer']), RelationSample(subject='remaining', object=['remain']), RelationSample(subject='remembering', object=['remember']), RelationSample(subject='representing', object=['represent']), RelationSample(subject='requiring', object=['require']), RelationSample(subject='seeming', object=['seem']), RelationSample(subject='sitting', object=['sit']), RelationSample(subject='spending', object=['spend']), RelationSample(subject='teaching', object=['teach']), RelationSample(subject='telling', object=['tell']), RelationSample(subject='understanding', object=['understand'])], _domain=None, _range=None)
2024-06-11 15:56:56 root INFO     starting operator prediction
2024-06-11 15:56:56 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} is the active form of)
2024-06-11 15:56:56 root INFO     [relation call] using {} is the active form of
2024-06-11 15:56:59 root INFO     total operator prediction time: 3.267378330230713 seconds
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['achieve'] is False
2024-06-11 15:57:02 root INFO     ['\n', '.', ' ', ' the', ','] matches ['add'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['allow'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' have', ' to'] matches ['appear'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['apply'] is False
2024-06-11 15:57:02 root INFO     ['\n', '.', ' ', ' the', ','] matches ['ask'] is False
2024-06-11 15:57:02 root INFO     [' ', '\n', ' be', ' the', ' make'] matches ['attend'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['avoid'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['become'] is True
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['believe'] is True
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['consider'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', '.', ' the', ','] matches ['contain'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['continue'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['create'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' have', ' the'] matches ['develop'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' have', ' the'] matches ['encourage'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['enjoy'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['ensure'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['establish'] is False
2024-06-11 15:57:02 root INFO     ['\n', '.', ' ', ' the', ','] matches ['exist'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['expect'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['follow'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' have', ' to'] matches ['happen'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' to'] matches ['identify'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['improve'] is False
2024-06-11 15:57:02 root INFO     ['\n', '.', ' ', ' the', ','] matches ['include'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['involve'] is False
2024-06-11 15:57:02 root INFO     ['\n', '.', ' ', ' the', ','] matches ['learn'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', '...'] matches ['lose'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['maintain'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['manage'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['operate'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', '.', ' the', ','] matches ['perform'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['prevent'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['promote'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['protect'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['provide'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['receive'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['reduce'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' to', ' the'] matches ['refer'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['remain'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['remember'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['represent'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['require'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' to', ' have'] matches ['seem'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['sit'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['spend'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' have', ' the'] matches ['teach'] is False
2024-06-11 15:57:02 root INFO     ['\n', '.', ' ', ' the', ','] matches ['tell'] is False
2024-06-11 15:57:02 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['understand'] is False
2024-06-11 15:57:02 root INFO     Ving - verb_inf (50) total: defaultdict(<class 'int'>, {False: 344, True: 6})
2024-06-11 15:57:18 root INFO     Tokenizer loaded
2024-06-11 15:57:18 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_3pSg - Ved', prompt_templates=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], prompt_templates_zs=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], samples=[RelationSample(subject='adds', object=['added']), RelationSample(subject='agrees', object=['agreed']), RelationSample(subject='allows', object=['allowed']), RelationSample(subject='announces', object=['announced']), RelationSample(subject='appears', object=['appeared']), RelationSample(subject='applies', object=['applied']), RelationSample(subject='appoints', object=['appointed']), RelationSample(subject='asks', object=['asked']), RelationSample(subject='becomes', object=['became']), RelationSample(subject='believes', object=['believed']), RelationSample(subject='considers', object=['considered']), RelationSample(subject='consists', object=['consisted']), RelationSample(subject='contains', object=['contained']), RelationSample(subject='continues', object=['continued']), RelationSample(subject='creates', object=['created']), RelationSample(subject='decides', object=['decided']), RelationSample(subject='describes', object=['described']), RelationSample(subject='develops', object=['developed']), RelationSample(subject='establishes', object=['established']), RelationSample(subject='expects', object=['expected']), RelationSample(subject='fails', object=['failed']), RelationSample(subject='follows', object=['followed']), RelationSample(subject='happens', object=['happened']), RelationSample(subject='hears', object=['heard']), RelationSample(subject='includes', object=['included']), RelationSample(subject='intends', object=['intended']), RelationSample(subject='introduces', object=['introduced']), RelationSample(subject='involves', object=['involved']), RelationSample(subject='locates', object=['located']), RelationSample(subject='loses', object=['lost']), RelationSample(subject='manages', object=['managed']), RelationSample(subject='marries', object=['married']), RelationSample(subject='occurs', object=['occurred']), RelationSample(subject='operates', object=['operated']), RelationSample(subject='performs', object=['performed']), RelationSample(subject='proposes', object=['proposed']), RelationSample(subject='provides', object=['provided']), RelationSample(subject='publishes', object=['published']), RelationSample(subject='receives', object=['received']), RelationSample(subject='refers', object=['referred']), RelationSample(subject='relates', object=['related']), RelationSample(subject='remains', object=['remained']), RelationSample(subject='replaces', object=['replaced']), RelationSample(subject='represents', object=['represented']), RelationSample(subject='requires', object=['required']), RelationSample(subject='seems', object=['seemed']), RelationSample(subject='sends', object=['sent']), RelationSample(subject='spends', object=['spent']), RelationSample(subject='suggests', object=['suggested']), RelationSample(subject='tells', object=['told'])], _domain=None, _range=None)
2024-06-11 15:57:20 root INFO     starting operator prediction
2024-06-11 15:57:20 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When he {} something, something has been)
2024-06-11 15:57:20 root INFO     [relation call] using When he {} something, something has been
2024-06-11 15:57:23 root INFO     total operator prediction time: 3.316326379776001 seconds
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['added'] is False
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['agreed'] is False
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' made', ' ', ' considered'] matches ['allowed'] is False
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' made', ' done', ' '] matches ['announced'] is False
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' made', ' ', ' done'] matches ['appeared'] is False
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' made', ' done', ' '] matches ['applied'] is False
2024-06-11 15:57:25 root INFO     ['\n', ' been', ' made', ' ', ' done'] matches ['appointed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['asked'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['became'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['believed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['considered'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['consisted'] is False
2024-06-11 15:57:26 root INFO     [' been', '\n', ' ', ' done', ' made'] matches ['contained'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['continued'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' considered', ' done'] matches ['created'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['decided'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' made', ' '] matches ['described'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' made', ' done', ' '] matches ['developed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['established'] is False
2024-06-11 15:57:26 root INFO     [' been', '\n', ' done', ' ', ' made'] matches ['expected'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['failed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['followed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['happened'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['heard'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' considered', ' made'] matches ['included'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['intended'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['introduced'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['involved'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['located'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['lost'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['managed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' made', ' done', ' '] matches ['married'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['occurred'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['operated'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['performed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' made', ' '] matches ['proposed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['provided'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['published'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['received'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['referred'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['related'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['remained'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' done', ' made'] matches ['replaced'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' done', ' ', ' made'] matches ['represented'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['required'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['seemed'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['sent'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' done'] matches ['spent'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' made', ' considered'] matches ['suggested'] is False
2024-06-11 15:57:26 root INFO     ['\n', ' been', ' ', ' considered', ' made'] matches ['told'] is False
2024-06-11 15:57:26 root INFO     verb_3pSg - Ved (50) total: defaultdict(<class 'int'>, {False: 394, True: 6})
2024-06-11 15:57:41 root INFO     Tokenizer loaded
2024-06-11 15:57:41 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - 3pSg', prompt_templates=['When something is {}, it'], prompt_templates_zs=['When something is {}, it'], samples=[RelationSample(subject='adding', object=['adds']), RelationSample(subject='advertising', object=['advertises']), RelationSample(subject='allowing', object=['allows']), RelationSample(subject='appearing', object=['appears']), RelationSample(subject='applying', object=['applies']), RelationSample(subject='asking', object=['asks']), RelationSample(subject='becoming', object=['becomes']), RelationSample(subject='believing', object=['believes']), RelationSample(subject='considering', object=['considers']), RelationSample(subject='consisting', object=['consists']), RelationSample(subject='containing', object=['contains']), RelationSample(subject='continuing', object=['continues']), RelationSample(subject='creating', object=['creates']), RelationSample(subject='depending', object=['depends']), RelationSample(subject='describing', object=['describes']), RelationSample(subject='developing', object=['develops']), RelationSample(subject='discovering', object=['discovers']), RelationSample(subject='enabling', object=['enables']), RelationSample(subject='existing', object=['exists']), RelationSample(subject='explaining', object=['explains']), RelationSample(subject='following', object=['follows']), RelationSample(subject='happening', object=['happens']), RelationSample(subject='hearing', object=['hears']), RelationSample(subject='improving', object=['improves']), RelationSample(subject='including', object=['includes']), RelationSample(subject='involving', object=['involves']), RelationSample(subject='learning', object=['learns']), RelationSample(subject='losing', object=['loses']), RelationSample(subject='managing', object=['manages']), RelationSample(subject='occurring', object=['occurs']), RelationSample(subject='operating', object=['operates']), RelationSample(subject='performing', object=['performs']), RelationSample(subject='promoting', object=['promotes']), RelationSample(subject='providing', object=['provides']), RelationSample(subject='publishing', object=['publishes']), RelationSample(subject='receiving', object=['receives']), RelationSample(subject='reducing', object=['reduces']), RelationSample(subject='referring', object=['refers']), RelationSample(subject='relating', object=['relates']), RelationSample(subject='remaining', object=['remains']), RelationSample(subject='representing', object=['represents']), RelationSample(subject='requiring', object=['requires']), RelationSample(subject='seeming', object=['seems']), RelationSample(subject='sitting', object=['sits']), RelationSample(subject='spending', object=['spends']), RelationSample(subject='suggesting', object=['suggests']), RelationSample(subject='teaching', object=['teaches']), RelationSample(subject='telling', object=['tells']), RelationSample(subject='thanking', object=['thanks']), RelationSample(subject='understanding', object=['understands'])], _domain=None, _range=None)
2024-06-11 15:57:44 root INFO     starting operator prediction
2024-06-11 15:57:44 root INFO     [relation call] using When something is {}, it
2024-06-11 15:57:47 root INFO     total operator prediction time: 3.246203660964966 seconds
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['adds'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['advertises'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['allows'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['appears'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['applies'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['asks'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['becomes'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['believes'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['considers'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['consists'] is False
2024-06-11 15:57:49 root INFO     [' is', ' does', '\n', "'s", ' has'] matches ['contains'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['continues'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['creates'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['depends'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['describes'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['develops'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['discovers'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['enables'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['exists'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['explains'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['follows'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['happens'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['hears'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['improves'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['includes'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['involves'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['learns'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['loses'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['manages'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['occurs'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['operates'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['performs'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['promotes'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['provides'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['publishes'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['receives'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' has'] matches ['reduces'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['refers'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['relates'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['remains'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['represents'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['requires'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['seems'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['sits'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['spends'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['suggests'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' has'] matches ['teaches'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['tells'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['thanks'] is False
2024-06-11 15:57:49 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['understands'] is False
2024-06-11 15:57:49 root INFO     verb_Ving - 3pSg (50) total: defaultdict(<class 'int'>, {False: 444, True: 6})
2024-06-11 15:58:05 root INFO     Tokenizer loaded
2024-06-11 15:58:05 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_irreg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='ability', object=['abilities']), RelationSample(subject='academy', object=['academies']), RelationSample(subject='activity', object=['activities']), RelationSample(subject='agency', object=['agencies']), RelationSample(subject='analysis', object=['analyses']), RelationSample(subject='army', object=['armies']), RelationSample(subject='authority', object=['authorities']), RelationSample(subject='basis', object=['bases']), RelationSample(subject='business', object=['businesses']), RelationSample(subject='category', object=['categories']), RelationSample(subject='century', object=['centuries']), RelationSample(subject='child', object=['children']), RelationSample(subject='city', object=['cities']), RelationSample(subject='community', object=['communities']), RelationSample(subject='country', object=['countries']), RelationSample(subject='county', object=['counties']), RelationSample(subject='datum', object=['data']), RelationSample(subject='duty', object=['duties']), RelationSample(subject='economy', object=['economies']), RelationSample(subject='energy', object=['energies']), RelationSample(subject='entry', object=['entries']), RelationSample(subject='facility', object=['facilities']), RelationSample(subject='family', object=['families']), RelationSample(subject='formula', object=['formulae']), RelationSample(subject='history', object=['histories']), RelationSample(subject='industry', object=['industries']), RelationSample(subject='library', object=['libraries']), RelationSample(subject='life', object=['lives']), RelationSample(subject='loss', object=['losses']), RelationSample(subject='majority', object=['majorities']), RelationSample(subject='memory', object=['memories']), RelationSample(subject='opportunity', object=['opportunities']), RelationSample(subject='policy', object=['policies']), RelationSample(subject='property', object=['properties']), RelationSample(subject='responsibility', object=['responsibilities']), RelationSample(subject='safety', object=['safeties']), RelationSample(subject='secretary', object=['secretaries']), RelationSample(subject='security', object=['securities']), RelationSample(subject='series', object=['series']), RelationSample(subject='society', object=['societies']), RelationSample(subject='species', object=['species']), RelationSample(subject='story', object=['stories']), RelationSample(subject='strategy', object=['strategies']), RelationSample(subject='success', object=['successes']), RelationSample(subject='technology', object=['technologies']), RelationSample(subject='theory', object=['theories']), RelationSample(subject='university', object=['universities']), RelationSample(subject='variety', object=['varieties']), RelationSample(subject='wife', object=['wives']), RelationSample(subject='woman', object=['women'])], _domain=None, _range=None)
2024-06-11 15:58:07 root INFO     starting operator prediction
2024-06-11 15:58:07 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 15:58:07 root INFO     [relation call] using The plural form of {} is
2024-06-11 15:58:11 root INFO     total operator prediction time: 3.254669189453125 seconds
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['abilities'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['academies'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['activities'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['agencies'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['analyses'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['armies'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['authorities'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['bases'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['businesses'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['categories'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['centuries'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['children'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['cities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['communities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['countries'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['counties'] is False
2024-06-11 15:58:13 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['data'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['duties'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['economies'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['energies'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['entries'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['facilities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['families'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['formulae'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', '...'] matches ['histories'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['industries'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['libraries'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['lives'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['losses'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['majorities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['memories'] is False
2024-06-11 15:58:13 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['opportunities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['policies'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['properties'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['responsibilities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['safeties'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['secretaries'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['securities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['series'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['societies'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['species'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['stories'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['strategies'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['successes'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['technologies'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['theories'] is True
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['universities'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['varieties'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['wives'] is False
2024-06-11 15:58:13 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['women'] is False
2024-06-11 15:58:13 root INFO     noun - plural_irreg (50) total: defaultdict(<class 'int'>, {False: 486, True: 14})
2024-06-11 15:58:29 root INFO     Tokenizer loaded
2024-06-11 15:58:29 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+tion_irreg', prompt_templates=['To {} results in', 'To {} is to form a'], prompt_templates_zs=['To {} results in', 'To {} is to form a'], samples=[RelationSample(subject='accuse', object=['accusation']), RelationSample(subject='admire', object=['admiration']), RelationSample(subject='allege', object=['allegation']), RelationSample(subject='aspire', object=['aspiration']), RelationSample(subject='authorize', object=['authorization', 'authorisation']), RelationSample(subject='characterize', object=['characterization', 'characterisation']), RelationSample(subject='civilize', object=['civilization', 'civilisation']), RelationSample(subject='colonize', object=['colonization']), RelationSample(subject='compile', object=['compilation']), RelationSample(subject='compute', object=['computation']), RelationSample(subject='condense', object=['condensation']), RelationSample(subject='configure', object=['configuration']), RelationSample(subject='consult', object=['consulation']), RelationSample(subject='continue', object=['continuation']), RelationSample(subject='customize', object=['customization']), RelationSample(subject='declare', object=['declaration']), RelationSample(subject='degrade', object=['degradation']), RelationSample(subject='deprive', object=['deprivation']), RelationSample(subject='derive', object=['derivation']), RelationSample(subject='determine', object=['determination']), RelationSample(subject='examine', object=['examination']), RelationSample(subject='expire', object=['expiration']), RelationSample(subject='explore', object=['exploration']), RelationSample(subject='globalize', object=['globalization', 'globalisation']), RelationSample(subject='illumine', object=['illumination']), RelationSample(subject='imagine', object=['imagination']), RelationSample(subject='improvize', object=['improvization', 'improvisation']), RelationSample(subject='inspire', object=['inspiration']), RelationSample(subject='install', object=['installation', 'instalation']), RelationSample(subject='maximize', object=['maximization', 'maximisation']), RelationSample(subject='minimize', object=['minimization', 'minimisation']), RelationSample(subject='modernize', object=['modernization', 'modernisation']), RelationSample(subject='oblige', object=['obligation']), RelationSample(subject='observe', object=['observation']), RelationSample(subject='occupy', object=['occupation']), RelationSample(subject='optimize', object=['optimization', 'optimisation']), RelationSample(subject='organize', object=['organization']), RelationSample(subject='perspire', object=['perspiration']), RelationSample(subject='prepare', object=['preparation']), RelationSample(subject='privatize', object=['privatization', 'privatisation']), RelationSample(subject='randomize', object=['randomization', 'randomisation']), RelationSample(subject='realize', object=['realization', 'realisation']), RelationSample(subject='reorganize', object=['reorganization', 'reorganisation']), RelationSample(subject='restore', object=['restoration']), RelationSample(subject='specialize', object=['specialization', 'specialisation']), RelationSample(subject='stabilize', object=['stabilization']), RelationSample(subject='standardize', object=['standardization', 'standardisation']), RelationSample(subject='starve', object=['starvation']), RelationSample(subject='utilize', object=['utilization', 'utilisation']), RelationSample(subject='visualize', object=['visualization'])], _domain=None, _range=None)
2024-06-11 15:58:31 root INFO     starting operator prediction
2024-06-11 15:58:31 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in)
2024-06-11 15:58:31 root INFO     [relation call] using To {} results in
2024-06-11 15:58:34 root INFO     total operator prediction time: 3.1432111263275146 seconds
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['accusation'] is True
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', '...'] matches ['admiration'] is True
2024-06-11 15:58:37 root INFO     [' the', '\n', ' ', ' a', ' re'] matches ['allegation'] is True
2024-06-11 15:58:37 root INFO     [' the', '\n', ' ', ' a', ' re'] matches ['aspiration'] is True
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['authorization', 'authorisation'] is True
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', '...'] matches ['characterization', 'characterisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['civilization', 'civilisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['colonization'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['compilation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' organization'] matches ['computation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' re', ' '] matches ['condensation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' organization'] matches ['configuration'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', '...'] matches ['continuation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' organization'] matches ['customization'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' an'] matches ['declaration'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['degradation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['deprivation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' administration'] matches ['derivation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' administration'] matches ['determination'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' administration'] matches ['examination'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['expiration'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' administration'] matches ['exploration'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['globalization', 'globalisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['illumination'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', '...'] matches ['imagination'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['improvization', 'improvisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['inspiration'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', '...'] matches ['installation', 'instalation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' improvement', ' '] matches ['maximization', 'maximisation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' improvement', ' re'] matches ['minimization', 'minimisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' administration'] matches ['modernization', 'modernisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' re', ' '] matches ['obligation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['observation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', '...'] matches ['occupation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' consideration', ' organization'] matches ['optimization', 'optimisation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['organization'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' ', ' a', ' re'] matches ['perspiration'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['preparation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['privatization', 'privatisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['randomization', 'randomisation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' organization'] matches ['realization', 'realisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' re'] matches ['reorganization', 'reorganisation'] is True
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' operation'] matches ['restoration'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' a', ' ', ' in'] matches ['specialization', 'specialisation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['stabilization'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' re', ' '] matches ['standardization', 'standardisation'] is False
2024-06-11 15:58:37 root INFO     [' the', '\n', ' ', ' re', ' a'] matches ['starvation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['utilization', 'utilisation'] is False
2024-06-11 15:58:37 root INFO     [' the', ' a', '\n', ' ', ' re'] matches ['visualization'] is False
2024-06-11 15:58:37 root INFO     verb+tion_irreg (50) total: defaultdict(<class 'int'>, {False: 529, True: 20})
2024-06-11 15:58:53 root INFO     Tokenizer loaded
2024-06-11 15:58:53 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='re+verb_reg', prompt_templates=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], prompt_templates_zs=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], samples=[RelationSample(subject='acquire', object=['reacquire']), RelationSample(subject='adjust', object=['readjust']), RelationSample(subject='appear', object=['reappear']), RelationSample(subject='apply', object=['reapply']), RelationSample(subject='appoint', object=['reappoint']), RelationSample(subject='arrange', object=['rearrange']), RelationSample(subject='assess', object=['reassess']), RelationSample(subject='assign', object=['reassign']), RelationSample(subject='assure', object=['reassure']), RelationSample(subject='calculate', object=['recalculate']), RelationSample(subject='cognize', object=['recognize']), RelationSample(subject='commend', object=['recommend']), RelationSample(subject='configure', object=['reconfigure']), RelationSample(subject='confirm', object=['reconfirm']), RelationSample(subject='connect', object=['reconnect']), RelationSample(subject='consider', object=['reconsider']), RelationSample(subject='create', object=['recreate']), RelationSample(subject='decorate', object=['redecorate']), RelationSample(subject='deem', object=['redeem']), RelationSample(subject='define', object=['redefine']), RelationSample(subject='develop', object=['redevelop']), RelationSample(subject='discover', object=['rediscover']), RelationSample(subject='distribute', object=['redistribute']), RelationSample(subject='emerge', object=['reemerge']), RelationSample(subject='engage', object=['reengage']), RelationSample(subject='establish', object=['reestablish']), RelationSample(subject='evaluate', object=['reevaluate']), RelationSample(subject='examine', object=['reexamine']), RelationSample(subject='generate', object=['regenerate']), RelationSample(subject='grow', object=['regrow']), RelationSample(subject='install', object=['reinstall']), RelationSample(subject='integrate', object=['reintegrate']), RelationSample(subject='interpret', object=['reinterpret']), RelationSample(subject='introduce', object=['reintroduce']), RelationSample(subject='invest', object=['reinvest']), RelationSample(subject='investigate', object=['reinvestigate']), RelationSample(subject='learn', object=['relearn']), RelationSample(subject='locate', object=['relocate']), RelationSample(subject='marry', object=['remarry']), RelationSample(subject='negotiate', object=['renegotiate']), RelationSample(subject='occur', object=['reoccur']), RelationSample(subject='organize', object=['reorganize', 'reorganise']), RelationSample(subject='publish', object=['republish']), RelationSample(subject='send', object=['resend']), RelationSample(subject='solve', object=['resolve']), RelationSample(subject='submit', object=['resubmit']), RelationSample(subject='tell', object=['retell']), RelationSample(subject='unite', object=['reunite']), RelationSample(subject='upload', object=['reupload']), RelationSample(subject='write', object=['rewrite'])], _domain=None, _range=None)
2024-06-11 15:58:55 root INFO     starting operator prediction
2024-06-11 15:58:55 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} again is to)
2024-06-11 15:58:55 root INFO     [relation call] using To {} again is to
2024-06-11 15:58:58 root INFO     total operator prediction time: 3.236208915710449 seconds
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' reass'] matches ['reacquire'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' reass'] matches ['readjust'] is True
2024-06-11 15:59:01 root INFO     [' re', ' recon', ' red', ' rec', ' reass'] matches ['reappear'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' reass'] matches ['reapply'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' res'] matches ['reappoint'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' rein'] matches ['rearrange'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' rein', ' reass'] matches ['reassess'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' reass', ' red'] matches ['reassign'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' renew', ' recon'] matches ['reassure'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' ret', ' recon'] matches ['recalculate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' rein', ' red'] matches ['recognize'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' renew', ' res'] matches ['recommend'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' rein', ' ret'] matches ['reconfigure'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' recon', ' rein'] matches ['reconfirm'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['reconnect'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' rein', ' recon', ' reass'] matches ['reconsider'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' rein', ' recon', ' reass'] matches ['recreate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' ret'] matches ['redecorate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' rein', ' recon'] matches ['redeem'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['redefine'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' rein', ' reass', ' recon'] matches ['redevelop'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' red', ' recon'] matches ['rediscover'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['redistribute'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['reemerge'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' reass', ' red'] matches ['reengage'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' rein'] matches ['reestablish'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' rein', ' reass', ' recon'] matches ['reevaluate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' rein', ' reass'] matches ['reexamine'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' reass'] matches ['regenerate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' rein'] matches ['regrow'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['reinstall'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' reass', ' res'] matches ['reintegrate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' recon', ' rein'] matches ['reinterpret'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' reass', ' rein'] matches ['reintroduce'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' reass', ' red'] matches ['reinvest'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' rein', ' reass'] matches ['reinvestigate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' red', ' recon'] matches ['relearn'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' reass', ' red'] matches ['relocate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' recon', ' renew'] matches ['remarry'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' renew'] matches ['renegotiate'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' renew'] matches ['reoccur'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' rein'] matches ['reorganize', 'reorganise'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' recon', ' reass'] matches ['republish'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' recon', ' red'] matches ['resend'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' rein', ' recon', ' recreate'] matches ['resolve'] is True
2024-06-11 15:59:01 root INFO     [' re', ' reass', ' rec', ' recon', ' red'] matches ['resubmit'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' red', ' reass', ' rein'] matches ['retell'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['reunite'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' recon', ' red', ' reass'] matches ['reupload'] is True
2024-06-11 15:59:01 root INFO     [' re', ' rec', ' reass', ' red', ' renew'] matches ['rewrite'] is True
2024-06-11 15:59:01 root INFO     re+verb_reg (50) total: defaultdict(<class 'int'>, {False: 529, True: 70})
2024-06-11 15:59:16 root INFO     Tokenizer loaded
2024-06-11 15:59:16 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+ment_irreg', prompt_templates=['To {} results in a', 'To {} brings about a'], prompt_templates_zs=['To {} results in a', 'To {} brings about a'], samples=[RelationSample(subject='accomplish', object=['accomplishment']), RelationSample(subject='achieve', object=['achievement']), RelationSample(subject='acknowledge', object=['acknowledgement']), RelationSample(subject='adjust', object=['adjustment']), RelationSample(subject='advertise', object=['advertisement', 'advertizement']), RelationSample(subject='agree', object=['agreement']), RelationSample(subject='align', object=['alignment']), RelationSample(subject='amend', object=['amendment']), RelationSample(subject='amuse', object=['amusement']), RelationSample(subject='announce', object=['announcement']), RelationSample(subject='appoint', object=['appointment']), RelationSample(subject='arrange', object=['arrangement']), RelationSample(subject='assess', object=['assessment']), RelationSample(subject='assign', object=['assignment']), RelationSample(subject='commit', object=['commitment']), RelationSample(subject='detach', object=['detachment']), RelationSample(subject='develop', object=['development']), RelationSample(subject='disagree', object=['disagreement']), RelationSample(subject='disappoint', object=['disappointment']), RelationSample(subject='displace', object=['displacement']), RelationSample(subject='embarrass', object=['embarrassment']), RelationSample(subject='encourage', object=['encouragement']), RelationSample(subject='endorse', object=['endorsement']), RelationSample(subject='enforce', object=['enforcement']), RelationSample(subject='engage', object=['engagement']), RelationSample(subject='enhance', object=['enhancement']), RelationSample(subject='enjoy', object=['enjoyment']), RelationSample(subject='enlighten', object=['enlightenment']), RelationSample(subject='enroll', object=['enrollment', 'enrolment']), RelationSample(subject='entertain', object=['entertainment']), RelationSample(subject='entitle', object=['entitlement']), RelationSample(subject='equip', object=['equipment']), RelationSample(subject='establish', object=['establishment']), RelationSample(subject='excite', object=['excitement']), RelationSample(subject='fulfil', object=['fulfilment']), RelationSample(subject='fulfill', object=['fulfillment']), RelationSample(subject='harass', object=['harassment']), RelationSample(subject='impair', object=['impairment']), RelationSample(subject='improve', object=['improvement']), RelationSample(subject='infringe', object=['infringement']), RelationSample(subject='invest', object=['investment']), RelationSample(subject='involve', object=['involvement']), RelationSample(subject='manage', object=['management']), RelationSample(subject='punish', object=['punishment']), RelationSample(subject='redevelop', object=['redevelopment']), RelationSample(subject='reimburse', object=['reimbursement']), RelationSample(subject='reinforce', object=['reinforcement']), RelationSample(subject='replace', object=['replacement']), RelationSample(subject='require', object=['requirement']), RelationSample(subject='resent', object=['resentment'])], _domain=None, _range=None)
2024-06-11 15:59:19 root INFO     starting operator prediction
2024-06-11 15:59:19 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in a)
2024-06-11 15:59:19 root INFO     [relation call] using To {} results in a
2024-06-11 15:59:22 root INFO     total operator prediction time: 3.1894986629486084 seconds
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' promotion', ' result'] matches ['accomplishment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' performance', ' development', ' re', ' promotion'] matches ['achievement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' promotion', ' re', ' development', ' participation'] matches ['acknowledgement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', '...', ' result'] matches ['adjustment'] is False
2024-06-11 15:59:24 root INFO     ['\n', '...', ' re', ' ', ' promotion'] matches ['advertisement', 'advertizement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' promotion', '...'] matches ['agreement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' promotion', ' development', ' result'] matches ['alignment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' ', ' re', ' promotion', ' performance'] matches ['amendment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', '...', ' result', ' promotion'] matches ['amusement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' promotion', ' '] matches ['announcement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' ', '...', ' development'] matches ['appointment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' ', '...'] matches ['arrangement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' development', ' re', ' performance', ' promotion'] matches ['assessment'] is False
2024-06-11 15:59:24 root INFO     [' re', '\n', '...', ' development', ' performance'] matches ['assignment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' promotion', ' development', ' rehabilitation'] matches ['commitment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' promotion', '...', ' re', ' development'] matches ['detachment'] is False
2024-06-11 15:59:24 root INFO     [' development', ' rehabilitation', ' promotion', '\n', ' re'] matches ['development'] is True
2024-06-11 15:59:24 root INFO     ['\n', ' re', '...', ' ', ' requirement'] matches ['disagreement'] is False
2024-06-11 15:59:24 root INFO     ['\n', '...', ' promotion', ' re', ' result'] matches ['disappointment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' promotion', ' re', ' result', '...'] matches ['displacement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', '...', ' ', ' promotion'] matches ['embarrassment'] is False
2024-06-11 15:59:24 root INFO     [' re', '\n', ' development', ' promotion', ' participation'] matches ['encouragement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' development', ' promotion', ' re', ' rehabilitation'] matches ['endorsement'] is False
2024-06-11 15:59:24 root INFO     [' re', '\n', ' development', ' compliance', ' requirement'] matches ['enforcement'] is False
2024-06-11 15:59:24 root INFO     [' re', '\n', ' promotion', ' development', ' rehabilitation'] matches ['engagement'] is False
2024-06-11 15:59:24 root INFO     [' development', '\n', ' performance', ' re', ' rehabilitation'] matches ['enhancement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' promotion', ' '] matches ['enjoyment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' rehabilitation', ' performance'] matches ['enlightenment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' promotion', ' ', ' performance'] matches ['enrollment', 'enrolment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' ', '...', ' promotion'] matches ['entertainment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' promotion', ' development', ' rehabilitation'] matches ['entitlement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' promotion', ' performance'] matches ['equipment'] is False
2024-06-11 15:59:24 root INFO     [' development', '\n', ' rehabilitation', ' re', ' conclusion'] matches ['establishment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' performance', ' rehabilitation'] matches ['excitement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' promotion', ' development', ' rehabilitation', ' requirement'] matches ['fulfilment'] is False
2024-06-11 15:59:24 root INFO     [' requirement', '\n', ' development', ' promotion', ' rehabilitation'] matches ['fulfillment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' development', ' re', ' ', '...'] matches ['harassment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' performance', ' promotion'] matches ['impairment'] is False
2024-06-11 15:59:24 root INFO     [' performance', '\n', ' development', ' promotion', ' rehabilitation'] matches ['improvement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' promotion', ' ', ' development'] matches ['infringement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' promotion', ' re', '...', ' result'] matches ['investment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' promotion', '...', ' development'] matches ['involvement'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' performance', '...'] matches ['management'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' ', ' result', ' promotion'] matches ['punishment'] is False
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' promotion', ' '] matches ['redevelopment'] is True
2024-06-11 15:59:24 root INFO     ['\n', ' development', ' re', ' promotion', ' result'] matches ['reimbursement'] is True
2024-06-11 15:59:24 root INFO     ['\n', ' development', ' re', ' promotion', ' result'] matches ['reinforcement'] is True
2024-06-11 15:59:24 root INFO     ['\n', ' re', ' development', ' performance', ' promotion'] matches ['replacement'] is True
2024-06-11 15:59:24 root INFO     [' re', '\n', ' development', ' promotion', '...'] matches ['requirement'] is True
2024-06-11 15:59:24 root INFO     ['\n', ' promotion', ' re', '...', ' '] matches ['resentment'] is True
2024-06-11 15:59:24 root INFO     verb+ment_irreg (50) total: defaultdict(<class 'int'>, {False: 572, True: 77})
2024-06-11 15:59:40 root INFO     Tokenizer loaded
2024-06-11 15:59:40 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun+less_reg', prompt_templates=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], prompt_templates_zs=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], samples=[RelationSample(subject='arm', object=['armless']), RelationSample(subject='art', object=['artless']), RelationSample(subject='bone', object=['boneless']), RelationSample(subject='breath', object=['breathless']), RelationSample(subject='carbon', object=['carbonless']), RelationSample(subject='child', object=['childless']), RelationSample(subject='collar', object=['collarless']), RelationSample(subject='death', object=['deathless']), RelationSample(subject='defence', object=['defenceless', 'defenseless']), RelationSample(subject='effort', object=['effortless']), RelationSample(subject='ego', object=['egoless']), RelationSample(subject='emotion', object=['emotionless']), RelationSample(subject='error', object=['errorless']), RelationSample(subject='expression', object=['expressionless']), RelationSample(subject='faith', object=['faithless']), RelationSample(subject='friction', object=['frictionless']), RelationSample(subject='friend', object=['friendless']), RelationSample(subject='gender', object=['genderless']), RelationSample(subject='goal', object=['goalless']), RelationSample(subject='god', object=['godless']), RelationSample(subject='guile', object=['guileless']), RelationSample(subject='guilt', object=['guiltless']), RelationSample(subject='hair', object=['hairless']), RelationSample(subject='heart', object=['heartless']), RelationSample(subject='heir', object=['heirless']), RelationSample(subject='home', object=['homeless']), RelationSample(subject='law', object=['lawless']), RelationSample(subject='leg', object=['legless']), RelationSample(subject='life', object=['lifeless', 'liveless']), RelationSample(subject='luck', object=['luckless']), RelationSample(subject='meat', object=['meatless']), RelationSample(subject='mirth', object=['mirthless']), RelationSample(subject='money', object=['moneyless']), RelationSample(subject='odor', object=['odorless', 'odourless']), RelationSample(subject='passion', object=['passionless']), RelationSample(subject='path', object=['pathless']), RelationSample(subject='penny', object=['penniless']), RelationSample(subject='remorse', object=['remorseless']), RelationSample(subject='ruth', object=['ruthless']), RelationSample(subject='sensor', object=['sensorless']), RelationSample(subject='sleeve', object=['sleeveless']), RelationSample(subject='soul', object=['soulless']), RelationSample(subject='speech', object=['speechless']), RelationSample(subject='spine', object=['spineless']), RelationSample(subject='tact', object=['tactless']), RelationSample(subject='talent', object=['talentless']), RelationSample(subject='thought', object=['thoughtless']), RelationSample(subject='tooth', object=['toothless']), RelationSample(subject='window', object=['windowless']), RelationSample(subject='wit', object=['witless'])], _domain=None, _range=None)
2024-06-11 15:59:42 root INFO     starting operator prediction
2024-06-11 15:59:42 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Something without {} is)
2024-06-11 15:59:42 root INFO     [relation call] using Something without {} is
2024-06-11 15:59:45 root INFO     total operator prediction time: 3.1682631969451904 seconds
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['armless'] is True
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['artless'] is True
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['boneless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' devoid'] matches ['breathless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', ' un', '\n', ' not'] matches ['carbonless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['childless'] is False
2024-06-11 15:59:48 root INFO     [' without', '\n', ' a', ' un', ' not'] matches ['collarless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', ' un', '\n', ' not'] matches ['deathless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['defenceless', 'defenseless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' not', ' un'] matches ['effortless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['egoless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['emotionless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['errorless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' devoid'] matches ['expressionless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['faithless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' devoid'] matches ['frictionless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', ' un', '\n', ' not'] matches ['friendless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['genderless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', ' un', '\n', ' not'] matches ['goalless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['godless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['guileless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['guiltless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', ' un', '\n', ' not'] matches ['hairless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['heartless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['heirless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['homeless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['lawless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['legless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['lifeless', 'liveless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['luckless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['meatless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' devoid'] matches ['mirthless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['moneyless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' not', ' un'] matches ['odorless', 'odourless'] is False
2024-06-11 15:59:48 root INFO     [' without', '\n', ' a', ' un', ' not'] matches ['passionless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['pathless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['penniless'] is False
2024-06-11 15:59:48 root INFO     [' a', '\n', ' without', ' un', ' not'] matches ['remorseless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' not', ' un'] matches ['ruthless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['sensorless'] is False
2024-06-11 15:59:48 root INFO     [' a', '\n', ' un', ' without', ' not'] matches ['sleeveless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['soulless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['speechless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['spineless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['tactless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', '\n', ' un', ' not'] matches ['talentless'] is False
2024-06-11 15:59:48 root INFO     [' a', ' without', ' un', '\n', ' not'] matches ['thoughtless'] is False
2024-06-11 15:59:48 root INFO     [' without', '\n', ' a', ' not', ' devoid'] matches ['toothless'] is False
2024-06-11 15:59:48 root INFO     [' without', ' a', '\n', ' un', ' not'] matches ['windowless'] is False
2024-06-11 15:59:48 root INFO     [' a', '\n', ' without', ' un', ' not'] matches ['witless'] is False
2024-06-11 15:59:48 root INFO     noun+less_reg (50) total: defaultdict(<class 'int'>, {False: 620, True: 79})
2024-06-11 16:00:04 root INFO     Tokenizer loaded
2024-06-11 16:00:04 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='over+adj_reg', prompt_templates=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], prompt_templates_zs=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], samples=[RelationSample(subject='ambitious', object=['overambitious', 'over-ambitious']), RelationSample(subject='arching', object=['overarching', 'over-arching']), RelationSample(subject='booked', object=['overbooked', 'over-booked']), RelationSample(subject='charged', object=['overcharged', 'over-charged']), RelationSample(subject='compensated', object=['overcompensated', 'over-compensated']), RelationSample(subject='confident', object=['overconfident', 'over-confident']), RelationSample(subject='cooked', object=['overcooked', 'over-cooked']), RelationSample(subject='crowded', object=['overcrowded', 'over-crowded']), RelationSample(subject='developed', object=['overdeveloped', 'over-developed']), RelationSample(subject='done', object=['overdone', 'over-done']), RelationSample(subject='dressed', object=['overdressed', 'over-dressed']), RelationSample(subject='enthusiastic', object=['overenthusiastic', 'over-enthusiastic']), RelationSample(subject='excited', object=['overexcited', 'over-excited']), RelationSample(subject='exposed', object=['overexposed', 'over-exposed']), RelationSample(subject='filled', object=['overfilled', 'over-filled']), RelationSample(subject='grown', object=['overgrown', 'over-grown']), RelationSample(subject='heard', object=['overheard', 'over-heard']), RelationSample(subject='heated', object=['overheated', 'over-heated']), RelationSample(subject='inflated', object=['overinflated', 'over-inflated']), RelationSample(subject='laid', object=['overlaid', 'over-laid']), RelationSample(subject='loaded', object=['overloaded', 'over-loaded']), RelationSample(subject='optimistic', object=['overoptimistic', 'over-optimistic']), RelationSample(subject='paid', object=['overpaid', 'over-paid']), RelationSample(subject='painted', object=['overpainted', 'over-painted']), RelationSample(subject='played', object=['overplayed', 'over-played']), RelationSample(subject='populated', object=['overpopulated', 'over-populated']), RelationSample(subject='powered', object=['overpowered', 'over-powered']), RelationSample(subject='protected', object=['overprotected', 'over-protected']), RelationSample(subject='protective', object=['overprotective', 'over-protective']), RelationSample(subject='qualified', object=['overqualified', 'over-qualified']), RelationSample(subject='represented', object=['overrepresented', 'over-represented']), RelationSample(subject='saturated', object=['oversaturated', 'over-saturated']), RelationSample(subject='shadowed', object=['overshadowed', 'over-shadowed']), RelationSample(subject='simplified', object=['oversimplified', 'over-simplified']), RelationSample(subject='sized', object=['oversized', 'over-sized']), RelationSample(subject='sold', object=['oversold', 'over-sold']), RelationSample(subject='spent', object=['overspent', 'over-spent']), RelationSample(subject='stated', object=['overstated', 'over-stated']), RelationSample(subject='stimulated', object=['overstimulated', 'over-stimulated']), RelationSample(subject='stocked', object=['overstocked', 'over-stocked']), RelationSample(subject='strained', object=['overstrained', 'over-strained']), RelationSample(subject='stressed', object=['overstressed', 'over-stressed']), RelationSample(subject='stretched', object=['overstretched', 'over-stretched']), RelationSample(subject='subscribed', object=['oversubscribed', 'over-subscribed']), RelationSample(subject='taken', object=['overtaken', 'over-taken']), RelationSample(subject='thrown', object=['overthrown', 'over-thrown']), RelationSample(subject='turned', object=['overturned', 'over-turned']), RelationSample(subject='used', object=['overused', 'over-used']), RelationSample(subject='written', object=['overwritten', 'over-written']), RelationSample(subject='zealous', object=['overzealous', 'over-zealous'])], _domain=None, _range=None)
2024-06-11 16:00:06 root INFO     starting operator prediction
2024-06-11 16:00:06 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If something is too {}, it is)
2024-06-11 16:00:06 root INFO     [relation call] using If something is too {}, it is
2024-06-11 16:00:09 root INFO     total operator prediction time: 3.400926351547241 seconds
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overe'] matches ['overambitious', 'over-ambitious'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overarching', 'over-arching'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overd', ' overs', ' overc', ' overly'] matches ['overbooked', 'over-booked'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overcharged', 'over-charged'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overd', ' overly', ' overc', ' overs'] matches ['overcompensated', 'over-compensated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overconfident', 'over-confident'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overcooked', 'over-cooked'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overcrowded', 'over-crowded'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overdeveloped', 'over-developed'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overly', ' overc', ' overd'] matches ['overdone', 'over-done'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overly', ' overc', ' overd'] matches ['overdressed', 'over-dressed'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overe'] matches ['overenthusiastic', 'over-enthusiastic'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overexcited', 'over-excited'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overexposed', 'over-exposed'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overfilled', 'over-filled'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overly', ' overc'] matches ['overgrown', 'over-grown'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overe'] matches ['overheard', 'over-heard'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overheated', 'over-heated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overt'] matches ['overinflated', 'over-inflated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overlaid', 'over-laid'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overloaded', 'over-loaded'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overoptimistic', 'over-optimistic'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overpaid', 'over-paid'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overpainted', 'over-painted'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overd', ' overs', ' overc', ' overly'] matches ['overplayed', 'over-played'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overpopulated', 'over-populated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overpowered', 'over-powered'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overprotected', 'over-protected'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overw'] matches ['overprotective', 'over-protective'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overqualified', 'over-qualified'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overrepresented', 'over-represented'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['oversaturated', 'over-saturated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overshadowed', 'over-shadowed'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overly', ' overc'] matches ['oversimplified', 'over-simplified'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overt'] matches ['oversized', 'over-sized'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overt'] matches ['oversold', 'over-sold'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overspent', 'over-spent'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overstated', 'over-stated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overstimulated', 'over-stimulated'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overly', ' overc'] matches ['overstocked', 'over-stocked'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overstrained', 'over-strained'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overstressed', 'over-stressed'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overc', ' overd', ' overs', ' overly'] matches ['overstretched', 'over-stretched'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overly', ' overc', ' overd'] matches ['oversubscribed', 'over-subscribed'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overly', ' overc'] matches ['overtaken', 'over-taken'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overd', ' overs', ' overc', ' overly'] matches ['overthrown', 'over-thrown'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overly', ' overc'] matches ['overturned', 'over-turned'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overd', ' overly'] matches ['overused', 'over-used'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overd', ' overc', ' overly'] matches ['overwritten', 'over-written'] is True
2024-06-11 16:00:12 root INFO     [' over', ' overs', ' overc', ' overly', ' overd'] matches ['overzealous', 'over-zealous'] is True
2024-06-11 16:00:12 root INFO     over+adj_reg (50) total: defaultdict(<class 'int'>, {False: 620, True: 129})
2024-06-11 16:00:27 root INFO     Tokenizer loaded
2024-06-11 16:00:27 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj+ness_reg', prompt_templates=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], prompt_templates_zs=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], samples=[RelationSample(subject='amazing', object=['amazingness']), RelationSample(subject='attractive', object=['attractiveness']), RelationSample(subject='aware', object=['awareness']), RelationSample(subject='broken', object=['brokenness']), RelationSample(subject='careful', object=['carefulness']), RelationSample(subject='cheap', object=['cheapness']), RelationSample(subject='competitive', object=['competitiveness']), RelationSample(subject='connected', object=['connectedness']), RelationSample(subject='conscious', object=['consciousness']), RelationSample(subject='creative', object=['creativeness']), RelationSample(subject='dangerous', object=['dangerousness']), RelationSample(subject='devoted', object=['devotedness']), RelationSample(subject='directed', object=['directedness']), RelationSample(subject='distinct', object=['distinctness']), RelationSample(subject='distinctive', object=['distinctiveness']), RelationSample(subject='effective', object=['effectiveness']), RelationSample(subject='extensive', object=['extensiveness']), RelationSample(subject='fixed', object=['fixedness']), RelationSample(subject='foreign', object=['foreignness']), RelationSample(subject='happy', object=['happiness']), RelationSample(subject='helpful', object=['helpfulness']), RelationSample(subject='hidden', object=['hiddenness']), RelationSample(subject='hot', object=['hotness']), RelationSample(subject='huge', object=['hugeness']), RelationSample(subject='impressive', object=['impressiveness']), RelationSample(subject='innovative', object=['innovativeness']), RelationSample(subject='interesting', object=['interestingness']), RelationSample(subject='mad', object=['madness']), RelationSample(subject='marked', object=['markedness']), RelationSample(subject='massive', object=['massiveness']), RelationSample(subject='nice', object=['niceness']), RelationSample(subject='obvious', object=['obviousness']), RelationSample(subject='odd', object=['oddness']), RelationSample(subject='prepared', object=['preparedness']), RelationSample(subject='pure', object=['pureness']), RelationSample(subject='random', object=['randomness']), RelationSample(subject='rare', object=['rareness']), RelationSample(subject='reasonable', object=['reasonableness']), RelationSample(subject='related', object=['relatedness']), RelationSample(subject='righteous', object=['righteousness']), RelationSample(subject='sacred', object=['sacredness']), RelationSample(subject='sad', object=['sadness']), RelationSample(subject='same', object=['sameness']), RelationSample(subject='serious', object=['seriousness']), RelationSample(subject='situated', object=['situatedness']), RelationSample(subject='strange', object=['strangeness']), RelationSample(subject='unique', object=['uniqueness']), RelationSample(subject='useful', object=['usefulness']), RelationSample(subject='vast', object=['vastness']), RelationSample(subject='weak', object=['weakness'])], _domain=None, _range=None)
2024-06-11 16:00:30 root INFO     starting operator prediction
2024-06-11 16:00:30 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The state of being {} is)
2024-06-11 16:00:30 root INFO     [relation call] using The state of being {} is
2024-06-11 16:00:33 root INFO     total operator prediction time: 3.294825792312622 seconds
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['amazingness'] is True
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['attractiveness'] is True
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['awareness'] is True
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['brokenness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['carefulness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['cheapness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['competitiveness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['connectedness'] is False
2024-06-11 16:00:35 root INFO     [' being', ' the', '\n', ' a', ' '] matches ['consciousness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' ('] matches ['creativeness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['dangerousness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' a', ' being', ' '] matches ['devotedness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' a', ' being', ' '] matches ['directedness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['distinctness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['distinctiveness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['effectiveness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' ('] matches ['extensiveness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['fixedness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['foreignness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['happiness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['helpfulness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['hiddenness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['hotness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['hugeness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['impressiveness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['innovativeness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['interestingness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['madness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['markedness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['massiveness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['niceness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['obviousness'] is False
2024-06-11 16:00:35 root INFO     [' being', ' the', '\n', ' a', ' '] matches ['oddness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['preparedness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['pureness'] is False
2024-06-11 16:00:35 root INFO     [' being', '\n', ' the', ' a', ' '] matches ['randomness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' being', ' the', ' a', ' '] matches ['rareness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['reasonableness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['relatedness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['righteousness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['sacredness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['sadness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['sameness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['seriousness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['situatedness'] is False
2024-06-11 16:00:35 root INFO     [' the', ' being', '\n', ' a', ' '] matches ['strangeness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['uniqueness'] is False
2024-06-11 16:00:35 root INFO     ['\n', ' the', ' being', ' a', ' '] matches ['usefulness'] is False
2024-06-11 16:00:35 root INFO     [' the', '\n', ' being', ' a', ' '] matches ['vastness'] is False
2024-06-11 16:00:35 root INFO     [' being', ' the', '\n', ' a', ' '] matches ['weakness'] is False
2024-06-11 16:00:35 root INFO     adj+ness_reg (50) total: defaultdict(<class 'int'>, {False: 667, True: 132})
2024-06-11 16:00:51 root INFO     Tokenizer loaded
2024-06-11 16:00:51 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='un+adj_reg', prompt_templates=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], prompt_templates_zs=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], samples=[RelationSample(subject='able', object=['unable']), RelationSample(subject='acceptable', object=['unacceptable']), RelationSample(subject='affected', object=['unaffected']), RelationSample(subject='authorized', object=['unauthorized', 'unauthorised']), RelationSample(subject='available', object=['unavailable']), RelationSample(subject='avoidable', object=['unavoidable']), RelationSample(subject='aware', object=['unaware']), RelationSample(subject='believable', object=['unbelievable']), RelationSample(subject='biased', object=['unbiased']), RelationSample(subject='certain', object=['uncertain']), RelationSample(subject='changed', object=['unchanged']), RelationSample(subject='comfortable', object=['uncomfortable']), RelationSample(subject='conditional', object=['unconditional']), RelationSample(subject='conscious', object=['unconscious']), RelationSample(subject='controlled', object=['uncontrolled']), RelationSample(subject='desirable', object=['undesirable']), RelationSample(subject='employed', object=['unemployed']), RelationSample(subject='expected', object=['unexpected']), RelationSample(subject='finished', object=['unfinished']), RelationSample(subject='forgettable', object=['unforgettable']), RelationSample(subject='fortunate', object=['unfortunate']), RelationSample(subject='happy', object=['unhappy']), RelationSample(subject='healthy', object=['unhealthy']), RelationSample(subject='identified', object=['unidentified']), RelationSample(subject='intended', object=['unintended']), RelationSample(subject='interrupted', object=['uninterrupted']), RelationSample(subject='known', object=['unknown']), RelationSample(subject='lawful', object=['unlawful']), RelationSample(subject='lucky', object=['unlucky']), RelationSample(subject='noticed', object=['unnoticed']), RelationSample(subject='paid', object=['unpaid']), RelationSample(subject='pleasant', object=['unpleasant']), RelationSample(subject='popular', object=['unpopular']), RelationSample(subject='predictable', object=['unpredictable']), RelationSample(subject='published', object=['unpublished']), RelationSample(subject='realistic', object=['unrealistic']), RelationSample(subject='reasonable', object=['unreasonable']), RelationSample(subject='related', object=['unrelated']), RelationSample(subject='reliable', object=['unreliable']), RelationSample(subject='resolved', object=['unresolved']), RelationSample(subject='restricted', object=['unrestricted']), RelationSample(subject='satisfactory', object=['unsatisfactory']), RelationSample(subject='specified', object=['unspecified']), RelationSample(subject='successful', object=['unsuccessful']), RelationSample(subject='suitable', object=['unsuitable']), RelationSample(subject='sustainable', object=['unsustainable']), RelationSample(subject='used', object=['unused']), RelationSample(subject='usual', object=['unusual']), RelationSample(subject='veiled', object=['unveiled']), RelationSample(subject='wanted', object=['unwanted'])], _domain=None, _range=None)
2024-06-11 16:00:53 root INFO     starting operator prediction
2024-06-11 16:00:53 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-11 16:00:53 root INFO     [relation call] using The opposite of {} is
2024-06-11 16:00:57 root INFO     total operator prediction time: 3.181173324584961 seconds
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unacceptable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unf'] matches ['unaffected'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unauthorized', 'unauthorised'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unavailable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' uns', ' unt'] matches ['unavoidable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unaware'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' uns'] matches ['unbelievable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unc', ' non', ' unf'] matches ['unbiased'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['uncertain'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', '\n', ' unt'] matches ['unchanged'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', '\n', ' unt'] matches ['uncomfortable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unc', ' non', ' uns'] matches ['unconditional'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unc', ' non', ' unt'] matches ['unconscious'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unw'] matches ['uncontrolled'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unre'] matches ['undesirable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unemployed'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', '\n'] matches ['unexpected'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unt', ' unc', ' unf'] matches ['unfinished'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', '\n', ' unt'] matches ['unforgettable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', '\n', ' unc'] matches ['unfortunate'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unhappy'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unhealthy'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' in', ' unt'] matches ['unidentified'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unc', ' non', ' unt'] matches ['unintended'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unw', '\n'] matches ['uninterrupted'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unt', ' unc', ' non'] matches ['unknown'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unlawful'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', '\n', ' non', ' unt'] matches ['unlucky'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unf'] matches ['unnoticed'] is True
2024-06-11 16:00:59 root INFO     [' not', ' un', ' non', ' unc', ' unt'] matches ['unpaid'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unpleasant'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unpopular'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unf'] matches ['unpredictable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' unc', ' non', ' unt'] matches ['unpublished'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unf', ' unc'] matches ['unrealistic'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unf'] matches ['unreasonable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unw', '\n'] matches ['unrelated'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unreliable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unresolved'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unf'] matches ['unrestricted'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unsatisfactory'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unspecified'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unsuccessful'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unsuitable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unf', ' unc'] matches ['unsustainable'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unused'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unc'] matches ['unusual'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unt', ' unf'] matches ['unveiled'] is True
2024-06-11 16:00:59 root INFO     [' un', ' not', ' non', ' unre', ' unt'] matches ['unwanted'] is True
2024-06-11 16:00:59 root INFO     un+adj_reg (50) total: defaultdict(<class 'int'>, {False: 667, True: 182})
2024-06-11 16:01:15 root INFO     Tokenizer loaded
2024-06-11 16:01:15 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj+ly_reg', prompt_templates=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], prompt_templates_zs=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], samples=[RelationSample(subject='according', object=['accordingly']), RelationSample(subject='actual', object=['actually']), RelationSample(subject='additional', object=['additionally']), RelationSample(subject='apparent', object=['apparently']), RelationSample(subject='beautiful', object=['beautifully']), RelationSample(subject='clinical', object=['clinically']), RelationSample(subject='creative', object=['creatively']), RelationSample(subject='critical', object=['critically']), RelationSample(subject='cultural', object=['culturally']), RelationSample(subject='decided', object=['decidedly']), RelationSample(subject='different', object=['differently']), RelationSample(subject='digital', object=['digitally']), RelationSample(subject='effective', object=['effectively']), RelationSample(subject='environmental', object=['environmentally']), RelationSample(subject='extensive', object=['extensively']), RelationSample(subject='famous', object=['famously']), RelationSample(subject='federal', object=['federally']), RelationSample(subject='financial', object=['financially']), RelationSample(subject='global', object=['globally']), RelationSample(subject='historical', object=['historically']), RelationSample(subject='huge', object=['hugely']), RelationSample(subject='immediate', object=['immediately']), RelationSample(subject='important', object=['importantly']), RelationSample(subject='increasing', object=['increasingly']), RelationSample(subject='interesting', object=['interestingly']), RelationSample(subject='internal', object=['internally']), RelationSample(subject='international', object=['internationally']), RelationSample(subject='legal', object=['legally']), RelationSample(subject='mental', object=['mentally']), RelationSample(subject='nice', object=['nicely']), RelationSample(subject='obvious', object=['obviously']), RelationSample(subject='physical', object=['physically']), RelationSample(subject='political', object=['politically']), RelationSample(subject='popular', object=['popularly']), RelationSample(subject='practical', object=['practically']), RelationSample(subject='previous', object=['previously']), RelationSample(subject='rare', object=['rarely']), RelationSample(subject='regional', object=['regionally']), RelationSample(subject='serious', object=['seriously']), RelationSample(subject='sexual', object=['sexually']), RelationSample(subject='significant', object=['significantly']), RelationSample(subject='similar', object=['similarly']), RelationSample(subject='strong', object=['strongly']), RelationSample(subject='subsequent', object=['subsequently']), RelationSample(subject='successful', object=['successfully']), RelationSample(subject='traditional', object=['traditionally']), RelationSample(subject='typical', object=['typically']), RelationSample(subject='unique', object=['uniquely']), RelationSample(subject='virtual', object=['virtually']), RelationSample(subject='visual', object=['visually'])], _domain=None, _range=None)
2024-06-11 16:01:17 root INFO     starting operator prediction
2024-06-11 16:01:17 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The adjective form of {} is)
2024-06-11 16:01:17 root INFO     [relation call] using The adjective form of {} is
2024-06-11 16:01:20 root INFO     total operator prediction time: 3.25311279296875 seconds
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' actually', ' effectively'] matches ['accordingly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' ', ' typically', ' significantly', ' generally'] matches ['actually'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' actually', ' typically'] matches ['additionally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' generally', ' '] matches ['apparently'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' ', ' significantly', ' actually', ' typically'] matches ['beautifully'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' generally', ' typically'] matches ['clinically'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' typically', ' actually', ' effectively'] matches ['creatively'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' typically', ' '] matches ['critically'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' typically', ' obviously'] matches ['culturally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' ', ' typically', ' significantly', ' obviously'] matches ['decidedly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' generally', ' '] matches ['differently'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' ', ' obviously'] matches ['digitally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' actually', ' generally'] matches ['effectively'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' typically', ' '] matches ['environmentally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' typically', ' significantly', ' generally'] matches ['extensively'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' typically', ' actually'] matches ['famously'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' typically', ' ', ' actually', ' obviously'] matches ['federally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' typically', ' '] matches ['financially'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' typically', ' '] matches ['globally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' generally', ' typically', ' significantly'] matches ['historically'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' typically', ' effectively'] matches ['hugely'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' ', ' actually', ' typically', ' significantly'] matches ['immediately'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' typically', ' significantly', ' actually', ' generally'] matches ['importantly'] is False
2024-06-11 16:01:23 root INFO     [' significantly', '\n', ' actually', ' generally', ' effectively'] matches ['increasingly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' generally', ' typically'] matches ['interestingly'] is False
2024-06-11 16:01:23 root INFO     [' significantly', '\n', ' actually', ' generally', ' typically'] matches ['internally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' typically', ' effectively'] matches ['internationally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' typically', ' actually', ' '] matches ['legally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' generally', ' typically'] matches ['mentally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' typically', ' obviously'] matches ['nicely'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' ', ' generally'] matches ['obviously'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' typically', ' significantly', ' actually', ' '] matches ['physically'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' typically', ' significantly', ' generally', ' actually'] matches ['politically'] is False
2024-06-11 16:01:23 root INFO     [' significantly', '\n', ' essentially', ' actually', ' typically'] matches ['popularly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' obviously', ' typically', ' '] matches ['practically'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' ', ' generally'] matches ['previously'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' significantly', ' ', ' indeed'] matches ['rarely'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' ', ' significantly', ' generally'] matches ['regionally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' ', ' significantly', ' actually', ' typically'] matches ['seriously'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' ', ' typically'] matches ['sexually'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' typically', ' obviously', ' '] matches ['significantly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' typically', ' ', ' obviously'] matches ['similarly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' effectively', ' '] matches ['strongly'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' actually', ' typically'] matches ['subsequently'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' actually', ' generally'] matches ['successfully'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' actually', ' typically'] matches ['traditionally'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' ', ' obviously', ' actually'] matches ['typically'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' actually', ' effectively', ' significantly', ' essentially'] matches ['uniquely'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' actually', ' effectively', ' obviously'] matches ['virtually'] is False
2024-06-11 16:01:23 root INFO     ['\n', ' significantly', ' typically', ' obviously', ' generally'] matches ['visually'] is False
2024-06-11 16:01:23 root INFO     adj+ly_reg (50) total: defaultdict(<class 'int'>, {False: 717, True: 182})
2024-06-11 16:01:39 root INFO     Tokenizer loaded
2024-06-11 16:01:39 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+er_irreg', prompt_templates=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], prompt_templates_zs=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], samples=[RelationSample(subject='achieve', object=['achiever']), RelationSample(subject='advertise', object=['advertiser']), RelationSample(subject='announce', object=['announcer']), RelationSample(subject='bake', object=['baker']), RelationSample(subject='begin', object=['beginner']), RelationSample(subject='believe', object=['believer']), RelationSample(subject='borrow', object=['borrower']), RelationSample(subject='choreograph', object=['choreographer']), RelationSample(subject='compose', object=['composer']), RelationSample(subject='consume', object=['consumer']), RelationSample(subject='contend', object=['contender']), RelationSample(subject='defend', object=['defender']), RelationSample(subject='deliver', object=['deliverer']), RelationSample(subject='destroy', object=['destroyer']), RelationSample(subject='determine', object=['determiner']), RelationSample(subject='develop', object=['developer']), RelationSample(subject='discover', object=['discoverer']), RelationSample(subject='eat', object=['eater']), RelationSample(subject='entertain', object=['entertainer']), RelationSample(subject='examine', object=['examiner']), RelationSample(subject='explore', object=['explorer']), RelationSample(subject='follow', object=['follower']), RelationSample(subject='interpret', object=['interpreter']), RelationSample(subject='intrude', object=['intruder']), RelationSample(subject='learn', object=['learner']), RelationSample(subject='listen', object=['listener']), RelationSample(subject='lose', object=['loser']), RelationSample(subject='manage', object=['manager']), RelationSample(subject='molest', object=['molester']), RelationSample(subject='mourn', object=['mourner']), RelationSample(subject='observe', object=['observer']), RelationSample(subject='offend', object=['offender']), RelationSample(subject='organise', object=['organiser']), RelationSample(subject='organize', object=['organizer']), RelationSample(subject='perform', object=['performer']), RelationSample(subject='preach', object=['preacher']), RelationSample(subject='promote', object=['promoter']), RelationSample(subject='provide', object=['provider']), RelationSample(subject='publish', object=['publisher']), RelationSample(subject='receive', object=['receiver']), RelationSample(subject='recommend', object=['recommender']), RelationSample(subject='send', object=['sender']), RelationSample(subject='skydive', object=['skydiver']), RelationSample(subject='slay', object=['slayer']), RelationSample(subject='speak', object=['speaker']), RelationSample(subject='subscribe', object=['subscriber']), RelationSample(subject='suffer', object=['sufferer']), RelationSample(subject='teach', object=['teacher']), RelationSample(subject='tell', object=['teller']), RelationSample(subject='write', object=['writer'])], _domain=None, _range=None)
2024-06-11 16:01:41 root INFO     starting operator prediction
2024-06-11 16:01:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you {} something, you are a)
2024-06-11 16:01:41 root INFO     [relation call] using If you {} something, you are a
2024-06-11 16:01:44 root INFO     total operator prediction time: 3.3431875705718994 seconds
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' performer'] matches ['achiever'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' promoter'] matches ['advertiser'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['announcer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' do', ' person', ' teacher'] matches ['baker'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' teacher'] matches ['beginner'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['believer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', " '"] matches ['borrower'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['choreographer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' person', ' ', ' do', ' teacher'] matches ['composer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['consumer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['contender'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' person', ' ', ' performer', ' do'] matches ['defender'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' person', ' ', ' provider', ' m'] matches ['deliverer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' do'] matches ['destroyer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' do', ' m', ' person'] matches ['determiner'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' person', ' ', ' performer', ' do'] matches ['developer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' m', ' person', ' do'] matches ['discoverer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['eater'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' del'] matches ['entertainer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' promoter'] matches ['examiner'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' creator', ' m'] matches ['explorer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['follower'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['interpreter'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', " '"] matches ['intruder'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' do', ' m', ' teacher'] matches ['learner'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' do'] matches ['listener'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' m', ' do', ' person'] matches ['loser'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' creator'] matches ['manager'] is True
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' performer'] matches ['molester'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' del', ' do', ' m'] matches ['mourner'] is True
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' do'] matches ['observer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', '...'] matches ['offender'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' person', ' ', ' provider', ' creator'] matches ['organiser'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' person', ' ', ' provider', ' creator'] matches ['organizer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' performer'] matches ['performer'] is True
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' do'] matches ['preacher'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' creator'] matches ['promoter'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['provider'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' creator', ' do'] matches ['publisher'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' teacher'] matches ['receiver'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['recommender'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['sender'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' performer', ' �', ' person'] matches ['skydiver'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' do', ' m', " '"] matches ['slayer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' do'] matches ['speaker'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' teacher'] matches ['subscriber'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' �'] matches ['sufferer'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' do', ' m'] matches ['teacher'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' do', ' person', ' m'] matches ['teller'] is False
2024-06-11 16:01:46 root INFO     ['\n', ' ', ' person', ' m', ' do'] matches ['writer'] is False
2024-06-11 16:01:46 root INFO     verb+er_irreg (50) total: defaultdict(<class 'int'>, {False: 764, True: 185})
2024-06-11 16:02:02 root INFO     Tokenizer loaded
2024-06-11 16:02:02 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+able_reg', prompt_templates=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], prompt_templates_zs=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], samples=[RelationSample(subject='accept', object=['acceptable']), RelationSample(subject='achieve', object=['achieveable']), RelationSample(subject='adapt', object=['adaptable']), RelationSample(subject='adjust', object=['adjustable']), RelationSample(subject='admire', object=['admirable']), RelationSample(subject='adore', object=['adorable']), RelationSample(subject='advise', object=['advisable']), RelationSample(subject='afford', object=['affordable']), RelationSample(subject='avoid', object=['avoidable']), RelationSample(subject='believe', object=['believeable', 'believable']), RelationSample(subject='consider', object=['considerable']), RelationSample(subject='contain', object=['containable']), RelationSample(subject='define', object=['definable']), RelationSample(subject='deliver', object=['deliverable']), RelationSample(subject='discover', object=['discoverable']), RelationSample(subject='dispose', object=['disposable']), RelationSample(subject='download', object=['downloadable']), RelationSample(subject='edit', object=['editable']), RelationSample(subject='enjoy', object=['enjoyable']), RelationSample(subject='execute', object=['executable']), RelationSample(subject='expand', object=['expandable']), RelationSample(subject='expect', object=['expectable']), RelationSample(subject='explain', object=['explainable']), RelationSample(subject='extend', object=['extendable']), RelationSample(subject='foresee', object=['foreseeable']), RelationSample(subject='identify', object=['identifiable']), RelationSample(subject='imagine', object=['imaginable']), RelationSample(subject='improve', object=['improvable']), RelationSample(subject='inflate', object=['inflatable']), RelationSample(subject='learn', object=['learnable']), RelationSample(subject='maintain', object=['maintainable']), RelationSample(subject='manage', object=['manageable']), RelationSample(subject='observe', object=['observable']), RelationSample(subject='perform', object=['performable']), RelationSample(subject='predict', object=['predictable']), RelationSample(subject='prefer', object=['preferable']), RelationSample(subject='prevent', object=['preventable']), RelationSample(subject='protect', object=['protectable']), RelationSample(subject='publish', object=['publishable']), RelationSample(subject='recognize', object=['recognizable', 'recognisable']), RelationSample(subject='recommend', object=['recommendable']), RelationSample(subject='rely', object=['reliable']), RelationSample(subject='renew', object=['renewable']), RelationSample(subject='replace', object=['replaceable']), RelationSample(subject='represent', object=['representable']), RelationSample(subject='survive', object=['survivable']), RelationSample(subject='sustain', object=['sustainable']), RelationSample(subject='understand', object=['understandable']), RelationSample(subject='vary', object=['variable']), RelationSample(subject='write', object=['writeable', 'writable'])], _domain=None, _range=None)
2024-06-11 16:02:04 root INFO     starting operator prediction
2024-06-11 16:02:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you can {} something, that thing is)
2024-06-11 16:02:04 root INFO     [relation call] using If you can {} something, that thing is
2024-06-11 16:02:08 root INFO     total operator prediction time: 3.412369966506958 seconds
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', ' able', ' '] matches ['acceptable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', '\n'] matches ['achieveable'] is True
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', '\n', ' a'] matches ['adaptable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', ' a', '\n'] matches ['adjustable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' ', '\n'] matches ['admirable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', '\n', ' ', ' a'] matches ['adorable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', ' a', '\n'] matches ['advisable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' ', ' able'] matches ['affordable'] is True
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', '\n'] matches ['avoidable'] is True
2024-06-11 16:02:10 root INFO     [' capable', ' a', ' manageable', '\n', ' '] matches ['believeable', 'believable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', ' '] matches ['considerable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', ' a', '\n'] matches ['containable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' a', ' capable', ' able', ' '] matches ['definable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', '\n', ' able'] matches ['deliverable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', ' possible'] matches ['discoverable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' able', ' manageable', '\n', ' a'] matches ['disposable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', '\n', ' a', ' able'] matches ['downloadable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' able', ' manageable', ' a', '\n'] matches ['editable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' a', ' capable', '\n', ' '] matches ['enjoyable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', ' a', '\n'] matches ['executable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', ' a', '\n'] matches ['expandable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' a', ' manageable', '\n', ' able'] matches ['expectable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', '\n', ' a', ' '] matches ['explainable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', ' a', '\n'] matches ['extendable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', ' able', ' '] matches ['foreseeable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', ' able', ' '] matches ['identifiable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' a', ' manageable', '\n', ' '] matches ['imaginable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', '\n', ' a', ' able'] matches ['improvable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', '\n', ' a'] matches ['inflatable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', '\n', ' '] matches ['learnable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', '\n'] matches ['maintainable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', '\n', ' able'] matches ['manageable'] is True
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', ' a', '\n'] matches ['observable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', ' a', '\n'] matches ['performable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' ', ' a', '\n'] matches ['predictable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', '\n', ' '] matches ['preferable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' ', ' possible', ' able'] matches ['preventable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', ' possible', ' a'] matches ['protectable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', ' a', ' '] matches ['publishable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', ' able', ' '] matches ['recognizable', 'recognisable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', '\n', ' '] matches ['recommendable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', '\n'] matches ['reliable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', ' able', ' '] matches ['renewable'] is False
2024-06-11 16:02:10 root INFO     [' able', ' manageable', ' capable', '\n', ' a'] matches ['replaceable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' able', ' a', ' possible'] matches ['representable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', '\n', ' '] matches ['survivable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', ' able', ' '] matches ['sustainable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' a', '\n', ' '] matches ['understandable'] is False
2024-06-11 16:02:10 root INFO     [' capable', ' manageable', ' able', ' a', '\n'] matches ['variable'] is False
2024-06-11 16:02:10 root INFO     [' manageable', ' capable', ' a', '\n', ' able'] matches ['writeable', 'writable'] is False
2024-06-11 16:02:10 root INFO     verb+able_reg (50) total: defaultdict(<class 'int'>, {False: 804, True: 195})
2024-06-11 16:02:26 root INFO     Tokenizer loaded
2024-06-11 16:02:26 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - part', prompt_templates=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], prompt_templates_zs=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], samples=[RelationSample(subject='academia', object=['college', 'university', 'institute']), RelationSample(subject='apartment', object=['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room']), RelationSample(subject='bird', object=['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat']), RelationSample(subject='brush', object=['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem']), RelationSample(subject='bus', object=['seats', 'conductor', 'window', 'driver', 'roof']), RelationSample(subject='byte', object=['bit']), RelationSample(subject='car', object=['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system']), RelationSample(subject='castle', object=['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall']), RelationSample(subject='cat', object=['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth']), RelationSample(subject='chair', object=['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs']), RelationSample(subject='church', object=['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner']), RelationSample(subject='comb', object=['teeth', 'shaft', 'grip', 'tooth', 'handle']), RelationSample(subject='day', object=['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour']), RelationSample(subject='deer', object=['antler', 'antlers', 'withers', 'flag', 'scut']), RelationSample(subject='dollar', object=['cent']), RelationSample(subject='door', object=['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill']), RelationSample(subject='dress', object=['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener']), RelationSample(subject='filename', object=['extension', 'name']), RelationSample(subject='flower', object=['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium']), RelationSample(subject='gigabit', object=['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit']), RelationSample(subject='gramm', object=['milligram', 'mg', 'grain', 'milligram', 'mcg', 'carat', 'microgram', 'ng', 'dg', 'decigram', 'nanogram', 'metric_grain', 'obolus']), RelationSample(subject='guitar', object=['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard']), RelationSample(subject='gun', object=['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover']), RelationSample(subject='harbor', object=['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='jail', object=['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell']), RelationSample(subject='jewellery', object=['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel']), RelationSample(subject='litre', object=['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre']), RelationSample(subject='movie', object=['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption']), RelationSample(subject='orthography', object=['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling']), RelationSample(subject='piano', object=['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal']), RelationSample(subject='pie', object=['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing']), RelationSample(subject='poem', object=['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry']), RelationSample(subject='pub', object=['bar', 'barroom', 'taproom', 'saloon', 'ginmill']), RelationSample(subject='radio', object=['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set']), RelationSample(subject='railcar', object=['suspension', 'cushion', 'shock', 'shock_absorber', 'suspension_system']), RelationSample(subject='seafront', object=['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='shilling', object=['pence']), RelationSample(subject='shirt', object=['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button']), RelationSample(subject='sonata', object=['movement', 'part']), RelationSample(subject='staircase', object=['step', 'riser', 'landing', 'tread', 'stair', 'stairhead']), RelationSample(subject='sword', object=['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge']), RelationSample(subject='table', object=['tabletop', 'tableware', 'leg', 'legs']), RelationSample(subject='teapot', object=['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter']), RelationSample(subject='telephone', object=['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver']), RelationSample(subject='tonne', object=['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg']), RelationSample(subject='torso', object=['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end']), RelationSample(subject='tripod', object=['leg', 'stand']), RelationSample(subject='typewriter', object=['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer']), RelationSample(subject='window', object=['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame']), RelationSample(subject='womb', object=['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'])], _domain=None, _range=None)
2024-06-11 16:02:28 root INFO     starting operator prediction
2024-06-11 16:02:28 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A part of a {} is a)
2024-06-11 16:02:28 root INFO     [relation call] using A part of a {} is a
2024-06-11 16:02:32 root INFO     total operator prediction time: 3.3213679790496826 seconds
2024-06-11 16:02:34 root INFO     [' part', ' piece', ' p', ' t', ' f'] matches ['college', 'university', 'institute'] is False
2024-06-11 16:02:34 root INFO     [' p', ' part', ' piece', ' f', ' set'] matches ['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' piece', ' ch', ' t'] matches ['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' head', ' f', ' t'] matches ['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' t', ' piece', ' single'] matches ['seats', 'conductor', 'window', 'driver', 'roof'] is False
2024-06-11 16:02:34 root INFO     [' part', ' piece', ' p', ' set', ' t'] matches ['bit'] is False
2024-06-11 16:02:34 root INFO     [' part', ' p', ' piece', ' t', ' body'] matches ['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system'] is True
2024-06-11 16:02:34 root INFO     [' p', ' piece', ' part', ' t', ' single'] matches ['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' t', ' bit', ' piece'] matches ['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' piece', ' t', ' single'] matches ['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs'] is True
2024-06-11 16:02:34 root INFO     [' p', ' t', ' part', ' piece', ' body'] matches ['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner'] is True
2024-06-11 16:02:34 root INFO     [' part', ' piece', ' hole', ' set', ' bit'] matches ['teeth', 'shaft', 'grip', 'tooth', 'handle'] is False
2024-06-11 16:02:34 root INFO     [' p', ' piece', ' part', ' single', ' t'] matches ['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' head', ' f', ' piece'] matches ['antler', 'antlers', 'withers', 'flag', 'scut'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' p', ' part', ' t', ' f'] matches ['cent'] is False
2024-06-11 16:02:34 root INFO     [' part', ' p', ' body', ' piece', ' t'] matches ['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill'] is True
2024-06-11 16:02:34 root INFO     [' t', ' piece', ' p', ' bit', ' part'] matches ['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener'] is True
2024-06-11 16:02:34 root INFO     [' t', ' part', ' piece', ' p', ' f'] matches ['extension', 'name'] is False
2024-06-11 16:02:34 root INFO     [' p', ' part', ' piece', ' t', ' head'] matches ['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium'] is True
2024-06-11 16:02:34 root INFO     [' p', ' piece', ' part', ' t', ' per'] matches ['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit'] is False
2024-06-11 16:02:34 root INFO     [' p', ' part', ' piece', ' t', ' head'] matches ['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' t', ' piece', ' head'] matches ['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover'] is True
2024-06-11 16:02:34 root INFO     [' p', ' t', ' m', ' single', ' part'] matches ['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is False
2024-06-11 16:02:34 root INFO     [' p', ' part', ' piece', ' f', ' t'] matches ['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' part', ' p', ' t', '\n'] matches ['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' part', ' t', ' f', ' p'] matches ['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre'] is False
2024-06-11 16:02:34 root INFO     [' part', ' piece', ' p', ' bit', ' t'] matches ['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption'] is False
2024-06-11 16:02:34 root INFO     [' p', ' part', ' c', ' set', ' t'] matches ['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling'] is True
2024-06-11 16:02:34 root INFO     [' part', ' piece', ' t', ' p', ' body'] matches ['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal'] is True
2024-06-11 16:02:34 root INFO     [' part', ' piece', ' t', ' p', ' c'] matches ['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' piece', ' t', '\n'] matches ['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' t', ' f', ' single'] matches ['bar', 'barroom', 'taproom', 'saloon', 'ginmill'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' t', ' single', ' piece'] matches ['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' t', '\n', ' single'] matches ['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is False
2024-06-11 16:02:34 root INFO     [' p', ' piece', ' part', ' t', ' bit'] matches ['pence'] is True
2024-06-11 16:02:34 root INFO     [' p', ' t', ' piece', ' part', ' c'] matches ['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' part', ' p', ' head', ' t'] matches ['movement', 'part'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' t', ' c', ' piece'] matches ['step', 'riser', 'landing', 'tread', 'stair', 'stairhead'] is True
2024-06-11 16:02:34 root INFO     [' p', ' piece', ' part', ' f', ' t'] matches ['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' part', ' head', ' t', ' p'] matches ['tabletop', 'tableware', 'leg', 'legs'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' t', ' piece', ' sh'] matches ['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter'] is True
2024-06-11 16:02:34 root INFO     [' p', ' part', ' t', ' set', ' head'] matches ['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' part', ' p', ' head', ' t'] matches ['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg'] is False
2024-06-11 16:02:34 root INFO     [' piece', ' part', ' p', ' body', ' t'] matches ['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end'] is True
2024-06-11 16:02:34 root INFO     [' piece', ' t', ' head', ' foot', ' p'] matches ['leg', 'stand'] is False
2024-06-11 16:02:34 root INFO     [' part', ' t', ' p', ' piece', ' f'] matches ['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' piece', ' t', ' set'] matches ['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame'] is True
2024-06-11 16:02:34 root INFO     [' part', ' p', ' piece', ' t', ' single'] matches ['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'] is True
2024-06-11 16:02:34 root INFO     meronyms - part (50) total: defaultdict(<class 'int'>, {False: 817, True: 230})
2024-06-11 16:02:50 root INFO     Tokenizer loaded
2024-06-11 16:02:50 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='synonyms - exact', prompt_templates=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], prompt_templates_zs=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], samples=[RelationSample(subject='airplane', object=['aeroplane', 'plane']), RelationSample(subject='auto', object=['car', 'automobile', 'motorcar']), RelationSample(subject='baby', object=['infant', 'babe']), RelationSample(subject='bicycle', object=['bike', 'wheel', 'cycle']), RelationSample(subject='child', object=['kid', 'youngster', 'minor', 'shaver', 'nipper', 'small_fry', 'tiddler', 'tike', 'tyke', 'fry', 'nestling']), RelationSample(subject='cloth', object=['fabric', 'material', 'textile']), RelationSample(subject='clothes', object=['clothing', 'apparel', 'dress']), RelationSample(subject='confused', object=['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up']), RelationSample(subject='dollars', object=['bucks']), RelationSample(subject='emphasis', object=['accent', 'accentuaion', 'importance', 'stress', 'significance']), RelationSample(subject='father', object=['dad', 'daddy']), RelationSample(subject='flower', object=['blossom', 'bloom']), RelationSample(subject='harbor', object=['seaport', 'haven', 'harbour']), RelationSample(subject='help', object=['aid', 'assist']), RelationSample(subject='hieroglyph', object=['hieroglyphic', 'pictogram']), RelationSample(subject='homogeneous', object=['uniform', 'unvarying']), RelationSample(subject='honest', object=['sincere', 'ingenuous', 'true', 'direct', 'truthful']), RelationSample(subject='identical', object=['same', 'indistinguishable']), RelationSample(subject='incorrect', object=['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false']), RelationSample(subject='intelligent', object=['clever', 'smart']), RelationSample(subject='jewel', object=['gem', 'stone']), RelationSample(subject='lad', object=['chap', 'fellow', 'feller', 'fella', 'gent', 'blighter', 'cuss', 'bloke']), RelationSample(subject='lady', object=['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman']), RelationSample(subject='lazy', object=['indolent', 'faineant', 'otiose', 'slothful', 'work-shy']), RelationSample(subject='list', object=['listing', 'enumeration']), RelationSample(subject='loyal', object=['faithful', 'true', 'dependable', 'devoted', 'reliable']), RelationSample(subject='market', object=['marketplace', 'mart', 'bazaar']), RelationSample(subject='mend', object=['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning']), RelationSample(subject='mesh', object=['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork']), RelationSample(subject='monument', object=['memorial']), RelationSample(subject='mother', object=['mom', 'mommy', 'mum']), RelationSample(subject='murder', object=['slaying', 'slay', 'execution']), RelationSample(subject='new', object=['modern', 'recent']), RelationSample(subject='obsolete', object=['outdated', 'out-of-date', 'superannuated']), RelationSample(subject='organized', object=['arranged', 'configured', 'corporate', 'incorporated', 're-formed', 'reorganized', 'reorganised']), RelationSample(subject='package', object=['parcel', 'pack', 'packet', 'bundle']), RelationSample(subject='phone', object=['telephone', 'cell', 'cellphone', 'smartphone']), RelationSample(subject='portion', object=['part', 'component_part', 'component', 'constituent']), RelationSample(subject='railway', object=['railroad']), RelationSample(subject='rational', object=['logical', 'coherent', 'reasonable', 'sane']), RelationSample(subject='reasonable', object=['sensible']), RelationSample(subject='rock', object=['stone']), RelationSample(subject='shore', object=['coast', 'strand', 'bank', 'beach', '']), RelationSample(subject='snake', object=['serpent', 'ophidian']), RelationSample(subject='sofa', object=['couch', 'lounge']), RelationSample(subject='spouse', object=['partner', 'mate', 'better_half']), RelationSample(subject='style', object=['manner', 'mode', 'fashion', 'way']), RelationSample(subject='sweets', object=['confectionery', 'dessert', 'confection']), RelationSample(subject='villain', object=['scoundrel', 'rascal']), RelationSample(subject='vocabulary', object=['lexicon', 'wordbook', 'dictionary', 'glossary'])], _domain=None, _range=None)
2024-06-11 16:02:52 root INFO     starting operator prediction
2024-06-11 16:02:52 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Another word for {} is )
2024-06-11 16:02:52 root INFO     [relation call] using Another word for {} is 
2024-06-11 16:02:55 root INFO     total operator prediction time: 3.2674009799957275 seconds
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' p'] matches ['aeroplane', 'plane'] is True
2024-06-11 16:02:58 root INFO     [' ', ' a', ' m', ' d', ' p'] matches ['car', 'automobile', 'motorcar'] is True
2024-06-11 16:02:58 root INFO     [' ', ' m', ' d', ' a', ' p'] matches ['infant', 'babe'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' m', ' a', ' p'] matches ['bike', 'wheel', 'cycle'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['clothing', 'apparel', 'dress'] is True
2024-06-11 16:02:58 root INFO     [' ', ' m', ' d', ' a', ' p'] matches ['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up'] is True
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' the', ' m'] matches ['accent', 'accentuaion', 'importance', 'stress', 'significance'] is True
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' l'] matches ['dad', 'daddy'] is True
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['blossom', 'bloom'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' m', ' d', ' b'] matches ['seaport', 'haven', 'harbour'] is False
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' the'] matches ['aid', 'assist'] is True
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' the', ' b'] matches ['hieroglyphic', 'pictogram'] is False
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' p'] matches ['uniform', 'unvarying'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' f'] matches ['sincere', 'ingenuous', 'true', 'direct', 'truthful'] is True
2024-06-11 16:02:58 root INFO     [' ', ' a', ' m', ' p', ' d'] matches ['same', 'indistinguishable'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' the'] matches ['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['clever', 'smart'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' m', ' p'] matches ['gem', 'stone'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman'] is True
2024-06-11 16:02:58 root INFO     [' ', ' d', ' m', ' a', ' l'] matches ['indolent', 'faineant', 'otiose', 'slothful', 'work-shy'] is False
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' the'] matches ['listing', 'enumeration'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['faithful', 'true', 'dependable', 'devoted', 'reliable'] is True
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' m', ' l'] matches ['marketplace', 'mart', 'bazaar'] is True
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' the', ' l'] matches ['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning'] is True
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' m', ' d', ' the'] matches ['memorial'] is True
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' l'] matches ['mom', 'mommy', 'mum'] is True
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' l'] matches ['outdated', 'out-of-date', 'superannuated'] is False
2024-06-11 16:02:58 root INFO     [' ', ' m', ' a', ' d', ' p'] matches ['parcel', 'pack', 'packet', 'bundle'] is True
2024-06-11 16:02:58 root INFO     [' ', ' d', ' m', ' a', ' p'] matches ['telephone', 'cell', 'cellphone', 'smartphone'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' p', ' m', ' d'] matches ['railroad'] is False
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['logical', 'coherent', 'reasonable', 'sane'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' m', ' p'] matches ['sensible'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' m', ' the'] matches ['stone'] is False
2024-06-11 16:02:58 root INFO     [' ', ' m', ' l', ' d', ' a'] matches ['coast', 'strand', 'bank', 'beach', ''] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' m', ' l'] matches ['serpent', 'ophidian'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' the', ' m'] matches ['couch', 'lounge'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' m', ' d', ' l'] matches ['partner', 'mate', 'better_half'] is True
2024-06-11 16:02:58 root INFO     [' ', ' m', ' d', ' a', ' p'] matches ['manner', 'mode', 'fashion', 'way'] is True
2024-06-11 16:02:58 root INFO     [' ', ' a', ' d', ' p', ' m'] matches ['confectionery', 'dessert', 'confection'] is True
2024-06-11 16:02:58 root INFO     [' ', ' d', ' a', ' m', ' p'] matches ['scoundrel', 'rascal'] is False
2024-06-11 16:02:58 root INFO     [' ', ' a', ' m', ' d', ' l'] matches ['lexicon', 'wordbook', 'dictionary', 'glossary'] is True
2024-06-11 16:02:58 root INFO     synonyms - exact (50) total: defaultdict(<class 'int'>, {False: 840, True: 249})
2024-06-11 16:03:14 root INFO     Tokenizer loaded
2024-06-11 16:03:14 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='synonyms - intensity', prompt_templates=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], prompt_templates_zs=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], samples=[RelationSample(subject='afraid', object=['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky']), RelationSample(subject='angry', object=['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething']), RelationSample(subject='ask', object=['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist']), RelationSample(subject='bad', object=['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable']), RelationSample(subject='boring', object=['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome']), RelationSample(subject='cat', object=['lion', 'tiger', 'leopard', 'panther', 'jaguar']), RelationSample(subject='chuckle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='confused', object=['lost', 'bewildered', 'trapped', 'desperate']), RelationSample(subject='creative', object=['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative']), RelationSample(subject='cry', object=['scream', 'shriek', 'screech', 'screeching']), RelationSample(subject='damp', object=['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet']), RelationSample(subject='dinner', object=['feast', 'banquet', 'fiesta']), RelationSample(subject='dislike', object=['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain']), RelationSample(subject='doze', object=['sleep', 'slumber']), RelationSample(subject='drizzle', object=['rain', 'shower', 'raifall', 'deluge']), RelationSample(subject='excited', object=['agitated', 'nervous']), RelationSample(subject='faith', object=['fanatism', 'fanaticism', 'zealotry']), RelationSample(subject='giggle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='guilty', object=['remorseful', 'sorrowful', 'unworthy']), RelationSample(subject='happy', object=['ecstatic', 'enraptured', 'rapturous', 'rapt', 'rhapsodic']), RelationSample(subject='house', object=['palace', 'castle']), RelationSample(subject='hungry', object=['starving', 'famished', 'peckish', 'ravenous', 'starved']), RelationSample(subject='indulge', object=['pamper', 'spoil', 'coddle']), RelationSample(subject='interesting', object=['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling']), RelationSample(subject='irritate', object=['enrage', 'incense', 'infuriate', 'ire', 'mad', 'madden', 'steam', 'umbrage']), RelationSample(subject='jog', object=['run', 'scarper', 'flee', 'fly']), RelationSample(subject='lake', object=['sea', 'ocean']), RelationSample(subject='like', object=['love', 'care', 'fond', 'crush', 'infatuate']), RelationSample(subject='love', object=['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere']), RelationSample(subject='monkey', object=['gorilla']), RelationSample(subject='nap', object=['sleep', 'slumber']), RelationSample(subject='necessary', object=['essential', 'indispensable', 'vital', 'required']), RelationSample(subject='opposed', object=['averse', 'antipathetic', 'antipathetical', 'indisposed', 'loath', 'loth']), RelationSample(subject='pain', object=['torment', 'torture', 'agony']), RelationSample(subject='pony', object=['horse']), RelationSample(subject='poorly', object=['afflicted', 'sick', 'ill', 'stricken']), RelationSample(subject='rain', object=['deluge', 'shower']), RelationSample(subject='sad', object=['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy']), RelationSample(subject='sea', object=['ocean']), RelationSample(subject='snack', object=['meal', 'eat']), RelationSample(subject='sniffles', object=['pneumonia']), RelationSample(subject='soon', object=['immediately', 'promptly', 'straightaway']), RelationSample(subject='strong', object=['powerful', 'forceful', 'super', 'potent']), RelationSample(subject='tasty', object=['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly']), RelationSample(subject='tired', object=['exhausted', 'drained']), RelationSample(subject='unfortunate', object=['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous']), RelationSample(subject='unhappy', object=['miserable', 'suffering', 'wretched']), RelationSample(subject='want', object=['crave', 'hunger', 'thirst', 'starve', 'lust']), RelationSample(subject='warm', object=['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot']), RelationSample(subject='well', object=['flourishing', 'robust', 'booming', 'prospering', 'prosperous', 'thriving'])], _domain=None, _range=None)
2024-06-11 16:03:16 root INFO     starting operator prediction
2024-06-11 16:03:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more intense word for {} is )
2024-06-11 16:03:16 root INFO     [relation call] using A more intense word for {} is 
2024-06-11 16:03:19 root INFO     total operator prediction time: 3.3672471046447754 seconds
2024-06-11 16:03:21 root INFO     [' ', ' d', ' m', ' p', ' g'] matches ['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' m', ' p', ' g'] matches ['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething'] is False
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' f', ' be'] matches ['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' a', ' be'] matches ['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' f', ' p', ' m'] matches ['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' m', ' be', ' p'] matches ['lion', 'tiger', 'leopard', 'panther', 'jaguar'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' m', ' p', ' a'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is False
2024-06-11 16:03:21 root INFO     [' ', ' p', ' m', ' d', ' g'] matches ['lost', 'bewildered', 'trapped', 'desperate'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' a', ' p', ' be'] matches ['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative'] is True
2024-06-11 16:03:21 root INFO     [' ', ' g', ' m', ' be', ' f'] matches ['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet'] is False
2024-06-11 16:03:21 root INFO     [' ', ' m', ' d', ' f', ' p'] matches ['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' f', ' m', ' be'] matches ['sleep', 'slumber'] is False
2024-06-11 16:03:21 root INFO     [' ', ' f', ' d', ' m', ' p'] matches ['rain', 'shower', 'raifall', 'deluge'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' g', ' m'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' g', ' be'] matches ['remorseful', 'sorrowful', 'unworthy'] is False
2024-06-11 16:03:21 root INFO     [' ', ' be', ' p', ' d', ' g'] matches ['palace', 'castle'] is True
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' m', ' g'] matches ['starving', 'famished', 'peckish', 'ravenous', 'starved'] is True
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' m', ' a'] matches ['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' be', ' a', ' g'] matches ['run', 'scarper', 'flee', 'fly'] is False
2024-06-11 16:03:21 root INFO     [' ', ' m', ' d', ' be', ' p'] matches ['sea', 'ocean'] is False
2024-06-11 16:03:21 root INFO     [' ', ' a', ' d', ' p', ' m'] matches ['love', 'care', 'fond', 'crush', 'infatuate'] is False
2024-06-11 16:03:21 root INFO     [' ', ' d', ' f', ' be', ' p'] matches ['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere'] is True
2024-06-11 16:03:21 root INFO     [' ', ' m', ' be', ' d', ' f'] matches ['sleep', 'slumber'] is False
2024-06-11 16:03:21 root INFO     [' ', ' f', ' p', ' be', ' m'] matches ['essential', 'indispensable', 'vital', 'required'] is False
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' f', ' g'] matches ['torment', 'torture', 'agony'] is False
2024-06-11 16:03:21 root INFO     [' ', ' d', ' m', ' be', ' p'] matches ['horse'] is False
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' m', ' g'] matches ['afflicted', 'sick', 'ill', 'stricken'] is False
2024-06-11 16:03:21 root INFO     [' ', ' p', ' m', ' d', ' g'] matches ['deluge', 'shower'] is True
2024-06-11 16:03:21 root INFO     [' ', ' p', ' be', ' m', ' d'] matches ['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy'] is True
2024-06-11 16:03:21 root INFO     [' ', ' m', ' p', ' d', ' be'] matches ['ocean'] is False
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' be', ' f'] matches ['meal', 'eat'] is False
2024-06-11 16:03:21 root INFO     [' ', ' m', ' p', ' d', ' be'] matches ['immediately', 'promptly', 'straightaway'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' g', ' be'] matches ['powerful', 'forceful', 'super', 'potent'] is True
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' m', ' f'] matches ['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' g', ' be', ' p'] matches ['exhausted', 'drained'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' g', ' m'] matches ['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous'] is True
2024-06-11 16:03:21 root INFO     [' ', ' d', ' p', ' m', ' g'] matches ['miserable', 'suffering', 'wretched'] is True
2024-06-11 16:03:21 root INFO     [' ', ' be', ' a', ' p', ' d'] matches ['crave', 'hunger', 'thirst', 'starve', 'lust'] is False
2024-06-11 16:03:21 root INFO     [' ', ' p', ' d', ' be', ' g'] matches ['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot'] is False
2024-06-11 16:03:21 root INFO     synonyms - intensity (50) total: defaultdict(<class 'int'>, {False: 857, True: 271})
2024-06-11 16:03:38 root INFO     Tokenizer loaded
2024-06-11 16:03:38 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hypernyms - misc', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='armchair', object=['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='blender', object=['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='bracelet', object=['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='brooch', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', '']), RelationSample(subject='cake', object=['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity']), RelationSample(subject='computer', object=['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', '']), RelationSample(subject='croissant', object=['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity']), RelationSample(subject='cup', object=['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container']), RelationSample(subject='denim', object=['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='deodorant', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='desk', object=['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='diary', object=['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dishwasher', object=['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dress', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='fridge', object=['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='gasoline', object=['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity']), RelationSample(subject='grapefruit', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='hairnet', object=['net', 'network', 'mesh', 'meshing', 'meshwork', 'fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hairpin', object=['pin', 'fastener', 'fastening', 'holdfast', 'fixing', 'restraint', 'constraint', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hamburger', object=['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='jacket', object=['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='jeans', object=['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='juicer', object=['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='lemon', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='lotion', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='mascara', object=['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='necklace', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notebook', object=['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notepad', object=['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity']), RelationSample(subject='pastry', object=['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='peach', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='perfume', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='photo', object=['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='pie', object=['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='plum', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='postcard', object=['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='shelf', object=['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='shirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sidewalk', object=['walk', 'walkway', 'paseo', 'path', 'way', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='skirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sofa', object=['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='stapler', object=['device', 'machine', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sunscreen', object=['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sweater', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='toaster', object=['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='toothbrush', object=['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tub', object=['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tv', object=['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='vase', object=['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='wristband', object=['band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'])], _domain=None, _range=None)
2024-06-11 16:03:40 root INFO     starting operator prediction
2024-06-11 16:03:40 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-11 16:03:40 root INFO     [relation call] using The {} falls into the category of
2024-06-11 16:03:44 root INFO     total operator prediction time: 3.291093111038208 seconds
2024-06-11 16:03:46 root INFO     [' the', '\n', ' furniture', ' a', ' clothing'] matches ['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' a', ' the', '\n', ' food', ' furniture'] matches ['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' item', ' the', ' a', ' article'] matches ['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' article', ' a', ' item'] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', ''] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' food', ' item'] matches ['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' food', ' item'] matches ['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', ' item', ' article', '\n'] matches ['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container'] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' item', ' a', ' clothing'] matches ['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' clothing', ' food'] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' item', ' the', ' a', '\n', ' accessory'] matches ['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' item', ' the', '\n', ' a', ' article'] matches ['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' food'] matches ['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' item', ' clothing', ' clothes'] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     ['\n', ' a', ' the', ' item', ' food'] matches ['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' appliance'] matches ['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', '\n', ' appliance', ' clothing'] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-11 16:03:46 root INFO     [' the', ' a', '\n', ' item', ' personal'] matches ['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' item', '\n', ' accessory', ' a'] matches ['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', '\n', ' item', ' clothing'] matches ['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' equipment', ' food'] matches ['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', '\n', ' item', ' furniture'] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' item', ' clothing'] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' accessory'] matches ['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' appliance'] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' item', ' the', ' a', ' accessory', '\n'] matches ['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' a', ' the', ' item', '\n', ' food'] matches ['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' item', '\n', ' a', ' food'] matches ['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' furniture'] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' item', ' article'] matches ['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', ' item', ' article', '\n'] matches ['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', '\n', ' food', ' item'] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' furniture', ' home'] matches ['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' item', '\n', ' the', ' a', ' food'] matches ['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' clothing'] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' item', ' article'] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     [' the', ' a', '\n', ' appliance', ' furniture'] matches ['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' appliance', ' furniture'] matches ['device', 'machine', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' appliance'] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-11 16:03:46 root INFO     [' the', '\n', ' a', ' appliance', ' food'] matches ['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' a', ' the', ' appliance', ' equipment'] matches ['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     [' a', ' the', ' item', '\n', ' personal'] matches ['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     ['\n', ' the', ' a', ' item', ' furniture'] matches ['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-11 16:03:46 root INFO     hypernyms - misc (50) total: defaultdict(<class 'int'>, {False: 860, True: 310})
2024-06-11 16:04:02 root INFO     Tokenizer loaded
2024-06-11 16:04:02 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hyponyms - misc', prompt_templates=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], prompt_templates_zs=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], samples=[RelationSample(subject='backpack', object=['daypack', 'kitbag', 'kit_bag']), RelationSample(subject='bag', object=['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag']), RelationSample(subject='bed', object=['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble']), RelationSample(subject='boat', object=['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat']), RelationSample(subject='book', object=['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook']), RelationSample(subject='brush', object=['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush']), RelationSample(subject='burger', object=['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger']), RelationSample(subject='camera', object=['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera']), RelationSample(subject='candy', object=['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg']), RelationSample(subject='car', object=['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand']), RelationSample(subject='church', object=['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk']), RelationSample(subject='citrus', object=['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu']), RelationSample(subject='cloud', object=['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke']), RelationSample(subject='collar', object=['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece']), RelationSample(subject='color', object=['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown']), RelationSample(subject='computer', object=['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad']), RelationSample(subject='container', object=['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag']), RelationSample(subject='cookware', object=['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner']), RelationSample(subject='cup', object=['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail']), RelationSample(subject='cushion', object=['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat']), RelationSample(subject='cutlery', object=['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork']), RelationSample(subject='dessert', object=['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice']), RelationSample(subject='dress', object=['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress']), RelationSample(subject='drum', object=['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka']), RelationSample(subject='emotion', object=['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy']), RelationSample(subject='flask', object=['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask']), RelationSample(subject='guitar', object=['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke']), RelationSample(subject='gun', object=['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling']), RelationSample(subject='jewel', object=['diamond', 'ruby', 'pearl', 'emerald', 'sapphire']), RelationSample(subject='jewelry', object=['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst']), RelationSample(subject='mixer', object=['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk']), RelationSample(subject='month', object=['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']), RelationSample(subject='oven', object=['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor']), RelationSample(subject='painting', object=['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti']), RelationSample(subject='poem', object=['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle']), RelationSample(subject='railway', object=['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail']), RelationSample(subject='season', object=['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek']), RelationSample(subject='seat', object=['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet']), RelationSample(subject='shelf', object=['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm']), RelationSample(subject='shirt', object=['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt']), RelationSample(subject='shoes', object=['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled']), RelationSample(subject='sofa', object=['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab']), RelationSample(subject='song', object=['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song']), RelationSample(subject='spice', object=['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed']), RelationSample(subject='sweater', object=['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck']), RelationSample(subject='tool', object=['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage']), RelationSample(subject='toy', object=['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo']), RelationSample(subject='trousers', object=['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen']), RelationSample(subject='weapon', object=['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire']), RelationSample(subject='weekday', object=['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'])], _domain=None, _range=None)
2024-06-11 16:04:04 root INFO     starting operator prediction
2024-06-11 16:04:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more specific term for a {} is)
2024-06-11 16:04:04 root INFO     [relation call] using A more specific term for a {} is
2024-06-11 16:04:08 root INFO     total operator prediction time: 3.388942003250122 seconds
2024-06-11 16:04:10 root INFO     [' a', ' t', ' p', ' an', ' the'] matches ['daypack', 'kitbag', 'kit_bag'] is False
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' d'] matches ['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' the', ' p'] matches ['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble'] is True
2024-06-11 16:04:10 root INFO     [' a', ' m', ' an', ' t', ' p'] matches ['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' ', ' k'] matches ['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' d'] matches ['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush'] is True
2024-06-11 16:04:10 root INFO     [' a', ' p', ' an', ' d', ' t'] matches ['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' p', ' d', ' m'] matches ['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera'] is True
2024-06-11 16:04:10 root INFO     [' a', ' p', ' an', ' m', ' d'] matches ['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' p', ' '] matches ['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' the', ' m'] matches ['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' m', ' d'] matches ['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' p', ' the'] matches ['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' m', ' ch'] matches ['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' d', ' j'] matches ['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' d', ' an', ' j'] matches ['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' d', ' p'] matches ['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' the', ' d'] matches ['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' b', ' d'] matches ['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' the'] matches ['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' ', ' the'] matches ['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' the'] matches ['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' the', ' '] matches ['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress'] is False
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' p', ' m'] matches ['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' ', ' the'] matches ['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' d', ' m'] matches ['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask'] is True
2024-06-11 16:04:10 root INFO     [' a', ' p', ' t', ' k', ' an'] matches ['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' k'] matches ['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' b'] matches ['diamond', 'ruby', 'pearl', 'emerald', 'sapphire'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' p', ' an', ' c'] matches ['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' d'] matches ['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk'] is False
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' the'] matches ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' k'] matches ['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' ', ' the'] matches ['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' ', ' the'] matches ['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle'] is True
2024-06-11 16:04:10 root INFO     [' a', ' p', ' t', ' an', ' k'] matches ['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' m', ' p'] matches ['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' ', ' the'] matches ['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' ', ' k', ' an'] matches ['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm'] is False
2024-06-11 16:04:10 root INFO     [' a', ' t', ' p', ' ', ' an'] matches ['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' '] matches ['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' ', ' the'] matches ['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab'] is False
2024-06-11 16:04:10 root INFO     [' a', ' ', ' k', ' m', ' t'] matches ['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' an', ' p', ' m'] matches ['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' ', ' an', ' p'] matches ['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck'] is True
2024-06-11 16:04:10 root INFO     [' a', ' p', ' d', ' an', ' k'] matches ['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' p', ' d', ' t'] matches ['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' the', ' t', ' p'] matches ['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen'] is True
2024-06-11 16:04:10 root INFO     [' a', ' an', ' t', ' p', ' m'] matches ['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire'] is True
2024-06-11 16:04:10 root INFO     [' a', ' t', ' the', ' ', ' an'] matches ['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'] is True
2024-06-11 16:04:10 root INFO     hyponyms - misc (50) total: defaultdict(<class 'int'>, {False: 865, True: 355})
2024-06-11 16:04:26 root INFO     Tokenizer loaded
2024-06-11 16:04:26 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hypernyms - animals', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='allosaurus', object=['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='anaconda', object=['snake', 'reptile', 'boa', 'serpent', 'ophidian']), RelationSample(subject='ant', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing']), RelationSample(subject='beaver', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='bee', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing']), RelationSample(subject='beetle', object=['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing']), RelationSample(subject='buffalo', object=['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='butterfly', object=['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing']), RelationSample(subject='cat', object=['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', '']), RelationSample(subject='chicken', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='chimpanzee', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='chinchilla', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='cobra', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='cockroach', object=['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing']), RelationSample(subject='cow', object=['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='coyote', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='deer', object=['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='dog', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='duck', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='eagle', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='falcon', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='fox', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='gibbon', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='goat', object=['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='goose', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='gorilla', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='hawk', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='human', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='jackal', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='jaguar', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='leopard', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='lion', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='mamba', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='mouse', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='orangutan', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='owl', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='pony', object=['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus']), RelationSample(subject='porcupine', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='quail', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='rattlesnake', object=['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian']), RelationSample(subject='squirrel', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='stegosaurus', object=['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='tiger', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='triceratops', object=['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='turkey', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='tyrannosaurus', object=['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='velociraptor', object=['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='viper', object=['snake', 'reptile', 'snake', 'serpent', 'ophidian']), RelationSample(subject='vulture', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='wolf', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'])], _domain=None, _range=None)
2024-06-11 16:04:28 root INFO     starting operator prediction
2024-06-11 16:04:28 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-11 16:04:28 root INFO     [relation call] using The {} falls into the category of
2024-06-11 16:04:31 root INFO     total operator prediction time: 3.3297626972198486 seconds
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' rept'] matches ['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' mammalian', '\n'] matches ['snake', 'reptile', 'boa', 'serpent', 'ophidian'] is False
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' rodent', ' mammalian'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' rodent'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', ' rodent'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' rodent'] matches ['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' rodent'] matches ['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', '\n'] matches ['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' animal', ' mammal', '\n', ' carniv'] matches ['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', ''] is True
2024-06-11 16:04:34 root INFO     [' f', ' animal', ' mammal', ' mammalian', ' bird'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', ' mammalian'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' animal', ' mammal', ' f', ' rodent', ' carniv'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-11 16:04:34 root INFO     [' f', ' animal', ' mammal', ' carniv', ' rodent'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is False
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' rodent', ' carniv'] matches ['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' mammalian', ' carniv'] matches ['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', '\n'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' animal', ' mammal', ' f', ' carniv', ' rodent'] matches ['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' mammalian'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' mammalian'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', ' bird'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' rodent', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-11 16:04:34 root INFO     [' f', ' animal', ' mammal', ' carniv', ' rodent'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', '\n', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' mammalian'] matches ['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', '\n'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', '\n'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', ' bird'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-11 16:04:34 root INFO     [' animal', ' f', ' mammal', ' carniv', ' mammalian'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' rodent', ' carniv'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' rodent', '\n'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' mammalian', ' carniv'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', ' bird'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', '\n', ' mammalian'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is False
2024-06-11 16:04:34 root INFO     [' animal', ' mammal', ' f', ' carniv', ' mammalian'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', '\n'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' animal', ' f', ' mammal', ' carniv', ' rept'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', ' mammalian'] matches ['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' rodent'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-11 16:04:34 root INFO     [' animal', ' f', ' mammal', ' rodent', ' bird'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', ' rodent'] matches ['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian'] is False
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', '\n'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', ' rept'] matches ['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', ' carniv', '\n'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' f', ' animal', '\n', ' carniv'] matches ['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is False
2024-06-11 16:04:34 root INFO     [' animal', ' f', ' mammal', ' carniv', ' rept'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', ' rodent'] matches ['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is False
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', ' rodent'] matches ['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is False
2024-06-11 16:04:34 root INFO     [' f', ' animal', ' mammal', ' carniv', ' mammalian'] matches ['snake', 'reptile', 'snake', 'serpent', 'ophidian'] is False
2024-06-11 16:04:34 root INFO     [' f', ' mammal', ' animal', ' carniv', ' bird'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-11 16:04:34 root INFO     [' mammal', ' animal', ' f', ' carniv', ' rept'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-11 16:04:34 root INFO     hypernyms - animals (50) total: defaultdict(<class 'int'>, {False: 873, True: 397})
2024-06-11 16:04:50 root INFO     Tokenizer loaded
2024-06-11 16:04:50 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='antonyms - binary', prompt_templates=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], prompt_templates_zs=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], samples=[RelationSample(subject='after', object=['before', 'earlier', 'previously']), RelationSample(subject='ahead', object=['behind', 'rear', 'after', 'tail', 'beforehand']), RelationSample(subject='anterior', object=['posterior']), RelationSample(subject='backward', object=['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward']), RelationSample(subject='before', object=['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead']), RelationSample(subject='beginning', object=['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='below', object=['above', 'higher', 'up']), RelationSample(subject='climb', object=['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining']), RelationSample(subject='dead', object=['alive', 'living', 'live']), RelationSample(subject='decrement', object=['increment']), RelationSample(subject='descend', object=['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant']), RelationSample(subject='dive', object=['emerge']), RelationSample(subject='down', object=['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward']), RelationSample(subject='downslope', object=['upslope', 'ascent']), RelationSample(subject='drop', object=['lift', 'pick_up']), RelationSample(subject='dynamic', object=['static', 'still', 'unmoving', 'unchanging']), RelationSample(subject='employ', object=['dismiss', 'fire', 'sack', 'displace', 'terminate']), RelationSample(subject='exit', object=['entrance', 'entranceway', 'entryway', 'entry', 'entree']), RelationSample(subject='fall', object=['rise', 'upward', 'climb']), RelationSample(subject='first', object=['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='forget', object=['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect']), RelationSample(subject='forward', object=['backward', 'back', 'backwards', 'rearward', 'rearwards']), RelationSample(subject='front', object=['back', 'rear', 'forepart']), RelationSample(subject='in', object=['out', 'outer', 'exterior', 'outside']), RelationSample(subject='inbound', object=['outbound']), RelationSample(subject='inhale', object=['exhale']), RelationSample(subject='input', object=['output']), RelationSample(subject='inside', object=['outside', 'exterior', 'out']), RelationSample(subject='interior', object=['exterior', 'outdoor', 'out-of-door', 'outside']), RelationSample(subject='internal', object=['external', 'outer', 'outside']), RelationSample(subject='inverse', object=['reverse', 'reversion', 'reversal', 'turnabout', 'turnaround']), RelationSample(subject='mortal', object=['immortal']), RelationSample(subject='occupied', object=['vacant', 'free']), RelationSample(subject='off', object=['on']), RelationSample(subject='out', object=['in', 'inside']), RelationSample(subject='outward', object=['upward', 'up', 'upwards']), RelationSample(subject='over', object=['under', 'below', 'beneath']), RelationSample(subject='previously', object=['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent']), RelationSample(subject='proceed', object=['retreat', 'return']), RelationSample(subject='rise', object=['sink', 'drop', 'fall']), RelationSample(subject='south', object=['north']), RelationSample(subject='southeast', object=['southwest', 'northeast']), RelationSample(subject='submerge', object=['emerge']), RelationSample(subject='top', object=['bottom', 'underside', 'undersurface']), RelationSample(subject='toward', object=['away', 'off', 'forth', 'aside']), RelationSample(subject='true', object=['false', 'incorrect', 'wrong', 'mistaken']), RelationSample(subject='under', object=['over', 'above', 'up']), RelationSample(subject='up', object=['down', 'downwards', 'downward', 'downwardly']), RelationSample(subject='uphill', object=['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping']), RelationSample(subject='west', object=['east'])], _domain=None, _range=None)
2024-06-11 16:04:52 root INFO     starting operator prediction
2024-06-11 16:04:52 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-11 16:04:52 root INFO     [relation call] using The opposite of {} is
2024-06-11 16:04:55 root INFO     total operator prediction time: 3.1954634189605713 seconds
2024-06-11 16:04:57 root INFO     [' the', '\n', ' not', ' a', ' '] matches ['before', 'earlier', 'previously'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['behind', 'rear', 'after', 'tail', 'beforehand'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['posterior'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' ', ' a'] matches ['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead'] is True
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' a', ' '] matches ['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' ', ' to', ' not'] matches ['above', 'higher', 'up'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['alive', 'living', 'live'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['increment'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['upslope', 'ascent'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['lift', 'pick_up'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' to', ' '] matches ['static', 'still', 'unmoving', 'unchanging'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' to', ' a'] matches ['dismiss', 'fire', 'sack', 'displace', 'terminate'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['entrance', 'entranceway', 'entryway', 'entry', 'entree'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['rise', 'upward', 'climb'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' ', ' not', ' a'] matches ['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['backward', 'back', 'backwards', 'rearward', 'rearwards'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' in'] matches ['back', 'rear', 'forepart'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' to', ' '] matches ['out', 'outer', 'exterior', 'outside'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' a'] matches ['outbound'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' to', ' '] matches ['exhale'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' to', ' '] matches ['output'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' a', ' to'] matches ['outside', 'exterior', 'out'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['exterior', 'outdoor', 'out-of-door', 'outside'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' to', ' a'] matches ['external', 'outer', 'outside'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' ', ' to', ' not'] matches ['reverse', 'reversion', 'reversal', 'turnabout', 'turnaround'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['immortal'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' ', ' to'] matches ['vacant', 'free'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['on'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' in'] matches ['in', 'inside'] is True
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['under', 'below', 'beneath'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' ', ' not', ' to'] matches ['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' to', ' the', ' not', ' '] matches ['retreat', 'return'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' in', ' not'] matches ['sink', 'drop', 'fall'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['north'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' to', ' the', ' ', ' in'] matches ['southwest', 'northeast'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' in', ' '] matches ['emerge'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' ', ' to', ' not'] matches ['bottom', 'underside', 'undersurface'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' a', ' '] matches ['away', 'off', 'forth', 'aside'] is True
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' ', ' a'] matches ['false', 'incorrect', 'wrong', 'mistaken'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' not', ' ', ' to'] matches ['over', 'above', 'up'] is False
2024-06-11 16:04:57 root INFO     [' the', '\n', ' to', ' not', ' in'] matches ['down', 'downwards', 'downward', 'downwardly'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' not', ' '] matches ['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping'] is False
2024-06-11 16:04:57 root INFO     ['\n', ' the', ' to', ' ', ' not'] matches ['east'] is False
2024-06-11 16:04:57 root INFO     antonyms - binary (50) total: defaultdict(<class 'int'>, {False: 918, True: 400})
2024-06-11 16:05:14 root INFO     Tokenizer loaded
2024-06-11 16:05:14 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - substance', prompt_templates=['A {} is made up of', 'A {} is comprised of', '{} is made from'], prompt_templates_zs=['A {} is made up of', 'A {} is comprised of', '{} is made from'], samples=[RelationSample(subject='atmosphere', object=['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone']), RelationSample(subject='bag', object=['leather', 'fabric', 'plastic']), RelationSample(subject='beach', object=['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si']), RelationSample(subject='beard', object=['hair']), RelationSample(subject='body', object=['flesh', 'bones']), RelationSample(subject='boots', object=['leather', 'canvas']), RelationSample(subject='bottle', object=['glass', 'plastic']), RelationSample(subject='bowl', object=['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay']), RelationSample(subject='box', object=['cardboard', 'tin', 'boxwood', 'turkish_boxwood']), RelationSample(subject='bread', object=['flour', 'yeast', '']), RelationSample(subject='bronze', object=['copper', 'tin', 'cu', 'atomic_number_29']), RelationSample(subject='candy', object=['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts']), RelationSample(subject='chocolate', object=['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean']), RelationSample(subject='clothing', object=['fabric', 'leather', '']), RelationSample(subject='cloud', object=['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor']), RelationSample(subject='cocktail', object=['alcohol', 'juice', 'water']), RelationSample(subject='concrete', object=['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si']), RelationSample(subject='desk', object=['wood', 'metal', 'steel']), RelationSample(subject='diamond', object=['carbon']), RelationSample(subject='doorknob', object=['metal', 'steel', 'bronze', 'wood']), RelationSample(subject='flag', object=['fabric', 'paper']), RelationSample(subject='glacier', object=['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice']), RelationSample(subject='glass', object=['silicone']), RelationSample(subject='house', object=['bricks', 'cement', 'wood', 'clay']), RelationSample(subject='ice', object=['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='icicle', object=['ice', 'water']), RelationSample(subject='jam', object=['fruit', 'sugar', 'berries']), RelationSample(subject='jeans', object=['fabric', 'denim']), RelationSample(subject='lawn', object=['grass']), RelationSample(subject='lens', object=['glass', 'plastic']), RelationSample(subject='mirror', object=['glass', 'bronze']), RelationSample(subject='money', object=['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin']), RelationSample(subject='ocean', object=['water']), RelationSample(subject='omelette', object=['eggs', 'egg', 'milk', 'cheese']), RelationSample(subject='pastry', object=['flour', 'egg', 'butter', 'filling']), RelationSample(subject='penny', object=['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin']), RelationSample(subject='pill', object=['medicine', 'drug']), RelationSample(subject='plastic', object=['polymer', 'oil', 'gas', 'coal']), RelationSample(subject='roof', object=['shingles', 'tiles', 'wood', 'metal']), RelationSample(subject='sea', object=['water']), RelationSample(subject='snow', object=['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='spoon', object=['aluminium', 'wood', 'steel']), RelationSample(subject='steel', object=['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron']), RelationSample(subject='table', object=['wood', 'metal', 'plastic']), RelationSample(subject='wall', object=['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud']), RelationSample(subject='water', object=['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='wig', object=['hair']), RelationSample(subject='wine', object=['grapes', 'grape']), RelationSample(subject='wire', object=['metal']), RelationSample(subject='yogurt', object=['milk'])], _domain=None, _range=None)
2024-06-11 16:05:16 root INFO     starting operator prediction
2024-06-11 16:05:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is made up of)
2024-06-11 16:05:16 root INFO     [relation call] using A {} is made up of
2024-06-11 16:05:19 root INFO     total operator prediction time: 3.2658145427703857 seconds
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', '\n'] matches ['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' many'] matches ['leather', 'fabric', 'plastic'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', '\n'] matches ['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' metal'] matches ['hair'] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' metal'] matches ['flesh', 'bones'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' metal'] matches ['leather', 'canvas'] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', '...', ' the', ' metal'] matches ['glass', 'plastic'] is False
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', ' many'] matches ['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', ' many'] matches ['cardboard', 'tin', 'boxwood', 'turkish_boxwood'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', ' many'] matches ['flour', 'yeast', ''] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', '\n'] matches ['copper', 'tin', 'cu', 'atomic_number_29'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' metal'] matches ['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', ' metal'] matches ['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' metal'] matches ['fabric', 'leather', ''] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' many'] matches ['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor'] is True
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', ' metal'] matches ['alcohol', 'juice', 'water'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' metal'] matches ['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', ' metal', '...', ' water'] matches ['wood', 'metal', 'steel'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' metal', ' the', '...'] matches ['carbon'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', '\n'] matches ['metal', 'steel', 'bronze', 'wood'] is False
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', ' many'] matches ['fabric', 'paper'] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' many'] matches ['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' metal'] matches ['bricks', 'cement', 'wood', 'clay'] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', '...', ' the', '\n'] matches ['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', ' metal', '...'] matches ['ice', 'water'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', ' many', ' water', '...'] matches ['fruit', 'sugar', 'berries'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' metal'] matches ['fabric', 'denim'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', '\n'] matches ['grass'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', ' many'] matches ['glass', 'plastic'] is False
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', ' metal'] matches ['glass', 'bronze'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', '\n', ' metal'] matches ['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' many'] matches ['water'] is True
2024-06-11 16:05:21 root INFO     [' a', '...', ' water', ' the', '\n'] matches ['eggs', 'egg', 'milk', 'cheese'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' water', '\n'] matches ['flour', 'egg', 'butter', 'filling'] is False
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', ' metal'] matches ['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', '\n'] matches ['medicine', 'drug'] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' many'] matches ['polymer', 'oil', 'gas', 'coal'] is False
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', ' many', ' metal'] matches ['shingles', 'tiles', 'wood', 'metal'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', '...', ' the', ' many'] matches ['water'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', '...', ' the', ' many'] matches ['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' metal'] matches ['aluminium', 'wood', 'steel'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', ' water', '...', ' metal'] matches ['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', ' metal'] matches ['wood', 'metal', 'plastic'] is True
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', ' metal'] matches ['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud'] is False
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' plastic', '\n'] matches ['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-11 16:05:21 root INFO     [' a', ' the', '...', ' many', ' water'] matches ['hair'] is False
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', '\n'] matches ['grapes', 'grape'] is False
2024-06-11 16:05:21 root INFO     [' a', '...', ' the', ' water', ' metal'] matches ['metal'] is True
2024-06-11 16:05:21 root INFO     [' a', ' water', ' the', '...', '\n'] matches ['milk'] is False
2024-06-11 16:05:21 root INFO     meronyms - substance (50) total: defaultdict(<class 'int'>, {False: 946, True: 421})
2024-06-11 16:05:37 root INFO     Tokenizer loaded
2024-06-11 16:05:37 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - member', prompt_templates=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], prompt_templates_zs=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], samples=[RelationSample(subject='acrobat', object=['troupe']), RelationSample(subject='antelope', object=['herd']), RelationSample(subject='bee', object=['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand']), RelationSample(subject='bird', object=['flock']), RelationSample(subject='book', object=['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting']), RelationSample(subject='calf', object=['cattle', 'herd']), RelationSample(subject='car', object=['train', 'procession']), RelationSample(subject='cat', object=['clowder', 'glaring', 'clutter', 'pounce']), RelationSample(subject='cattle', object=['herd']), RelationSample(subject='christian', object=['congregation', 'church', 'parish']), RelationSample(subject='citizen', object=['citizenry', 'country', 'state']), RelationSample(subject='college', object=['university']), RelationSample(subject='county', object=['state', 'country']), RelationSample(subject='cow', object=['herd']), RelationSample(subject='crow', object=['murder']), RelationSample(subject='division', object=['company', 'business', 'platoon', 'battle_group']), RelationSample(subject='elephant', object=['herd']), RelationSample(subject='employee', object=['staff', 'company']), RelationSample(subject='fish', object=['school']), RelationSample(subject='flower', object=['bouquet', 'bunch']), RelationSample(subject='galaxy', object=['universe']), RelationSample(subject='goose', object=['gaggle']), RelationSample(subject='juror', object=['jury']), RelationSample(subject='kitten', object=['litter']), RelationSample(subject='letter', object=['alphabet']), RelationSample(subject='lion', object=['pride']), RelationSample(subject='listener', object=['audience']), RelationSample(subject='member', object=['club', 'team', 'group', 'band', 'community']), RelationSample(subject='musician', object=['orchestra', 'band']), RelationSample(subject='nomad', object=['horde']), RelationSample(subject='page', object=['book', 'notebook', 'website', 'web-site']), RelationSample(subject='parishioner', object=['parish', 'church']), RelationSample(subject='person', object=['society', 'company', 'party', 'world']), RelationSample(subject='photo', object=['album', 'collection', 'library']), RelationSample(subject='player', object=['team', 'group', 'orchestra']), RelationSample(subject='policeman', object=['police']), RelationSample(subject='secretary', object=['staff']), RelationSample(subject='senator', object=['senate', 'house']), RelationSample(subject='sheep', object=['flock']), RelationSample(subject='shrub', object=['shrubbery']), RelationSample(subject='singer', object=['choir', 'band', 'duo', 'trio', 'quartet']), RelationSample(subject='soldier', object=['army', 'unit', 'division', 'troop']), RelationSample(subject='song', object=['album', 'collection', 'antology', 'library']), RelationSample(subject='spouse', object=['couple', 'relationship', 'family']), RelationSample(subject='star', object=['constellation', 'galaxy']), RelationSample(subject='state', object=['country', 'province']), RelationSample(subject='student', object=['class', 'school']), RelationSample(subject='tree', object=['forest', 'wood', 'grove']), RelationSample(subject='wolf', object=['pack']), RelationSample(subject='word', object=['paragraph', 'sentence', 'text'])], _domain=None, _range=None)
2024-06-11 16:05:40 root INFO     starting operator prediction
2024-06-11 16:05:40 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is a member of a)
2024-06-11 16:05:40 root INFO     [relation call] using A {} is a member of a
2024-06-11 16:05:43 root INFO     total operator prediction time: 3.2953851222991943 seconds
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' gang', ' class'] matches ['troupe'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' community', ' herd', ' tribe'] matches ['herd'] is True
2024-06-11 16:05:45 root INFO     [' family', ' group', ' community', ' society', ' tribe'] matches ['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' community', ' team', ' flock'] matches ['flock'] is True
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' company', ' club'] matches ['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' society', ' team', ' company'] matches ['cattle', 'herd'] is False
2024-06-11 16:05:45 root INFO     [' group', ' herd', ' family', ' community', ' team'] matches ['herd'] is True
2024-06-11 16:05:45 root INFO     [' group', ' family', ' community', ' company', ' society'] matches ['congregation', 'church', 'parish'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' company', ' team', ' community'] matches ['citizenry', 'country', 'state'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' community', ' society'] matches ['university'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' society', ' company'] matches ['state', 'country'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' community', ' society', ' company'] matches ['herd'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' society', ' team', ' community'] matches ['company', 'business', 'platoon', 'battle_group'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' herd', ' society'] matches ['herd'] is True
2024-06-11 16:05:45 root INFO     [' group', ' family', ' company', ' team', ' society'] matches ['staff', 'company'] is True
2024-06-11 16:05:45 root INFO     [' group', ' family', ' community', ' company', ' society'] matches ['school'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' society', ' company'] matches ['bouquet', 'bunch'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' community', ' team', ' club'] matches ['universe'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' community', ' tribe', ' society'] matches ['gaggle'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' nation', ' company'] matches ['jury'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' society', ' flock', ' community'] matches ['litter'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' tribe'] matches ['pride'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' company', ' team', ' society'] matches ['club', 'team', 'group', 'band', 'community'] is True
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' company'] matches ['orchestra', 'band'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' community', ' team', ' bunch'] matches ['book', 'notebook', 'website', 'web-site'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' community', ' company', ' society'] matches ['parish', 'church'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' company', ' community'] matches ['society', 'company', 'party', 'world'] is True
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' company', ' society'] matches ['album', 'collection', 'library'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' society'] matches ['team', 'group', 'orchestra'] is True
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' company', ' community'] matches ['police'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' community', ' company', ' society'] matches ['staff'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' tribe'] matches ['senate', 'house'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' herd', ' team', ' community'] matches ['flock'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' company'] matches ['choir', 'band', 'duo', 'trio', 'quartet'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' company'] matches ['army', 'unit', 'division', 'troop'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' company'] matches ['couple', 'relationship', 'family'] is True
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' community', ' society'] matches ['constellation', 'galaxy'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' community', ' company'] matches ['country', 'province'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' society', ' company'] matches ['class', 'school'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' company', ' community', ' society'] matches ['forest', 'wood', 'grove'] is False
2024-06-11 16:05:45 root INFO     [' group', ' family', ' team', ' community', ' tribe'] matches ['pack'] is False
2024-06-11 16:05:45 root INFO     [' family', ' group', ' team', ' society', ' company'] matches ['paragraph', 'sentence', 'text'] is False
2024-06-11 16:05:45 root INFO     meronyms - member (50) total: defaultdict(<class 'int'>, {False: 979, True: 430})
2024-06-11 16:06:01 root INFO     Tokenizer loaded
2024-06-11 16:06:01 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='UK_city - county', prompt_templates=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], prompt_templates_zs=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], samples=[RelationSample(subject='aberdeen', object=['aberdeenshire']), RelationSample(subject='bath', object=['somerset']), RelationSample(subject='belfast', object=['antrim']), RelationSample(subject='birmingham', object=['midlands']), RelationSample(subject='bradford', object=['yorkshire']), RelationSample(subject='brighton', object=['sussex']), RelationSample(subject='cambridge', object=['cambridgeshire']), RelationSample(subject='canterbury', object=['kent']), RelationSample(subject='cardiff', object=['glamorgan']), RelationSample(subject='carlisle', object=['cumbria']), RelationSample(subject='chester', object=['cheshire']), RelationSample(subject='chichester', object=['sussex']), RelationSample(subject='coventry', object=['midlands']), RelationSample(subject='crawley', object=['sussex']), RelationSample(subject='derby', object=['derbyshire']), RelationSample(subject='dundee', object=['lowlands']), RelationSample(subject='edinburgh', object=['lowlands']), RelationSample(subject='ely', object=['cambridgeshire']), RelationSample(subject='exeter', object=['devon']), RelationSample(subject='glasgow', object=['lowlands']), RelationSample(subject='gloucester', object=['gloucestershire']), RelationSample(subject='hereford', object=['herefordshire']), RelationSample(subject='hull', object=['yorkshire']), RelationSample(subject='inverness', object=['highlands']), RelationSample(subject='lancaster', object=['lancashire']), RelationSample(subject='leeds', object=['yorkshire']), RelationSample(subject='leicester', object=['midlands']), RelationSample(subject='lincoln', object=['lincolnshire']), RelationSample(subject='liverpool', object=['lancashire']), RelationSample(subject='newcastle', object=['northumberland']), RelationSample(subject='newport', object=['gwent']), RelationSample(subject='norwich', object=['norfolk']), RelationSample(subject='nottingham', object=['nottinghamshire']), RelationSample(subject='oxford', object=['oxfordshire']), RelationSample(subject='plymouth', object=['devon']), RelationSample(subject='portsmouth', object=['hampshire']), RelationSample(subject='preston', object=['lancashire']), RelationSample(subject='reading', object=['berkshire']), RelationSample(subject='salford', object=['manchester']), RelationSample(subject='salisbury', object=['wiltshire']), RelationSample(subject='sheffield', object=['yorkshire']), RelationSample(subject='southampton', object=['hampshire']), RelationSample(subject='stirling', object=['stirlingshire']), RelationSample(subject='swansea', object=['glamorgan']), RelationSample(subject='wakefield', object=['yorkshire']), RelationSample(subject='wells', object=['somerset']), RelationSample(subject='winchester', object=['hampshire']), RelationSample(subject='wolverhampton', object=['midlands']), RelationSample(subject='worcester', object=['worcestershire']), RelationSample(subject='york', object=['yorkshire'])], _domain=None, _range=None)
2024-06-11 16:06:04 root INFO     starting operator prediction
2024-06-11 16:06:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (In the United Kingdom, the city of {} is in the county of)
2024-06-11 16:06:04 root INFO     [relation call] using In the United Kingdom, the city of {} is in the county of
2024-06-11 16:06:09 root INFO     total operator prediction time: 4.087081432342529 seconds
2024-06-11 16:06:11 root INFO     [' the', ' sh', ' w', ' west', ' south'] matches ['aberdeenshire'] is False
2024-06-11 16:06:11 root INFO     [' west', ' south', ' mid', ' the', ' north'] matches ['antrim'] is False
2024-06-11 16:06:11 root INFO     [' the', ' west', ' south', ' w', ' north'] matches ['midlands'] is False
2024-06-11 16:06:11 root INFO     [' west', ' the', ' south', ' north', ' k'] matches ['sussex'] is False
2024-06-11 16:06:11 root INFO     [' west', ' the', ' north', ' south', ' sh'] matches ['cambridgeshire'] is False
2024-06-11 16:06:11 root INFO     [' the', ' north', ' west', ' mid', ' sh'] matches ['kent'] is False
2024-06-11 16:06:11 root INFO     [' the', ' west', ' w', ' north', ' e'] matches ['glamorgan'] is False
2024-06-11 16:06:11 root INFO     [' the', ' mid', ' sh', ' north', ' south'] matches ['cumbria'] is False
2024-06-11 16:06:11 root INFO     [' the', ' north', ' west', ' mid', ' sh'] matches ['cheshire'] is False
2024-06-11 16:06:11 root INFO     [' west', ' south', ' the', ' north', ' w'] matches ['midlands'] is False
2024-06-11 16:06:11 root INFO     [' north', ' west', ' mid', ' south', ' sh'] matches ['derbyshire'] is False
2024-06-11 16:06:11 root INFO     [' north', ' south', ' the', ' west', ' sh'] matches ['cambridgeshire'] is False
2024-06-11 16:06:11 root INFO     [' the', ' mid', ' w', ' north', ' south'] matches ['devon'] is False
2024-06-11 16:06:11 root INFO     [' the', ' west', ' mid', ' sh', ' north'] matches ['gloucestershire'] is False
2024-06-11 16:06:11 root INFO     [' the', ' w', ' west', ' south', ' north'] matches ['herefordshire'] is False
2024-06-11 16:06:11 root INFO     [' mid', ' west', ' south', ' the', ' north'] matches ['highlands'] is False
2024-06-11 16:06:11 root INFO     [' west', ' the', ' south', ' north', ' sh'] matches ['lancashire'] is False
2024-06-11 16:06:11 root INFO     [' west', ' the', ' north', ' south', ' east'] matches ['yorkshire'] is False
2024-06-11 16:06:11 root INFO     [' south', ' west', ' the', ' sh', ' w'] matches ['midlands'] is False
2024-06-11 16:06:11 root INFO     [' the', ' sh', ' e', ' west', ' north'] matches ['lincolnshire'] is False
2024-06-11 16:06:11 root INFO     [' west', ' north', ' south', ' the', ' w'] matches ['lancashire'] is False
2024-06-11 16:06:11 root INFO     [' w', ' the', ' west', ' mid', ' sh'] matches ['northumberland'] is False
2024-06-11 16:06:11 root INFO     [' west', ' the', ' south', ' sh', ' mid'] matches ['norfolk'] is False
2024-06-11 16:06:11 root INFO     [' the', ' mid', ' west', ' w', ' south'] matches ['nottinghamshire'] is False
2024-06-11 16:06:11 root INFO     [' west', ' north', ' south', ' the', ' east'] matches ['oxfordshire'] is False
2024-06-11 16:06:11 root INFO     [' south', ' west', ' north', ' the', ' mid'] matches ['devon'] is False
2024-06-11 16:06:11 root INFO     [' the', ' south', ' mid', ' north', ' l'] matches ['lancashire'] is True
2024-06-11 16:06:11 root INFO     [' mid', ' w', ' the', ' north', ' west'] matches ['berkshire'] is False
2024-06-11 16:06:11 root INFO     [' the', ' west', ' mid', ' sh', ' south'] matches ['manchester'] is False
2024-06-11 16:06:11 root INFO     [' west', ' the', ' north', ' mid', ' south'] matches ['yorkshire'] is False
2024-06-11 16:06:11 root INFO     [' w', ' the', ' west', ' mid', ' south'] matches ['hampshire'] is False
2024-06-11 16:06:11 root INFO     [' the', ' west', ' south', ' north', ' mid'] matches ['midlands'] is True
2024-06-11 16:06:11 root INFO     [' sh', ' the', ' mid', ' l', ' w'] matches ['worcestershire'] is True
2024-06-11 16:06:11 root INFO     [' sh', ' the', ' west', ' k', ' north'] matches ['yorkshire'] is False
2024-06-11 16:06:11 root INFO     UK_city - county (50) total: defaultdict(<class 'int'>, {False: 1010, True: 433})
2024-06-11 16:06:27 root INFO     Tokenizer loaded
2024-06-11 16:06:27 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - sound', prompt_templates=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], prompt_templates_zs=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], samples=[RelationSample(subject='alpaca', object=['bray']), RelationSample(subject='bear', object=['growl']), RelationSample(subject='bee', object=['buzz', 'hum']), RelationSample(subject='beetle', object=['drone']), RelationSample(subject='cat', object=['meow', 'meu', 'purr', 'caterwaul']), RelationSample(subject='cattle', object=['moo', 'bellow', 'low']), RelationSample(subject='chicken', object=['cluck', 'crow', 'cock-a-doodle-doo']), RelationSample(subject='chimpanzee', object=['scream']), RelationSample(subject='cicada', object=['buzz']), RelationSample(subject='coyote', object=['howl']), RelationSample(subject='cricket', object=['chirp']), RelationSample(subject='crow', object=['caw']), RelationSample(subject='deer', object=['bellow']), RelationSample(subject='dog', object=['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof']), RelationSample(subject='donkey', object=['bray', 'hee-haw']), RelationSample(subject='duck', object=['quack']), RelationSample(subject='elephant', object=['trumpet']), RelationSample(subject='elk', object=['bellow']), RelationSample(subject='ferret', object=['dook']), RelationSample(subject='fly', object=['buzz']), RelationSample(subject='fox', object=['howl', 'yelp']), RelationSample(subject='frog', object=['ribbit', 'croak']), RelationSample(subject='goat', object=['bleat']), RelationSample(subject='gorilla', object=['grunt', 'scream']), RelationSample(subject='hornet', object=['buzz']), RelationSample(subject='horse', object=['neigh', 'snort', 'whinny']), RelationSample(subject='hound', object=['bark', 'howl', 'bay']), RelationSample(subject='hyena', object=['laugh']), RelationSample(subject='leopard', object=['growl']), RelationSample(subject='lion', object=['roar', 'growl']), RelationSample(subject='magpie', object=['chatter']), RelationSample(subject='mallard', object=['quack']), RelationSample(subject='monkey', object=['chatter', 'gibber', 'howl', 'scream']), RelationSample(subject='moose', object=['bellow']), RelationSample(subject='mouse', object=['squeak']), RelationSample(subject='mule', object=['bray', 'hee-haw']), RelationSample(subject='pig', object=['oink', 'grunt', 'gruff', 'squeal']), RelationSample(subject='pigeon', object=['coo']), RelationSample(subject='rat', object=['squeak']), RelationSample(subject='raven', object=['caw']), RelationSample(subject='seal', object=['bark']), RelationSample(subject='sheep', object=['baa', 'bleat']), RelationSample(subject='snake', object=['hiss']), RelationSample(subject='songbird', object=['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter']), RelationSample(subject='tiger', object=['growl', 'roar']), RelationSample(subject='toad', object=['ribbit', 'croak']), RelationSample(subject='turkey', object=['gobble']), RelationSample(subject='wasp', object=['buzz']), RelationSample(subject='whale', object=['sing']), RelationSample(subject='wolf', object=['howl'])], _domain=None, _range=None)
2024-06-11 16:06:29 root INFO     starting operator prediction
2024-06-11 16:06:29 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The sound that a {} makes is called a)
2024-06-11 16:06:29 root INFO     [relation call] using The sound that a {} makes is called a
2024-06-11 16:06:33 root INFO     total operator prediction time: 3.450651168823242 seconds
2024-06-11 16:06:35 root INFO     [' m', ' h', ' b', ' me', ' squ'] matches ['bray'] is True
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' whistle', ' cry', ' ch'] matches ['growl'] is False
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' whistle', ' ch', ' h'] matches ['buzz', 'hum'] is True
2024-06-11 16:06:35 root INFO     [' m', ' cry', ' whistle', ' h', ' roar'] matches ['meow', 'meu', 'purr', 'caterwaul'] is True
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' squ', ' ch', ' whistle'] matches ['moo', 'bellow', 'low'] is True
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' scream', ' cry', ' roar'] matches ['cluck', 'crow', 'cock-a-doodle-doo'] is False
2024-06-11 16:06:35 root INFO     [' m', ' cry', ' ch', ' b', ' roar'] matches ['scream'] is False
2024-06-11 16:06:35 root INFO     [' m', ' b', ' wh', ' cry', ' me'] matches ['buzz'] is True
2024-06-11 16:06:35 root INFO     [' m', ' ch', ' b', ' whistle', ' roar'] matches ['howl'] is False
2024-06-11 16:06:35 root INFO     [' roar', ' whistle', ' squ', ' ch', ' m'] matches ['chirp'] is True
2024-06-11 16:06:35 root INFO     [' m', ' ch', ' squ', ' whistle', ' cry'] matches ['caw'] is False
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' ch', ' roar', ' wh'] matches ['bellow'] is False
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' cry', ' roar', ' b'] matches ['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof'] is True
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' br', ' me', ' b'] matches ['bray', 'hee-haw'] is True
2024-06-11 16:06:35 root INFO     [' roar', ' m', ' b', ' whistle', ' cry'] matches ['quack'] is False
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' whistle', ' ch', ' cry'] matches ['trumpet'] is False
2024-06-11 16:06:35 root INFO     [' m', ' cry', ' roar', ' b', ' wh'] matches ['bellow'] is True
2024-06-11 16:06:35 root INFO     [' m', ' h', ' wh', ' me', ' roar'] matches ['buzz'] is False
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' ch', ' h', ' roar'] matches ['howl', 'yelp'] is True
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' roar', ' h', ' b'] matches ['ribbit', 'croak'] is False
2024-06-11 16:06:35 root INFO     [' roar', ' whistle', ' m', ' cry', ' b'] matches ['bleat'] is True
2024-06-11 16:06:35 root INFO     [' m', ' b', ' roar', ' wh', ' ch'] matches ['grunt', 'scream'] is False
2024-06-11 16:06:35 root INFO     [' m', ' h', ' ch', ' me', ' sn'] matches ['buzz'] is False
2024-06-11 16:06:35 root INFO     [' m', ' wh', ' roar', ' whistle', ' squ'] matches ['neigh', 'snort', 'whinny'] is True
2024-06-11 16:06:35 root INFO     [' m', ' b', ' me', ' ch', ' br'] matches ['bark', 'howl', 'bay'] is True
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' whistle', ' ch', ' cry'] matches ['roar', 'growl'] is True
2024-06-11 16:06:35 root INFO     [' squ', ' sn', ' m', ' ch', ' h'] matches ['chatter'] is True
2024-06-11 16:06:35 root INFO     [' m', ' sn', ' wh', ' cry', ' h'] matches ['quack'] is False
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' whistle', ' cry', ' ch'] matches ['chatter', 'gibber', 'howl', 'scream'] is True
2024-06-11 16:06:35 root INFO     [' m', ' roar', ' whistle', ' wh', ' cry'] matches ['bellow'] is False
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' squ', ' h', ' cry'] matches ['squeak'] is True
2024-06-11 16:06:35 root INFO     [' cry', ' m', ' squ', ' roar', ' br'] matches ['bray', 'hee-haw'] is True
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' squ', ' cry', ' sn'] matches ['oink', 'grunt', 'gruff', 'squeal'] is True
2024-06-11 16:06:35 root INFO     [' m', ' sn', ' cry', ' whistle', ' squ'] matches ['coo'] is False
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' squ', ' ch', ' cry'] matches ['squeak'] is True
2024-06-11 16:06:35 root INFO     [' m', ' ch', ' b', ' h', ' squ'] matches ['caw'] is False
2024-06-11 16:06:35 root INFO     [' m', ' cry', ' b', ' scream', ' bark'] matches ['bark'] is True
2024-06-11 16:06:35 root INFO     [' whistle', ' roar', ' cry', ' m', ' squ'] matches ['baa', 'bleat'] is False
2024-06-11 16:06:35 root INFO     [' m', ' whistle', ' roar', ' wh', ' b'] matches ['hiss'] is False
2024-06-11 16:06:35 root INFO     [' m', ' ch', ' squ', ' h', ' b'] matches ['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter'] is True
2024-06-11 16:06:35 root INFO     [' roar', ' m', ' whistle', ' wh', ' cry'] matches ['growl', 'roar'] is True
2024-06-11 16:06:35 root INFO     [' b', ' wh', ' squ', ' m', ' cry'] matches ['ribbit', 'croak'] is False
2024-06-11 16:06:35 root INFO     [' m', ' b', ' bell', ' whistle', ' roar'] matches ['gobble'] is False
2024-06-11 16:06:35 root INFO     [' m', ' b', ' squ', ' ch', ' whistle'] matches ['buzz'] is True
2024-06-11 16:06:35 root INFO     [' roar', ' whistle', ' m', ' ch', ' cry'] matches ['howl'] is False
2024-06-11 16:06:35 root INFO     animal - sound (50) total: defaultdict(<class 'int'>, {False: 1031, True: 457})
2024-06-11 16:06:51 root INFO     Tokenizer loaded
2024-06-11 16:06:51 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - shelter', prompt_templates=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], prompt_templates_zs=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], samples=[RelationSample(subject='ant', object=['anthill', 'insectarium', 'terrarium', 'formicarium']), RelationSample(subject='ape', object=['grove', 'tree', 'cage']), RelationSample(subject='baboon', object=['grove', 'tree', 'cage']), RelationSample(subject='bat', object=['cave', 'cage']), RelationSample(subject='bear', object=['den', 'cage']), RelationSample(subject='beaver', object=['dam', 'river', 'pen']), RelationSample(subject='bee', object=['hive']), RelationSample(subject='cattle', object=['barn', 'coral']), RelationSample(subject='chimpanzee', object=['grove', 'tree', 'cage']), RelationSample(subject='chinchilla', object=['nest', 'cage']), RelationSample(subject='cockroach', object=['nest']), RelationSample(subject='cricket', object=['nest']), RelationSample(subject='crocodile', object=['river', 'lake', 'pool']), RelationSample(subject='crow', object=['nest', 'cage']), RelationSample(subject='dog', object=['doghouse', 'home', 'den', 'kennel']), RelationSample(subject='dolphin', object=['sea', 'sanctuary']), RelationSample(subject='duck', object=['pond', 'nest']), RelationSample(subject='fish', object=['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary']), RelationSample(subject='fly', object=['nest']), RelationSample(subject='fox', object=['den', 'cage']), RelationSample(subject='goldfish', object=['pond', 'bowl', 'aquarium', 'sanctuary']), RelationSample(subject='gorilla', object=['grove', 'tree', 'cage']), RelationSample(subject='hamster', object=['nest', 'cage']), RelationSample(subject='hedgehog', object=['nest', 'hedge', 'pen']), RelationSample(subject='herring', object=['sea', 'sanctuary']), RelationSample(subject='hippopotamus', object=['river', 'lake', 'pen']), RelationSample(subject='hornet', object=['nest']), RelationSample(subject='horse', object=['stable', 'range', 'paddock', 'corral']), RelationSample(subject='insect', object=['nest', 'cage', 'box']), RelationSample(subject='lion', object=['den', 'cage', 'savannah']), RelationSample(subject='locust', object=['nest']), RelationSample(subject='mallard', object=['nest', 'pond']), RelationSample(subject='mole', object=['hole', 'nest']), RelationSample(subject='monkey', object=['tree', 'grove', 'cage']), RelationSample(subject='mouse', object=['nest', 'cage']), RelationSample(subject='pig', object=['sty', 'pigsty', 'pen', 'pigpen']), RelationSample(subject='rabbit', object=['burrow', 'warren', 'hutch', 'cage']), RelationSample(subject='rat', object=['nest', 'cage']), RelationSample(subject='raven', object=['nest', 'cage']), RelationSample(subject='scorpion', object=['nest', 'aquarium', 'terrarium']), RelationSample(subject='seal', object=['den', 'aquarium', 'sea']), RelationSample(subject='snake', object=['nest', 'pit', 'acquarium']), RelationSample(subject='spider', object=['web', 'acquarium', 'terrarium']), RelationSample(subject='termite', object=['hill', 'terrarium']), RelationSample(subject='tiger', object=['den', 'cage']), RelationSample(subject='trout', object=['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank']), RelationSample(subject='wasp', object=['nest']), RelationSample(subject='whale', object=['sea', 'sanctuary']), RelationSample(subject='wolf', object=['den', 'cage']), RelationSample(subject='woodchuck', object=['hole'])], _domain=None, _range=None)
2024-06-11 16:06:53 root INFO     starting operator prediction
2024-06-11 16:06:53 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The place {} lives in is called)
2024-06-11 16:06:53 root INFO     [relation call] using The place {} lives in is called
2024-06-11 16:06:56 root INFO     total operator prediction time: 3.3088395595550537 seconds
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['anthill', 'insectarium', 'terrarium', 'formicarium'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['grove', 'tree', 'cage'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' home', ' house'] matches ['cave', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' home', ' house'] matches ['den', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['dam', 'river', 'pen'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['hive'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' house', ' cave'] matches ['barn', 'coral'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' house', ' cave'] matches ['grove', 'tree', 'cage'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' house', ' home', ' cave'] matches ['nest', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' house', ' home'] matches ['nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['river', 'lake', 'pool'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' hole'] matches ['nest', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' house', ' home'] matches ['doghouse', 'home', 'den', 'kennel'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['sea', 'sanctuary'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['pond', 'nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' home', ' hole'] matches ['den', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['pond', 'bowl', 'aquarium', 'sanctuary'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' hole'] matches ['grove', 'tree', 'cage'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' den', ' cave', ' house'] matches ['nest', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['sea', 'sanctuary'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' bur'] matches ['river', 'lake', 'pen'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['stable', 'range', 'paddock', 'corral'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' den', ' house', ' cave'] matches ['nest', 'cage', 'box'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' home', ' house'] matches ['den', 'cage', 'savannah'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' house', ' cave', ' home'] matches ['nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['nest', 'pond'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' hole'] matches ['hole', 'nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' den', ' cave', ' house'] matches ['tree', 'grove', 'cage'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' hole', ' home', ' cave'] matches ['nest', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['sty', 'pigsty', 'pen', 'pigpen'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' den', ' hole', ' cave'] matches ['burrow', 'warren', 'hutch', 'cage'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['nest', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' hole', ' cave'] matches ['nest', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['nest', 'aquarium', 'terrarium'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' home', ' house'] matches ['den', 'aquarium', 'sea'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' den', ' cave', ' house'] matches ['nest', 'pit', 'acquarium'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' cave', ' home', ' den', ' house'] matches ['web', 'acquarium', 'terrarium'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' den', ' cave', ' house'] matches ['hill', 'terrarium'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' bur'] matches ['den', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' home', ' cave', ' den', ' house'] matches ['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' house', ' cave'] matches ['nest'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' cave', ' house'] matches ['sea', 'sanctuary'] is False
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' cave', ' home', ' bur'] matches ['den', 'cage'] is True
2024-06-11 16:06:59 root INFO     [' nest', ' den', ' home', ' house', ' cave'] matches ['hole'] is False
2024-06-11 16:06:59 root INFO     animal - shelter (50) total: defaultdict(<class 'int'>, {False: 1053, True: 483})
2024-06-11 16:07:15 root INFO     Tokenizer loaded
2024-06-11 16:07:15 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='name - nationality', prompt_templates=['{} was', '{} identified nationally as', '{} identifies as'], prompt_templates_zs=['{} was', '{} identified nationally as', '{} identifies as'], samples=[RelationSample(subject='aristotle', object=['greek']), RelationSample(subject='balzac', object=['french']), RelationSample(subject='beethoven', object=['german']), RelationSample(subject='caesar', object=['roman']), RelationSample(subject='confucius', object=['chinese']), RelationSample(subject='copernicus', object=['polish']), RelationSample(subject='darwin', object=['english', 'british']), RelationSample(subject='depp', object=['american']), RelationSample(subject='descartes', object=['french']), RelationSample(subject='dickens', object=['english', 'british']), RelationSample(subject='dostoyevsky', object=['russian']), RelationSample(subject='edison', object=['american']), RelationSample(subject='einstein', object=['jewish', 'german', 'american']), RelationSample(subject='euclid', object=['greek']), RelationSample(subject='fermi', object=['italian']), RelationSample(subject='galilei', object=['italian']), RelationSample(subject='gorbachev', object=['soviet', 'russian']), RelationSample(subject='hawking', object=['english', 'british']), RelationSample(subject='hegel', object=['german']), RelationSample(subject='hitler', object=['german', 'austrian']), RelationSample(subject='homer', object=['greek']), RelationSample(subject='hume', object=['scottish', 'british']), RelationSample(subject='jolie', object=['american']), RelationSample(subject='kant', object=['german']), RelationSample(subject='kepler', object=['german']), RelationSample(subject='lavoisier', object=['french']), RelationSample(subject='leibniz', object=['german']), RelationSample(subject='lenin', object=['soviet', 'russian']), RelationSample(subject='lennon', object=['english', 'british']), RelationSample(subject='lincoln', object=['american']), RelationSample(subject='locke', object=['english', 'british']), RelationSample(subject='machiavelli', object=['italian']), RelationSample(subject='marx', object=['german']), RelationSample(subject='maxwell', object=['scottish', 'british']), RelationSample(subject='mencius', object=['chinese']), RelationSample(subject='michelangelo', object=['italian']), RelationSample(subject='mozart', object=['german', 'austrian']), RelationSample(subject='napoleon', object=['french', 'corsican', 'italian']), RelationSample(subject='newton', object=['english', 'british']), RelationSample(subject='pascal', object=['french']), RelationSample(subject='plato', object=['greek']), RelationSample(subject='raphael', object=['italian']), RelationSample(subject='rousseau', object=['french']), RelationSample(subject='spinoza', object=['dutch']), RelationSample(subject='stalin', object=['soviet', 'georgian']), RelationSample(subject='strauss', object=['austrian']), RelationSample(subject='tchaikovsky', object=['russian']), RelationSample(subject='tolstoi', object=['russian']), RelationSample(subject='truman', object=['american']), RelationSample(subject='wagner', object=['german'])], _domain=None, _range=None)
2024-06-11 16:07:17 root INFO     starting operator prediction
2024-06-11 16:07:17 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was)
2024-06-11 16:07:17 root INFO     [relation call] using {} was
2024-06-11 16:07:20 root INFO     total operator prediction time: 3.1432576179504395 seconds
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' french'] matches ['greek'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' french', ' english'] matches ['french'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' b'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' b'] matches ['roman'] is True
2024-06-11 16:07:22 root INFO     [' g', ' english', ' it', ' a', ' aust'] matches ['chinese'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' b'] matches ['polish'] is False
2024-06-11 16:07:22 root INFO     [' g', ' r', ' a', ' b', ' it'] matches ['english', 'british'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' r', ' b'] matches ['french'] is False
2024-06-11 16:07:22 root INFO     [' g', ' r', ' it', ' a', ' sw'] matches ['english', 'british'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' english', ' french'] matches ['russian'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' b', ' r'] matches ['american'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' b', ' english'] matches ['jewish', 'german', 'american'] is True
2024-06-11 16:07:22 root INFO     [' g', ' english', ' it', ' a', ' b'] matches ['greek'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' it', ' a', ' b'] matches ['italian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' it', ' a', ' b'] matches ['italian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' it', ' a', ' b'] matches ['soviet', 'russian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' english', ' r'] matches ['english', 'british'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' english', ' r'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' french', ' a', ' b'] matches ['german', 'austrian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' b', ' r'] matches ['greek'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' b', ' r'] matches ['scottish', 'british'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' it', ' a', ' b'] matches ['american'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' a', ' it', ' english'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' r', ' a', ' english'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' r', ' a', ' b'] matches ['french'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' english', ' r'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' sw'] matches ['soviet', 'russian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' english'] matches ['english', 'british'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' english', ' b'] matches ['american'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' b', ' r'] matches ['english', 'british'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' b'] matches ['italian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' b', ' a', ' r'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     ['\n', '.', ' the', ' ', ','] matches ['scottish', 'british'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' french', ' english'] matches ['chinese'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' b'] matches ['italian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' r', ' sw'] matches ['german', 'austrian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' a', ' it', ' b'] matches ['french', 'corsican', 'italian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' r', ' b'] matches ['english', 'british'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' b', ' r'] matches ['french'] is False
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' french', ' r'] matches ['greek'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' french', ' sw', ' a'] matches ['italian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' r', ' it', ' a', ' english'] matches ['french'] is False
2024-06-11 16:07:22 root INFO     [' g', ' it', ' english', ' sw', ' a'] matches ['soviet', 'georgian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' b', ' r'] matches ['austrian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' a', ' english', ' r'] matches ['russian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' it', ' r', ' a', ' english'] matches ['russian'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' english', ' b'] matches ['american'] is True
2024-06-11 16:07:22 root INFO     [' g', ' a', ' it', ' r', ' b'] matches ['german'] is True
2024-06-11 16:07:22 root INFO     name - nationality (50) total: defaultdict(<class 'int'>, {False: 1063, True: 521})
2024-06-11 16:07:38 root INFO     Tokenizer loaded
2024-06-11 16:07:38 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='male - female', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='actor', object=['actress']), RelationSample(subject='batman', object=['batwoman']), RelationSample(subject='boar', object=['sow']), RelationSample(subject='boy', object=['girl']), RelationSample(subject='brother', object=['sister']), RelationSample(subject='buck', object=['doe']), RelationSample(subject='bull', object=['cow']), RelationSample(subject='businessman', object=['businesswoman']), RelationSample(subject='chairman', object=['chairwoman']), RelationSample(subject='dad', object=['mom', 'mum']), RelationSample(subject='daddy', object=['mommy', 'mother', 'mom']), RelationSample(subject='duke', object=['duchess']), RelationSample(subject='emperor', object=['empress']), RelationSample(subject='father', object=['mother']), RelationSample(subject='fisherman', object=['fisherwoman']), RelationSample(subject='fox', object=['vixen']), RelationSample(subject='gentleman', object=['lady', 'gentlewoman', 'madam']), RelationSample(subject='god', object=['goddess']), RelationSample(subject='grandfather', object=['grandmother']), RelationSample(subject='grandpa', object=['grandma']), RelationSample(subject='grandson', object=['granddaughter']), RelationSample(subject='groom', object=['bride']), RelationSample(subject='headmaster', object=['headmistress']), RelationSample(subject='heir', object=['heiress']), RelationSample(subject='hero', object=['heroine']), RelationSample(subject='hound', object=['bitch']), RelationSample(subject='husband', object=['wife']), RelationSample(subject='king', object=['queen']), RelationSample(subject='lion', object=['lioness']), RelationSample(subject='man', object=['woman']), RelationSample(subject='manager', object=['manageress']), RelationSample(subject='mister', object=['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam']), RelationSample(subject='murderer', object=['murderess']), RelationSample(subject='nephew', object=['niece']), RelationSample(subject='poet', object=['poetess']), RelationSample(subject='policeman', object=['policewoman']), RelationSample(subject='prince', object=['princess']), RelationSample(subject='ram', object=['ewe']), RelationSample(subject='rooster', object=['hen']), RelationSample(subject='sculptor', object=['sculptress']), RelationSample(subject='sir', object=['madam']), RelationSample(subject='son', object=['daughter']), RelationSample(subject='stallion', object=['mare']), RelationSample(subject='stepfather', object=['stepmother']), RelationSample(subject='superman', object=['superwoman']), RelationSample(subject='tiger', object=['tigress']), RelationSample(subject='uncle', object=['aunt']), RelationSample(subject='valet', object=['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid']), RelationSample(subject='waiter', object=['waitress']), RelationSample(subject='webmaster', object=['webmistress'])], _domain=None, _range=None)
2024-06-11 16:07:41 root INFO     starting operator prediction
2024-06-11 16:07:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-11 16:07:41 root INFO     [relation call] using A female {} is known as a
2024-06-11 16:07:44 root INFO     total operator prediction time: 3.3320252895355225 seconds
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' woman', ' male'] matches ['actress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' male', ' d'] matches ['batwoman'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' mother'] matches ['sow'] is False
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' d', ' s'] matches ['girl'] is False
2024-06-11 16:07:46 root INFO     [' female', ' m', ' male', ' lady', ' d'] matches ['sister'] is False
2024-06-11 16:07:46 root INFO     [' female', ' male', ' lady', ' m', ' mother'] matches ['doe'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['cow'] is False
2024-06-11 16:07:46 root INFO     [' lady', ' female', ' m', ' woman', ' male'] matches ['businesswoman'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['chairwoman'] is False
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' male', ' d'] matches ['mom', 'mum'] is True
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' male', ' d'] matches ['mommy', 'mother', 'mom'] is True
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['duchess'] is True
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' woman'] matches ['empress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' male', ' d'] matches ['mother'] is True
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' woman'] matches ['fisherwoman'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' mother'] matches ['vixen'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' s', ' woman'] matches ['lady', 'gentlewoman', 'madam'] is True
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' mother'] matches ['goddess'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' woman'] matches ['grandmother'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' woman'] matches ['grandma'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' woman'] matches ['granddaughter'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' woman'] matches ['bride'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['headmistress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' woman'] matches ['heiress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' mother'] matches ['heroine'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' d'] matches ['bitch'] is False
2024-06-11 16:07:46 root INFO     [' female', ' m', ' male', ' lady', ' woman'] matches ['wife'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['queen'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' woman'] matches ['lioness'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' woman', ' mother'] matches ['manageress'] is True
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' woman', ' b'] matches ['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam'] is True
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' male', ' d'] matches ['murderess'] is True
2024-06-11 16:07:46 root INFO     [' female', ' male', ' lady', ' m', ' woman'] matches ['niece'] is False
2024-06-11 16:07:46 root INFO     [' lady', ' female', ' m', ' mother', ' d'] matches ['poetess'] is False
2024-06-11 16:07:46 root INFO     [' lady', ' female', ' m', ' woman', ' male'] matches ['policewoman'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' mother'] matches ['princess'] is False
2024-06-11 16:07:46 root INFO     [' female', ' male', ' m', ' lady', ' mother'] matches ['ewe'] is False
2024-06-11 16:07:46 root INFO     [' female', ' male', ' lady', ' m', ' n'] matches ['hen'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' woman'] matches ['sculptress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['madam'] is True
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['mare'] is True
2024-06-11 16:07:46 root INFO     [' female', ' m', ' lady', ' male', ' d'] matches ['stepmother'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['superwoman'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' male', ' d'] matches ['tigress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' m', ' woman'] matches ['aunt'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' male', ' d', ' woman'] matches ['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' m', ' d', ' n'] matches ['waitress'] is False
2024-06-11 16:07:46 root INFO     [' female', ' lady', ' d', ' m', ' b'] matches ['webmistress'] is False
2024-06-11 16:07:46 root INFO     male - female (50) total: defaultdict(<class 'int'>, {False: 1101, True: 531})
2024-06-11 16:08:02 root INFO     Tokenizer loaded
2024-06-11 16:08:02 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='name - occupation', prompt_templates=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], prompt_templates_zs=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], samples=[RelationSample(subject='andersen', object=['writer', 'poet', 'author']), RelationSample(subject='aristotle', object=['philosopher']), RelationSample(subject='balzac', object=['novelist', 'writer']), RelationSample(subject='beethoven', object=['composer']), RelationSample(subject='caesar', object=['emperor', 'commander', 'leader']), RelationSample(subject='columbus', object=['explorer']), RelationSample(subject='confucius', object=['philosopher']), RelationSample(subject='dante', object=['poet']), RelationSample(subject='darwin', object=['naturalist', 'biologist', 'geologist']), RelationSample(subject='depp', object=['actor', 'producer', 'musician']), RelationSample(subject='descartes', object=['mathematician', 'philosopher']), RelationSample(subject='dickens', object=['novelist', 'writer', 'critic', 'author']), RelationSample(subject='edison', object=['inventor', 'businessman']), RelationSample(subject='einstein', object=['physicist', 'scientist']), RelationSample(subject='euler', object=['mathematician', 'physicist', 'astronomer', 'logician', 'engineer']), RelationSample(subject='goethe', object=['poet', 'playwright', 'novelist', 'writer', 'author']), RelationSample(subject='hawking', object=['physicist', 'scientist']), RelationSample(subject='haydn', object=['composer']), RelationSample(subject='hegel', object=['philosopher']), RelationSample(subject='hitler', object=['dictator', 'politician', 'nazi']), RelationSample(subject='hume', object=['philosopher', 'politician']), RelationSample(subject='jolie', object=['actress', 'filmmaker', 'director', 'humanitarian', 'activist']), RelationSample(subject='kant', object=['philosopher']), RelationSample(subject='kepler', object=['mathematician', 'physicist', 'astronomer', 'astrologer']), RelationSample(subject='lincoln', object=['president']), RelationSample(subject='locke', object=['philosopher']), RelationSample(subject='marx', object=['philosopher', 'communist']), RelationSample(subject='maxwell', object=['physicist', 'scientist']), RelationSample(subject='mencius', object=['philosopher']), RelationSample(subject='michelangelo', object=['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer']), RelationSample(subject='moses', object=['prophet', 'leader']), RelationSample(subject='mozart', object=['composer']), RelationSample(subject='napoleon', object=['emperor', 'leader', 'politician', 'commander']), RelationSample(subject='newton', object=['scientist', 'mathematician', 'psysicist', 'philosopher']), RelationSample(subject='pacino', object=['actor', 'director', 'filmmaker']), RelationSample(subject='pascal', object=['mathematician', 'philosopher']), RelationSample(subject='picasso', object=['painter', 'artist', 'sculptor', 'designer']), RelationSample(subject='plato', object=['philosopher']), RelationSample(subject='raphael', object=['painter', 'artist', 'architect']), RelationSample(subject='rembrandt', object=['painter', 'etcher', 'artist']), RelationSample(subject='rousseau', object=['writer', 'author', 'philosopher']), RelationSample(subject='schwarzenegger', object=['actor', 'politician', 'governor']), RelationSample(subject='shakespeare', object=['playwright', 'poet']), RelationSample(subject='spinoza', object=['philosopher']), RelationSample(subject='stalin', object=['dictator', 'politician', 'leader', 'statesman']), RelationSample(subject='strauss', object=['composer']), RelationSample(subject='tolstoi', object=['novelist', 'writer', 'philosopher']), RelationSample(subject='truman', object=['president']), RelationSample(subject='wagner', object=['composer']), RelationSample(subject='wittgenstein', object=['philosopher'])], _domain=None, _range=None)
2024-06-11 16:08:04 root INFO     starting operator prediction
2024-06-11 16:08:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was known for their work as a )
2024-06-11 16:08:04 root INFO     [relation call] using {} was known for their work as a 
2024-06-11 16:08:08 root INFO     total operator prediction time: 3.4322192668914795 seconds
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' author'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['novelist', 'writer'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' poet', ' writer', ' ', ' mathematician'] matches ['composer'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' author', ' '] matches ['emperor', 'commander', 'leader'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' author', ' '] matches ['explorer'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' author'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' mathematician'] matches ['poet'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' author'] matches ['naturalist', 'biologist', 'geologist'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' ', ' writer', ' scientist', ' poet'] matches ['actor', 'producer', 'musician'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['mathematician', 'philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' '] matches ['novelist', 'writer', 'critic', 'author'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' mathematician'] matches ['inventor', 'businessman'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['physicist', 'scientist'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' mathematician'] matches ['mathematician', 'physicist', 'astronomer', 'logician', 'engineer'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' '] matches ['poet', 'playwright', 'novelist', 'writer', 'author'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' author', ' poet', ' mathematician'] matches ['physicist', 'scientist'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['composer'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' phil'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['dictator', 'politician', 'nazi'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' author'] matches ['philosopher', 'politician'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' ', ' writer', ' poet', ' author'] matches ['actress', 'filmmaker', 'director', 'humanitarian', 'activist'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' mathematician', ' poet'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' author', ' poet'] matches ['mathematician', 'physicist', 'astronomer', 'astrologer'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' author'] matches ['president'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' scientist'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' '] matches ['philosopher', 'communist'] is True
2024-06-11 16:08:10 root INFO     ['\n', ' ', '.', ' the', ','] matches ['physicist', 'scientist'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' poet', ' writer', ' ', ' phil'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' '] matches ['prophet', 'leader'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['composer'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' mathematician'] matches ['emperor', 'leader', 'politician', 'commander'] is False
2024-06-11 16:08:10 root INFO     [' writer', ' philosopher', ' ', ' poet', ' author'] matches ['scientist', 'mathematician', 'psysicist', 'philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' scientist'] matches ['actor', 'director', 'filmmaker'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['mathematician', 'philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' mathematician'] matches ['painter', 'artist', 'sculptor', 'designer'] is False
2024-06-11 16:08:10 root INFO     [' writer', ' philosopher', ' poet', ' ', ' mathematician'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' painter'] matches ['painter', 'artist', 'architect'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' painter'] matches ['painter', 'etcher', 'artist'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' author'] matches ['writer', 'author', 'philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' author'] matches ['actor', 'politician', 'governor'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['playwright', 'poet'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' author'] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' author'] matches ['dictator', 'politician', 'leader', 'statesman'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' ', ' poet', ' author'] matches ['novelist', 'writer', 'philosopher'] is True
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' author'] matches ['president'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['composer'] is False
2024-06-11 16:08:10 root INFO     [' philosopher', ' writer', ' poet', ' author', ' '] matches ['philosopher'] is True
2024-06-11 16:08:10 root INFO     name - occupation (50) total: defaultdict(<class 'int'>, {False: 1124, True: 556})
2024-06-11 16:08:26 root INFO     Tokenizer loaded
2024-06-11 16:08:26 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='country - language', prompt_templates=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], prompt_templates_zs=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], samples=[RelationSample(subject='andorra', object=['catalan']), RelationSample(subject='argentina', object=['spanish']), RelationSample(subject='australia', object=['english']), RelationSample(subject='austria', object=['german']), RelationSample(subject='bahamas', object=['english']), RelationSample(subject='bangladesh', object=['bengali', 'bangla']), RelationSample(subject='barbados', object=['english']), RelationSample(subject='belize', object=['english']), RelationSample(subject='bolivia', object=['spanish']), RelationSample(subject='brazil', object=['portuguese']), RelationSample(subject='cambodia', object=['khmer']), RelationSample(subject='canada', object=['english', 'french']), RelationSample(subject='chile', object=['spanish']), RelationSample(subject='colombia', object=['spanish']), RelationSample(subject='cuba', object=['spanish']), RelationSample(subject='cyprus', object=['greek', 'turkish']), RelationSample(subject='denmark', object=['danish', 'faroese', 'greenlandic', 'german']), RelationSample(subject='ecuador', object=['spanish', 'quechua']), RelationSample(subject='egypt', object=['arabic']), RelationSample(subject='ethiopia', object=['amharic']), RelationSample(subject='fiji', object=['english']), RelationSample(subject='guadeloupe', object=['french']), RelationSample(subject='guam', object=['english', 'chamorro']), RelationSample(subject='guatemala', object=['spanish']), RelationSample(subject='guyana', object=['english']), RelationSample(subject='haiti', object=['creole', 'french']), RelationSample(subject='iran', object=['persian']), RelationSample(subject='iraq', object=['arabic', 'kurdish']), RelationSample(subject='ireland', object=['english', 'irish', 'gaelic']), RelationSample(subject='israel', object=['hebrew', 'arabic']), RelationSample(subject='jamaica', object=['english', 'creole']), RelationSample(subject='jordan', object=['arabic']), RelationSample(subject='kazakhstan', object=['kazak', 'qazaq', 'russian']), RelationSample(subject='kosovo', object=['albanian', 'serbian']), RelationSample(subject='kuwait', object=['arabic']), RelationSample(subject='mexico', object=['spanish', 'nahuatl']), RelationSample(subject='moldova', object=['moldovan', 'romanian']), RelationSample(subject='morocco', object=['berber', 'arabic']), RelationSample(subject='mozambique', object=['portuguese']), RelationSample(subject='netherlands', object=['dutch', 'frisian']), RelationSample(subject='nicaragua', object=['spanish']), RelationSample(subject='norway', object=['norwegian', 'bokmål', 'bokmal', 'nynorsk']), RelationSample(subject='palestine', object=['arabic']), RelationSample(subject='peru', object=['spanish']), RelationSample(subject='philippines', object=['tagalog', 'filipino']), RelationSample(subject='switzerland', object=['german', 'french', 'italian']), RelationSample(subject='syria', object=['arabic']), RelationSample(subject='taiwan', object=['chinese']), RelationSample(subject='usa', object=['english']), RelationSample(subject='venezuela', object=['spanish'])], _domain=None, _range=None)
2024-06-11 16:08:28 root INFO     starting operator prediction
2024-06-11 16:08:28 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The country of {} primarily speaks the language of)
2024-06-11 16:08:28 root INFO     [relation call] using The country of {} primarily speaks the language of
2024-06-11 16:08:32 root INFO     total operator prediction time: 3.5078561305999756 seconds
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['catalan'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['german'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['bengali', 'bangla'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' b'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', '\n'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['portuguese'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['khmer'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' b'] matches ['english', 'french'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' ar', ' french'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['greek', 'turkish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['danish', 'faroese', 'greenlandic', 'german'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish', 'quechua'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['amharic'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['french'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['english', 'chamorro'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', '\n'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' ar', ' g'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' d'] matches ['creole', 'french'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['persian'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['arabic', 'kurdish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['english', 'irish', 'gaelic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['hebrew', 'arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['english', 'creole'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['kazak', 'qazaq', 'russian'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['albanian', 'serbian'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' a'] matches ['arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' ar', ' g'] matches ['spanish', 'nahuatl'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['moldovan', 'romanian'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' ar', ' g'] matches ['berber', 'arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['portuguese'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' eng'] matches ['dutch', 'frisian'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['norwegian', 'bokmål', 'bokmal', 'nynorsk'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' ar', ' g', ' french'] matches ['arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' ar', ' g'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['tagalog', 'filipino'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' ar', ' g'] matches ['german', 'french', 'italian'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['arabic'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['chinese'] is False
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['english'] is True
2024-06-11 16:08:34 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-11 16:08:34 root INFO     country - language (50) total: defaultdict(<class 'int'>, {False: 1138, True: 592})
2024-06-11 16:08:50 root INFO     Tokenizer loaded
2024-06-11 16:08:50 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='things - color', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='ant', object=['black', 'brown', 'red']), RelationSample(subject='apple', object=['red', 'orange', 'yellow', 'golden']), RelationSample(subject='blackboard', object=['black', 'green']), RelationSample(subject='blood', object=['red']), RelationSample(subject='blueberry', object=['blue', 'black']), RelationSample(subject='broccoli', object=['green']), RelationSample(subject='bruise', object=['blue', 'purple']), RelationSample(subject='cabbage', object=['green']), RelationSample(subject='carrot', object=['orange', 'red', 'yellow']), RelationSample(subject='cauliflower', object=['white', 'green', 'yellow', 'yellowish']), RelationSample(subject='celery', object=['green', 'white', 'brown']), RelationSample(subject='cherry', object=['red', 'yellow', 'black']), RelationSample(subject='chocolate', object=['white', 'brown', 'black']), RelationSample(subject='cloud', object=['white', 'gray', 'grey']), RelationSample(subject='coal', object=['black']), RelationSample(subject='coffee', object=['black', 'brown']), RelationSample(subject='cranberry', object=['red', 'purple', 'pink']), RelationSample(subject='cream', object=['white']), RelationSample(subject='crow', object=['black']), RelationSample(subject='cucumber', object=['green']), RelationSample(subject='emerald', object=['green']), RelationSample(subject='fridge', object=['white', 'silver', 'black']), RelationSample(subject='frog', object=['green', 'brown', 'grey', 'gray']), RelationSample(subject='grapes', object=['black', 'red', 'green', 'purple']), RelationSample(subject='grass', object=['green']), RelationSample(subject='leaves', object=['green', 'red', 'yellow']), RelationSample(subject='milk', object=['white']), RelationSample(subject='paper', object=['white', 'color']), RelationSample(subject='parsley', object=['green']), RelationSample(subject='peony', object=['red', 'white', 'pink', 'purple']), RelationSample(subject='pepper', object=['black', 'red', 'green', 'yellow', 'orange']), RelationSample(subject='potato', object=['brown']), RelationSample(subject='radish', object=['red', 'pink', 'white', 'green', 'black']), RelationSample(subject='raven', object=['black']), RelationSample(subject='rose', object=['red', 'yellow', 'pink', 'white', 'blue']), RelationSample(subject='ruby', object=['red']), RelationSample(subject='salt', object=['white']), RelationSample(subject='sapphire', object=['blue']), RelationSample(subject='sea', object=['blue', 'green', 'gray', 'grey']), RelationSample(subject='sky', object=['blue', 'gray', 'grey']), RelationSample(subject='snow', object=['white']), RelationSample(subject='soil', object=['black', 'brown', 'dark']), RelationSample(subject='spinach', object=['green']), RelationSample(subject='sugar', object=['white', 'brown']), RelationSample(subject='sun', object=['yellow', 'gold']), RelationSample(subject='swan', object=['white', 'black', 'gray', 'grey']), RelationSample(subject='tea', object=['black', 'green', 'white', 'red', 'brown', 'yellow']), RelationSample(subject='tomato', object=['red']), RelationSample(subject='toothpaste', object=['white']), RelationSample(subject='yoghurt', object=['white', 'pink'])], _domain=None, _range=None)
2024-06-11 16:08:53 root INFO     starting operator prediction
2024-06-11 16:08:53 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-11 16:08:53 root INFO     [relation call] using A female {} is known as a
2024-06-11 16:08:56 root INFO     total operator prediction time: 3.299180507659912 seconds
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' black', ' red'] matches ['black', 'brown', 'red'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['red', 'orange', 'yellow', 'golden'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['black', 'green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' green', ' yellow', ' black'] matches ['red'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['blue', 'black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['orange', 'red', 'yellow'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' red', ' green', ' black'] matches ['white', 'green', 'yellow', 'yellowish'] is True
2024-06-11 16:08:58 root INFO     [' green', ' white', ' red', ' yellow', ' black'] matches ['green', 'white', 'brown'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' green', ' yellow', ' black'] matches ['red', 'yellow', 'black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' red', ' yellow', ' black'] matches ['white', 'brown', 'black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['white', 'gray', 'grey'] is True
2024-06-11 16:08:58 root INFO     [' white', ' black', ' yellow', ' green', ' red'] matches ['black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' black', ' red', ' yellow'] matches ['black', 'brown'] is True
2024-06-11 16:08:58 root INFO     [' red', ' white', ' yellow', ' green', ' black'] matches ['red', 'purple', 'pink'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' yellow', ' black', ' green'] matches ['white'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' green', ' black', ' yellow'] matches ['black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' green', ' white', ' yellow', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' black', ' green', ' red'] matches ['white', 'silver', 'black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' green', ' black', ' yellow'] matches ['green', 'brown', 'grey', 'gray'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' yellow', ' green', ' black'] matches ['black', 'red', 'green', 'purple'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['green', 'red', 'yellow'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' black', ' red'] matches ['white'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' green', ' black', ' yellow'] matches ['white', 'color'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['red', 'white', 'pink', 'purple'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['black', 'red', 'green', 'yellow', 'orange'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' green', ' yellow', ' black'] matches ['red', 'pink', 'white', 'green', 'black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' black', ' red', ' green', ' yellow'] matches ['black'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' red', ' black', ' green'] matches ['red', 'yellow', 'pink', 'white', 'blue'] is True
2024-06-11 16:08:58 root INFO     [' white', ' red', ' yellow', ' green', ' black'] matches ['red'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' red', ' yellow', ' black'] matches ['white'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' black', ' yellow', ' red'] matches ['blue'] is False
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['blue', 'green', 'gray', 'grey'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['blue', 'gray', 'grey'] is False
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['white'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' red', ' green', ' black'] matches ['black', 'brown', 'dark'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['green'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['white', 'brown'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['yellow', 'gold'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' red', ' yellow', ' black'] matches ['white', 'black', 'gray', 'grey'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' yellow', ' black', ' red'] matches ['black', 'green', 'white', 'red', 'brown', 'yellow'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' red', ' green', ' black'] matches ['red'] is True
2024-06-11 16:08:58 root INFO     [' white', ' yellow', ' green', ' red', ' black'] matches ['white'] is True
2024-06-11 16:08:58 root INFO     [' white', ' green', ' red', ' yellow', ' black'] matches ['white', 'pink'] is True
2024-06-11 16:08:58 root INFO     things - color (50) total: defaultdict(<class 'int'>, {False: 1140, True: 638})
2024-06-11 16:09:18 root INFO     Tokenizer loaded
2024-06-11 16:09:18 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='country - capital', prompt_templates=['The country with {} as its capital is known as', 'The country with the capital city of {} is named', 'A country distinguished by {} as its capital city is known as'], prompt_templates_zs=['The country with {} as its capital is known as', 'The country with the capital city of {} is named', 'A country distinguished by {} as its capital city is known as'], samples=[RelationSample(subject='abuja', object=['nigeria']), RelationSample(subject='amman', object=['jordan']), RelationSample(subject='ankara', object=['turkey']), RelationSample(subject='athens', object=['greece']), RelationSample(subject='baghdad', object=['iraq']), RelationSample(subject='bangkok', object=['thailand']), RelationSample(subject='beijing', object=['china']), RelationSample(subject='beirut', object=['lebanon']), RelationSample(subject='belgrade', object=['serbia']), RelationSample(subject='berlin', object=['germany']), RelationSample(subject='bern', object=['switzerland']), RelationSample(subject='brussels', object=['belgium']), RelationSample(subject='bucharest', object=['romania']), RelationSample(subject='budapest', object=['hungary']), RelationSample(subject='cairo', object=['egypt']), RelationSample(subject='canberra', object=['australia']), RelationSample(subject='conakry', object=['guinea']), RelationSample(subject='copenhagen', object=['denmark']), RelationSample(subject='damascus', object=['syria']), RelationSample(subject='dhaka', object=['bangladesh']), RelationSample(subject='dublin', object=['ireland']), RelationSample(subject='hanoi', object=['vietnam']), RelationSample(subject='havana', object=['cuba']), RelationSample(subject='helsinki', object=['finland']), RelationSample(subject='islamabad', object=['pakistan']), RelationSample(subject='jakarta', object=['indonesia']), RelationSample(subject='kabul', object=['afghanistan']), RelationSample(subject='kiev', object=['ukraine']), RelationSample(subject='kingston', object=['jamaica']), RelationSample(subject='lima', object=['peru']), RelationSample(subject='lisbon', object=['portugal']), RelationSample(subject='london', object=['england', 'uk', 'britain']), RelationSample(subject='madrid', object=['spain']), RelationSample(subject='manila', object=['philippines']), RelationSample(subject='moscow', object=['russia']), RelationSample(subject='nairobi', object=['kenya']), RelationSample(subject='oslo', object=['norway']), RelationSample(subject='ottawa', object=['canada']), RelationSample(subject='paris', object=['france']), RelationSample(subject='rome', object=['italy']), RelationSample(subject='santiago', object=['chile']), RelationSample(subject='sofia', object=['bulgaria']), RelationSample(subject='stockholm', object=['sweden']), RelationSample(subject='taipei', object=['taiwan']), RelationSample(subject='tbilisi', object=['georgia']), RelationSample(subject='tehran', object=['iran']), RelationSample(subject='tokyo', object=['japan']), RelationSample(subject='vienna', object=['austria']), RelationSample(subject='warsaw', object=['poland']), RelationSample(subject='zagreb', object=['croatia'])], _domain=None, _range=None)
2024-06-11 16:09:21 root INFO     starting operator prediction
2024-06-11 16:09:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The country with {} as its capital is known as)
2024-06-11 16:09:21 root INFO     [relation call] using The country with {} as its capital is known as
2024-06-11 16:09:25 root INFO     total operator prediction time: 3.7544405460357666 seconds
2024-06-11 16:09:27 root INFO     [' e', '\n', ' g', ' ', ' the'] matches ['nigeria'] is False
2024-06-11 16:09:27 root INFO     [' u', ' e', '\n', ' g', ' '] matches ['jordan'] is False
2024-06-11 16:09:27 root INFO     [' e', ' u', ' g', '\n', ' the'] matches ['turkey'] is False
2024-06-11 16:09:27 root INFO     [' g', '\n', ' e', ' the', ' u'] matches ['greece'] is True
2024-06-11 16:09:27 root INFO     [' e', ' g', ' the', ' ', '\n'] matches ['iraq'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', ' u', '\n', ' the'] matches ['thailand'] is False
2024-06-11 16:09:27 root INFO     ['\n', ' e', ' g', ' ', ' the'] matches ['china'] is False
2024-06-11 16:09:27 root INFO     [' e', ' u', ' g', '\n', ' '] matches ['lebanon'] is False
2024-06-11 16:09:27 root INFO     [' g', ' u', ' ', ' e', '\n'] matches ['serbia'] is False
2024-06-11 16:09:27 root INFO     [' e', ' u', ' g', ' ', ' the'] matches ['germany'] is True
2024-06-11 16:09:27 root INFO     [' g', ' ', ' u', ' e', ' the'] matches ['switzerland'] is False
2024-06-11 16:09:27 root INFO     [' g', ' u', ' e', ' ', ' the'] matches ['belgium'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', ' u', ' the', ' '] matches ['romania'] is False
2024-06-11 16:09:27 root INFO     ['\n', ' g', ' e', ' ', ' the'] matches ['hungary'] is False
2024-06-11 16:09:27 root INFO     [' the', ' ', ' e', '\n', ' g'] matches ['egypt'] is True
2024-06-11 16:09:27 root INFO     [' g', ' e', ' the', ' ', '\n'] matches ['australia'] is False
2024-06-11 16:09:27 root INFO     [' ', ' e', '\n', ' g', ' the'] matches ['guinea'] is True
2024-06-11 16:09:27 root INFO     [' u', ' e', ' g', ' ', ' the'] matches ['denmark'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', '\n', ' u', ' the'] matches ['syria'] is False
2024-06-11 16:09:27 root INFO     [' g', ' ', ' e', '\n', ' the'] matches ['bangladesh'] is False
2024-06-11 16:09:27 root INFO     [' e', ' u', ' g', ' the', '\n'] matches ['ireland'] is False
2024-06-11 16:09:27 root INFO     [' the', ' e', ' g', '\n', ' u'] matches ['vietnam'] is False
2024-06-11 16:09:27 root INFO     [' u', ' g', ' ', ' the', '\n'] matches ['cuba'] is False
2024-06-11 16:09:27 root INFO     [' g', ' u', ' e', ' the', '\n'] matches ['finland'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', ' u', ' the', ' '] matches ['pakistan'] is False
2024-06-11 16:09:27 root INFO     [' u', ' e', ' g', '\n', ' the'] matches ['indonesia'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', ' u', ' the', ' '] matches ['afghanistan'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', ' u', ' ', '\n'] matches ['ukraine'] is True
2024-06-11 16:09:27 root INFO     [' e', ' g', ' u', ' the', '\n'] matches ['jamaica'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', '\n', ' the', ' '] matches ['peru'] is False
2024-06-11 16:09:27 root INFO     [' e', ' ', '\n', ' g', ' u'] matches ['portugal'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', '\n', ' u', ' '] matches ['england', 'uk', 'britain'] is True
2024-06-11 16:09:27 root INFO     [' e', ' u', ' g', '\n', ' the'] matches ['spain'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', ' ', ' the', '\n'] matches ['philippines'] is False
2024-06-11 16:09:27 root INFO     [' u', ' e', ' the', ' g', '\n'] matches ['russia'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', ' u', '\n', ' the'] matches ['kenya'] is False
2024-06-11 16:09:27 root INFO     [' u', ' the', ' e', ' g', '\n'] matches ['norway'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', ' ', ' u', '\n'] matches ['canada'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', ' u', ' ', '\n'] matches ['france'] is False
2024-06-11 16:09:27 root INFO     [' the', '\n', ' g', ' u', ' '] matches ['italy'] is False
2024-06-11 16:09:27 root INFO     [' e', ' the', '\n', ' g', ' u'] matches ['chile'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', '\n', ' the', ' u'] matches ['bulgaria'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', ' u', ' the', '\n'] matches ['sweden'] is False
2024-06-11 16:09:27 root INFO     [' u', '\n', ' e', ' g', ' the'] matches ['taiwan'] is False
2024-06-11 16:09:27 root INFO     [' g', ' e', ' ', '\n', ' u'] matches ['georgia'] is True
2024-06-11 16:09:27 root INFO     [' e', ' g', '\n', ' u', ' '] matches ['iran'] is False
2024-06-11 16:09:27 root INFO     [' e', ' g', '\n', ' u', ' '] matches ['japan'] is False
2024-06-11 16:09:27 root INFO     [' g', ' u', ' e', ' ', '\n'] matches ['austria'] is False
2024-06-11 16:09:27 root INFO     [' e', '\n', ' the', ' ', ' g'] matches ['poland'] is False
2024-06-11 16:09:27 root INFO     [' u', ' e', '\n', ' the', ' '] matches ['croatia'] is False
2024-06-11 16:09:27 root INFO     country - capital (50) total: defaultdict(<class 'int'>, {False: 1183, True: 645})
2024-06-11 20:21:56 root INFO     Tokenizer loaded
2024-06-11 20:21:56 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 20:21:59 root INFO     starting operator prediction
2024-06-11 20:21:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-11 20:21:59 root INFO     [relation call] using When something is more {}, it is
2024-06-11 20:22:03 root INFO     total operator prediction time: 3.404359817504883 seconds
2024-06-11 20:22:05 root INFO     [' more', ' less', ' harder', ' much', '\n'] matches ['angrier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['cheaper'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['cleverer'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['coarser'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' a', ' harder'] matches ['costlier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['cuter'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' a', ' harder'] matches ['denser'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['dumber'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' ', ' harder'] matches ['fiercer'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['handier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['happier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' a', '\n'] matches ['hardier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' a', ' harder'] matches ['harsher'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' ', ' harder'] matches ['healthier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' a'] matches ['hotter'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['huger'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' harder', ' much', '\n'] matches ['hungrier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' a'] matches ['lazier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' a', '\n'] matches ['lengthier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['luckier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['madder'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['merrier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' ', ' harder'] matches ['milder'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['moister'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['nastier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['neater'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' ', ' harder'] matches ['nicer'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['noisier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' a'] matches ['prouder'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['purer'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['riskier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['rockier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['ruder'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['sadder'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['scarier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['sexier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' a'] matches ['stickier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['stricter'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' ', '\n'] matches ['stronger'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' a'] matches ['subtler'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['sunnier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['tastier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['tinier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' much', ' less', ' harder', ' a'] matches ['trickier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' ', ' harder'] matches ['uglier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['vaguer'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' a'] matches ['vaster'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['weaker'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' harder', ' much', ' '] matches ['wealthier'] is False
2024-06-11 20:22:05 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['weirder'] is False
2024-06-11 20:22:05 root INFO     adj - comparative (50) total: defaultdict(<class 'int'>, {False: 50})
2024-06-11 20:22:21 root INFO     Tokenizer loaded
2024-06-11 20:22:21 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-11 20:22:23 root INFO     starting operator prediction
2024-06-11 20:22:23 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-11 20:22:23 root INFO     [relation call] using The plural form of {} is
2024-06-11 20:22:26 root INFO     total operator prediction time: 3.218397617340088 seconds
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['albums'] is True
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['applications'] is True
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['areas'] is True
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['cars'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['colleges'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['councils'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['customers'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' all'] matches ['days'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['deaths'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['departments'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['developments'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['differences'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['directors'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['events'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['examples'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['facts'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['friends'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['gods'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['governments'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['hours'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['ideas'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['languages'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['laws'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['members'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['months'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' all'] matches ['nights'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['offices'] is False
2024-06-11 20:22:29 root INFO     [' the', ' ', '\n', ' (', ' all'] matches ['periods'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['players'] is False
2024-06-11 20:22:29 root INFO     [' ', ' the', '\n', ' (', ' a'] matches ['populations'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['problems'] is False
2024-06-11 20:22:29 root INFO     [' the', ' ', '\n', ' (', ' all'] matches ['products'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['resources'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['rivers'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['roads'] is False
2024-06-11 20:22:29 root INFO     [' the', ' ', '\n', ' (', ' a'] matches ['roles'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' all'] matches ['sciences'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['solutions'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' ', ' the', ' (', ' all'] matches ['songs'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['streets'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['students'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['systems'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['things'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['towns'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['users'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' all'] matches ['versions'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['villages'] is False
2024-06-11 20:22:29 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['websites'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['weeks'] is False
2024-06-11 20:22:29 root INFO     [' the', '\n', ' ', ' (', ' a'] matches ['years'] is False
2024-06-11 20:22:29 root INFO     noun - plural_reg (50) total: defaultdict(<class 'int'>, {False: 97, True: 3})
2024-06-11 20:22:45 root INFO     Tokenizer loaded
2024-06-11 20:22:45 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-11 20:22:47 root INFO     starting operator prediction
2024-06-11 20:22:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-11 20:22:47 root INFO     [relation call] using If the present form is {}, the past form is
2024-06-11 20:22:50 root INFO     total operator prediction time: 3.4864604473114014 seconds
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['accepted'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['achieved'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['added'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' considered'] matches ['agreed'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' ('] matches ['allowed'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['announced'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['appeared'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['applied'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['asked'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' ', ' been', ' ('] matches ['attended'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' considered'] matches ['became'] is True
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' to'] matches ['believed'] is True
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' to'] matches ['considered'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['continued'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['created'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['decided'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' considered'] matches ['described'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' considered'] matches ['developed'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' ('] matches ['discovered'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['enjoyed'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['ensured'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' ('] matches ['established'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' to'] matches ['expected'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['followed'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' considered'] matches ['heard'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['identified'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['improved'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' considered'] matches ['included'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' ', ' been', ' to'] matches ['introduced'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['involved'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['located'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['lost'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' been', ' be', ' ', ' considered'] matches ['managed'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' ('] matches ['married'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['performed'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' considered'] matches ['provided'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' considered'] matches ['published'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['received'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['reduced'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['referred'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' to', ' '] matches ['related'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['remained'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['replaced'] is False
2024-06-11 20:22:53 root INFO     [' be', '\n', ' been', ' ', ' ('] matches ['required'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' to'] matches ['seemed'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['sent'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['spent'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' ', ' been', ' ('] matches ['told'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' be', ' been', ' ', ' ('] matches ['understood'] is False
2024-06-11 20:22:53 root INFO     ['\n', ' been', ' be', ' ', ' ('] matches ['united'] is False
2024-06-11 20:22:53 root INFO     verb_inf - Ved (50) total: defaultdict(<class 'int'>, {False: 145, True: 5})
2024-06-11 20:23:09 root INFO     Tokenizer loaded
2024-06-11 20:23:09 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-11 20:23:11 root INFO     starting operator prediction
2024-06-11 20:23:11 root INFO     [relation call] using After something is {}, it has
2024-06-11 20:23:14 root INFO     total operator prediction time: 3.274071455001831 seconds
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['added'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['agreed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['allowed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['announced'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['appeared'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['applied'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['appointed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['asked'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' ('] matches ['attended'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' used'] matches ['became'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['considered'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['contained'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['continued'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['created'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['decided'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['described'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['developed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['established'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['existed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['expected'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['failed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['followed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['heard'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['improved'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['included'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['introduced'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['involved'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' used'] matches ['located'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' used'] matches ['lost'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['managed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['married'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' already', ' not'] matches ['operated'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['performed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['proposed'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['provided'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' made', ' not'] matches ['published'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['received'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['reduced'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['related'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' used'] matches ['remained'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['replaced'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['represented'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['required'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['sent'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['spent'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' ('] matches ['suffered'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['taught'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['told'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' made'] matches ['understood'] is False
2024-06-11 20:23:17 root INFO     [' been', '\n', ' ', ' not', ' already'] matches ['united'] is False
2024-06-11 20:23:17 root INFO     verb_Ving - Ved (50) total: defaultdict(<class 'int'>, {False: 195, True: 5})
2024-06-11 20:23:32 root INFO     Tokenizer loaded
2024-06-11 20:23:32 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-11 20:23:35 root INFO     starting operator prediction
2024-06-11 20:23:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-11 20:23:35 root INFO     [relation call] using When something is the most {}, it is
2024-06-11 20:23:38 root INFO     total operator prediction time: 3.4601049423217773 seconds
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['ablest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['angriest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' n'] matches ['cheapest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['cleverest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['costliest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['cruelest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' n'] matches ['cutest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' n'] matches ['densest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['dumbest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['fiercest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['handiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['happiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['hardiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['harshest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['healthiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['hottest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['hugest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['hungriest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' best'] matches ['laziest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' greatest'] matches ['lengthiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['luckiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['merriest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['mildest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['nastiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['neatest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['nicest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['noisiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['politest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['proudest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['purest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['rarest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' greatest'] matches ['riskiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['rudest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['saddest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['scariest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['sexiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['shiniest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['strangest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['strictest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' n'] matches ['strongest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['subtlest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['sunniest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['tastiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' n'] matches ['tiniest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['trickiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['ugliest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' '] matches ['vaguest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' n'] matches ['weakest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', ' least', '\n', ' '] matches ['wealthiest'] is False
2024-06-11 20:23:40 root INFO     [' most', ' the', '\n', ' least', ' hardest'] matches ['weirdest'] is False
2024-06-11 20:23:40 root INFO     adj - superlative (50) total: defaultdict(<class 'int'>, {False: 245, True: 5})
2024-06-11 20:23:56 root INFO     Tokenizer loaded
2024-06-11 20:23:56 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-11 20:23:58 root INFO     starting operator prediction
2024-06-11 20:23:58 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-11 20:23:58 root INFO     [relation call] using I {}, he
2024-06-11 20:24:02 root INFO     total operator prediction time: 3.097781181335449 seconds
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['accepts'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['achieves'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['adds'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['agrees'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['allows'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['appears'] is False
2024-06-11 20:24:04 root INFO     [' is', ' will', ' does', '\n', ' has'] matches ['applies'] is False
2024-06-11 20:24:04 root INFO     [' does', ' will', ' is', ' has', '\n'] matches ['asks'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', '\n', ' will', ' has'] matches ['avoids'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['becomes'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['believes'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['considers'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['consists'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['contains'] is False
2024-06-11 20:24:04 root INFO     [' does', ' will', ' is', '\n', ' has'] matches ['continues'] is False
2024-06-11 20:24:04 root INFO     [' will', ' does', ' is', ' has', '\n'] matches ['creates'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['describes'] is False
2024-06-11 20:24:04 root INFO     [' will', ' is', ' does', ' has', '\n'] matches ['develops'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['enables'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['enjoys'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['ensures'] is False
2024-06-11 20:24:04 root INFO     [' will', ' does', ' is', ' has', '\n'] matches ['exists'] is False
2024-06-11 20:24:04 root INFO     [' does', ' will', ' is', '\n', ' has'] matches ['explains'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['follows'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['happens'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['hears'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['identifies'] is False
2024-06-11 20:24:04 root INFO     [' will', ' does', ' is', '\n', ' has'] matches ['improves'] is False
2024-06-11 20:24:04 root INFO     [' is', ' will', ' does', ' has', '\n'] matches ['includes'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['involves'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['learns'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['maintains'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['occurs'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['operates'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['prevents'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['promotes'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['protects'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['provides'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' has', ' will', '\n'] matches ['receives'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', ' has', '\n'] matches ['reduces'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['refers'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['remains'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['remembers'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', '\n', ' has'] matches ['represents'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' has', ' will', '\n'] matches ['requires'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' will', ' has', '\n'] matches ['seems'] is False
2024-06-11 20:24:04 root INFO     [' does', ' will', ' is', ' has', '\n'] matches ['sends'] is False
2024-06-11 20:24:04 root INFO     [' does', ' is', ' has', ' will', '\n'] matches ['suggests'] is False
2024-06-11 20:24:04 root INFO     [' does', ' will', ' is', ' has', '\n'] matches ['tells'] is False
2024-06-11 20:24:04 root INFO     [' is', ' does', ' will', '\n', ' has'] matches ['understands'] is False
2024-06-11 20:24:04 root INFO     verb_inf - 3pSg (50) total: defaultdict(<class 'int'>, {False: 295, True: 5})
2024-06-11 20:33:39 root INFO     model + tokenizer loaded
2024-06-11 20:33:39 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The young version of {} is', 'The offspring of a {} is referred to as a', 'When a {} is young, it is called a'], prompt_templates_zs=['The young version of {} is', 'The offspring of a {} is referred to as a', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:33:42 root INFO     starting operator prediction
2024-06-11 20:33:42 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The young version of {} is)
2024-06-11 20:33:42 root INFO     [relation call] using The young version of {} is
2024-06-11 20:33:45 root INFO     total operator prediction time: 3.3367044925689697 seconds
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' pup', ' lar'] matches ['baby', 'infant'] is True
2024-06-11 20:33:48 root INFO     [' young', ' pup', ' baby', ' kit', ' cub'] matches ['kit', 'cob'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['cub'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['kit', 'kitten'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' lar'] matches ['larva'] is True
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' pup', ' lar'] matches ['larva'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['calf'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['calf', 'colt'] is False
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' pup', ' n'] matches ['kitten'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['calf', 'heifer'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['baby', 'infant'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['nymph'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['nymph'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' lar', ' juvenile'] matches ['larva'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['fawn'] is False
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' pup', ' juvenile'] matches ['puppy', 'pup', 'whelp'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' juvenile', ' kit', ' pup'] matches ['duckling'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['calf'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' pup', ' kit', ' juvenile'] matches ['kit'] is True
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' juvenile', ' lar'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' lar'] matches ['grub', 'maggot'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' youngster'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['kid'] is False
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' pup', ' lar'] matches ['fingerling', 'fry'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' youngster'] matches ['infant'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['fingerling', 'fry'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['foal', 'colt', 'filly'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['larva'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' cub'] matches ['cub'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['kit', 'cub'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['infant'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' n'] matches ['calf', 'stot'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' youngster'] matches ['cub'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' lar'] matches ['kit', 'cub'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' juvenile', ' kit', ' lar'] matches ['smolt'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['pup'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' pup'] matches ['cub', 'pup'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' puppy'] matches ['kit', 'kitten'] is True
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' juvenile', ' pup'] matches ['hatchling', 'nestling'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' juvenile'] matches ['cub'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' juvenile', ' lar'] matches ['fingerling'] is False
2024-06-11 20:33:48 root INFO     [' young', ' kit', ' baby', ' pup', ' lar'] matches ['kit'] is True
2024-06-11 20:33:48 root INFO     [' baby', ' young', ' kit', ' pup', ' juvenile'] matches ['calf'] is False
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' kit', ' pup', ' cub'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-11 20:33:48 root INFO     [' young', ' baby', ' pup', ' kit', ' puppy'] matches ['kit', 'cob'] is True
2024-06-11 20:33:48 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {True: 22, False: 26})
2024-06-11 20:38:56 root INFO     model + tokenizer loaded
2024-06-11 20:38:56 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The young version of {} is', 'The offspring of a {} is referred to as a', 'When a {} is young, it is called a'], prompt_templates_zs=['The young version of {} is', 'The offspring of a {} is referred to as a', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:38:58 root INFO     starting operator prediction
2024-06-11 20:38:58 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The young version of {} is)
2024-06-11 20:38:58 root INFO     [relation call] using The young version of {} is
2024-06-11 20:39:02 root INFO     total operator prediction time: 3.3376266956329346 seconds
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' juvenile', ' adult'] matches ['baby', 'infant'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' kit', ' youngster', ' coc'] matches ['cub'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' kit', ' youngster', ' coc'] matches ['kit', 'kitten'] is True
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' baby'] matches ['larva'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' juvenile', ' coc'] matches ['larva'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' juvenile', ' coc'] matches ['calf'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' kitten'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' juvenile', ' coc'] matches ['calf', 'colt'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' juvenile', ' kitten'] matches ['kitten'] is True
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' juvenile', ' kit', ' baby'] matches ['calf', 'heifer'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' juvenile', ' coc'] matches ['baby', 'infant'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' juvenile', ' baby'] matches ['nymph'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' juvenile', ' youngster', ' coc'] matches ['nymph'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' juvenile', ' coc'] matches ['larva'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' coc'] matches ['fawn'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' coc', ' juvenile'] matches ['puppy', 'pup', 'whelp'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' coc', ' baby'] matches ['duckling'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' juvenile', ' youngster', ' baby'] matches ['calf'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' coc'] matches ['kit'] is True
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' coc'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' coc'] matches ['grub', 'maggot'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' kitten', ' baby'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' juvenile', ' coc'] matches ['kid'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' kitten', ' coc'] matches ['fingerling', 'fry'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' youngster', ' coc', ' baby'] matches ['infant'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' kit', ' youngster', ' coc'] matches ['fingerling', 'fry'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' juvenile', ' kit', ' coc'] matches ['foal', 'colt', 'filly'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' coc'] matches ['larva'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' coc', ' kit', ' juvenile'] matches ['cub'] is False
2024-06-11 20:39:04 root INFO     [' young', ' coc', ' kit', ' youngster', ' kitten'] matches ['kit', 'cub'] is True
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' juvenile', ' baby'] matches ['infant'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' juvenile', ' youngster', ' coc'] matches ['kit'] is True
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' coc', ' juvenile'] matches ['calf', 'stot'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' kitten', ' adult'] matches ['cub'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' kit', ' juvenile', ' coc'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' coc', ' youngster', ' kitten'] matches ['kit', 'cub'] is True
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' baby'] matches ['smolt'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' coc', ' kit'] matches ['pup'] is False
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' kit', ' youngster', ' coc'] matches ['cub', 'pup'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' juvenile', ' kit', ' coc'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-11 20:39:04 root INFO     [' young', ' youngster', ' puppy', ' kit', ' coc'] matches ['kit', 'kitten'] is True
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' kit', ' kitten', ' youngster'] matches ['hatchling', 'nestling'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' juvenile', ' youngster', ' kitten'] matches ['cub'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' coc', ' youngster', ' juvenile'] matches ['kit'] is True
2024-06-11 20:39:04 root INFO     [' young', ' juvenile', ' youngster', ' kit', ' kitten'] matches ['calf'] is False
2024-06-11 20:39:04 root INFO     [' young', ' kit', ' coc', ' kitten', ' puppy'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-11 20:39:04 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {False: 37, True: 9})
2024-06-11 20:43:18 root INFO     model + tokenizer loaded
2024-06-11 20:43:18 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:43:21 root INFO     starting operator prediction
2024-06-11 20:43:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 20:43:21 root INFO     [relation call] using The offspring of a {} is referred to as a
2024-06-11 20:43:24 root INFO     total operator prediction time: 3.4275472164154053 seconds
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['baby', 'infant'] is True
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['kit', 'cob'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['cub'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['larva'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['larva'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['calf'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['calf', 'colt'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['kitten'] is True
2024-06-11 20:43:27 root INFO     [' young', ' youngster', ' coc', ' baby', ' kitten'] matches ['calf', 'heifer'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['baby', 'infant'] is True
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['nymph'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['nymph'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['larva'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['fawn'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['puppy', 'pup', 'whelp'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['duckling'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['calf'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['kit'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is False
2024-06-11 20:43:27 root INFO     [' young', ' youngster', ' coc', ' kitten', ' baby'] matches ['grub', 'maggot'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' c'] matches ['kid'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' puppy'] matches ['fingerling', 'fry'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['fingerling', 'fry'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['foal', 'colt', 'filly'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['larva'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['cub'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['kit', 'cub'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' baby', ' youngster', ' kitten'] matches ['kit'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' puppy', ' kitten'] matches ['calf', 'stot'] is False
2024-06-11 20:43:27 root INFO     [' young', ' youngster', ' coc', ' kitten', ' baby'] matches ['cub'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['kit', 'cub'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' kitten'] matches ['smolt'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['pup'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['cub', 'pup'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' baby', ' puppy'] matches ['kit', 'kitten'] is False
2024-06-11 20:43:27 root INFO     [' young', ' kitten', ' coc', ' baby', ' youngster'] matches ['hatchling', 'nestling'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['cub'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' youngster', ' kitten', ' baby'] matches ['fingerling'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['kit'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['calf'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' baby'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:43:27 root INFO     [' young', ' coc', ' kitten', ' youngster', ' puppy'] matches ['kit', 'cob'] is False
2024-06-11 20:43:27 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {True: 3, False: 43})
2024-06-11 20:44:31 root INFO     model + tokenizer loaded
2024-06-11 20:44:31 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:44:34 root INFO     starting operator prediction
2024-06-11 20:44:34 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 20:44:34 root INFO     [relation call] using The offspring of a {} is referred to as a
2024-06-11 20:44:38 root INFO     total operator prediction time: 3.5445735454559326 seconds
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['baby', 'infant'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['kit', 'cob'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['cub'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' juven', 'rouse'] matches ['kit', 'kitten'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['larva'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['larva'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' youngster'] matches ['calf'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' fav'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['calf', 'colt'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' fres'] matches ['kitten'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' youngster'] matches ['calf', 'heifer'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['baby', 'infant'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' fav', 'rouse'] matches ['nymph'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' juven', 'rouse'] matches ['nymph'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', ' bother', 'rouse'] matches ['larva'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' fres'] matches ['fawn'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' fres'] matches ['puppy', 'pup', 'whelp'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['duckling'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['calf'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['kit'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' toug'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' youngster'] matches ['grub', 'maggot'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' youngster', 'rouse'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' fres'] matches ['kid'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['fingerling', 'fry'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['fingerling', 'fry'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' fres'] matches ['foal', 'colt', 'filly'] is True
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['larva'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' toug'] matches ['cub'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['kit', 'cub'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['kit'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' trending', ' steady'] matches ['calf', 'stot'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['cub'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', 'rouse', ' FO', ' juven'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['kit', 'cub'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' juven', 'rouse'] matches ['smolt'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' trending'] matches ['pup'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['cub', 'pup'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['kit', 'kitten'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['hatchling', 'nestling'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' juven'] matches ['cub'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' youngster'] matches ['fingerling'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' bother'] matches ['kit'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' FO', ' young', 'rouse', ' juven'] matches ['calf'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', 'rouse', ' bother'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:44:40 root INFO     [' coc', ' young', ' FO', ' juven', 'rouse'] matches ['kit', 'cob'] is False
2024-06-11 20:44:40 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {False: 46, True: 1})
2024-06-11 20:48:05 root INFO     model + tokenizer loaded
2024-06-11 20:48:05 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:48:08 root INFO     starting operator prediction
2024-06-11 20:48:08 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 20:48:08 root INFO     [relation call] using The offspring of a {} is referred to as a
2024-06-11 20:48:12 root INFO     total operator prediction time: 3.5475211143493652 seconds
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['baby', 'infant'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['kit', 'cob'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' trending', ' inexper'] matches ['cub'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['kit', 'kitten'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['larva'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['larva'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['calf'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' trending', ' inexper'] matches ['calf', 'colt'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['kitten'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['calf', 'heifer'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['baby', 'infant'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' fav'] matches ['nymph'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['nymph'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['larva'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['fawn'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['puppy', 'pup', 'whelp'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['duckling'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['calf'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' inexper', ' FO', ' trending'] matches ['kit'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['grub', 'maggot'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['kid'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' inexper', ' FO', ' trending'] matches ['fingerling', 'fry'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' fav'] matches ['fingerling', 'fry'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['foal', 'colt', 'filly'] is True
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['larva'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' trending', ' inexper'] matches ['cub'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['kit', 'cub'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' inexper', ' FO', ' trending'] matches ['kit'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' trending', ' inexper'] matches ['calf', 'stot'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['cub'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' inexper', ' trending'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['kit', 'cub'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['smolt'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' trending', ' inexper'] matches ['pup'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['cub', 'pup'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['kit', 'kitten'] is False
2024-06-11 20:48:14 root INFO     ['rouse', ' coc', ' FO', ' trending', ' inexper'] matches ['hatchling', 'nestling'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['cub'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['kit'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['calf'] is False
2024-06-11 20:48:14 root INFO     [' coc', 'rouse', ' FO', ' inexper', ' trending'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-11 20:48:14 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {False: 44, True: 1})
2024-06-11 20:55:52 root INFO     model + tokenizer loaded
2024-06-11 20:55:52 __main__ INFO     starting test: <class 'lre.operators.JacobianIclEstimator'> on json/enckno/E06 [animal - youth].json
2024-06-11 20:56:43 root INFO     model + tokenizer loaded
2024-06-11 20:56:43 __main__ INFO     starting test: <class 'lre.operators.JacobianIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:56:46 root INFO     starting operator prediction
2024-06-11 20:56:46 lre.operators WARNING  relation has > 1 samples, will use first (ape -> ['baby', 'infant'])
2024-06-11 20:56:46 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 20:57:50 root INFO     model + tokenizer loaded
2024-06-11 20:57:50 __main__ INFO     starting test: <class 'lre.operators.JacobianIclEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:57:52 root INFO     starting operator prediction
2024-06-11 20:57:52 lre.operators WARNING  relation has > 1 samples, will use first (ape -> ['baby', 'infant'])
2024-06-11 20:57:52 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 20:58:57 root INFO     model + tokenizer loaded
2024-06-11 20:59:38 root INFO     model + tokenizer loaded
2024-06-11 20:59:38 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 20:59:41 root INFO     starting operator prediction
2024-06-11 20:59:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 21:01:23 root INFO     model + tokenizer loaded
2024-06-11 21:01:23 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 21:01:26 root INFO     starting operator prediction
2024-06-11 21:01:26 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 21:05:28 root INFO     model + tokenizer loaded
2024-06-11 21:05:28 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 21:05:31 root INFO     starting operator prediction
2024-06-11 21:05:31 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 21:06:01 root INFO     model + tokenizer loaded
2024-06-11 21:06:01 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 21:06:04 root INFO     starting operator prediction
2024-06-11 21:06:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 21:10:03 root INFO     model + tokenizer loaded
2024-06-11 21:10:03 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-11 21:10:06 root INFO     starting operator prediction
2024-06-11 21:10:06 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-11 21:26:18 root INFO     model + tokenizer loaded
2024-06-11 21:26:58 root INFO     model + tokenizer loaded
2024-06-11 21:26:58 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-11 21:27:01 root INFO     starting operator prediction
2024-06-11 21:27:01 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 09:31:49 root INFO     model + tokenizer loaded
2024-06-12 09:31:49 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 09:31:51 root INFO     starting operator prediction
2024-06-12 09:31:51 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 09:40:46 root INFO     model + tokenizer loaded
2024-06-12 09:40:46 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 09:40:49 root INFO     starting operator prediction
2024-06-12 09:40:49 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:27:15 root INFO     loading model + tokenizer
2024-06-12 10:27:33 root INFO     model + tokenizer loaded
2024-06-12 10:27:33 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:27:35 root INFO     starting operator prediction
2024-06-12 10:27:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:27:35 lre.operators INFO     estimating J for prompt:
The offspring of a salmon is referred to as a smolt
The offspring of a cattle is referred to as a calf
The offspring of a horse is referred to as a foal
The offspring of a ox is referred to as a calf
The offspring of a bee is referred to as a larva
The offspring of a cicada is referred to as a nymph
The offspring of a wolf is referred to as a cub
The offspring of a herring is referred to as a fingerling
The offspring of a ape is referred to as a
2024-06-12 10:27:36 lre.operators INFO     subject=ape, h_index=108
2024-06-12 10:27:36 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:27:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 10:33:54 root INFO     loading model + tokenizer
2024-06-12 10:34:11 root INFO     model + tokenizer loaded
2024-06-12 10:34:11 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:34:14 root INFO     starting operator prediction
2024-06-12 10:34:14 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:34:14 lre.operators INFO     estimating J for prompt:
The offspring of a beetle is referred to as a larva
The offspring of a ox is referred to as a calf
The offspring of a rabbit is referred to as a bunny
The offspring of a woodchuck is referred to as a kit
The offspring of a dog is referred to as a puppy
The offspring of a cat is referred to as a kitten
The offspring of a camel is referred to as a calf
The offspring of a sheep is referred to as a lamb
The offspring of a ape is referred to as a
2024-06-12 10:34:14 lre.operators INFO     subject=ape, h_index=103
2024-06-12 10:34:14 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:34:14 root INFO     [order_1_approx] starting weight calculation
2024-06-12 10:34:14 root INFO     [order_1_approx] weight calculation finished
2024-06-12 10:38:05 root INFO     loading model + tokenizer
2024-06-12 10:38:23 root INFO     model + tokenizer loaded
2024-06-12 10:38:23 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:38:25 root INFO     starting operator prediction
2024-06-12 10:38:25 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:38:25 lre.operators INFO     estimating J for prompt:
The offspring of a goat is referred to as a kid
The offspring of a seal is referred to as a pup
The offspring of a bear is referred to as a cub
The offspring of a tiger is referred to as a cub
The offspring of a mink is referred to as a kit
The offspring of a sheep is referred to as a lamb
The offspring of a panda is referred to as a cub
The offspring of a shark is referred to as a cub
The offspring of a ape is referred to as a
2024-06-12 10:38:25 lre.operators INFO     subject=ape, h_index=102
2024-06-12 10:38:25 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:38:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 10:46:13 root INFO     loading model + tokenizer
2024-06-12 10:46:31 root INFO     model + tokenizer loaded
2024-06-12 10:46:31 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:46:34 root INFO     starting operator prediction
2024-06-12 10:46:34 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:46:34 lre.operators INFO     estimating J for prompt:
The offspring of a whale is referred to as a calf
The offspring of a salmon is referred to as a smolt
The offspring of a woodchuck is referred to as a kit
The offspring of a pig is referred to as a piglet
The offspring of a monkey is referred to as a infant
The offspring of a shark is referred to as a cub
The offspring of a cat is referred to as a kitten
The offspring of a raccoon is referred to as a kit
The offspring of a ape is referred to as a
2024-06-12 10:46:34 lre.operators INFO     subject=ape, h_index=105
2024-06-12 10:46:34 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:46:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 10:48:57 root INFO     loading model + tokenizer
2024-06-12 10:49:14 root INFO     model + tokenizer loaded
2024-06-12 10:49:14 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:49:16 root INFO     starting operator prediction
2024-06-12 10:49:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:49:16 lre.operators INFO     estimating J for prompt:
The offspring of a duck is referred to as a duckling
The offspring of a skunk is referred to as a kit
The offspring of a salmon is referred to as a smolt
The offspring of a chimpanzee is referred to as a baby
The offspring of a butterfly is referred to as a larva
The offspring of a shark is referred to as a cub
The offspring of a fox is referred to as a cub
The offspring of a whale is referred to as a calf
The offspring of a ape is referred to as a
2024-06-12 10:49:16 lre.operators INFO     subject=ape, h_index=105
2024-06-12 10:49:16 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:49:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 10:51:20 root INFO     loading model + tokenizer
2024-06-12 10:51:38 root INFO     model + tokenizer loaded
2024-06-12 10:51:38 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:51:41 root INFO     starting operator prediction
2024-06-12 10:51:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:51:41 lre.operators INFO     estimating J for prompt:
The offspring of a cattle is referred to as a calf
The offspring of a salmon is referred to as a smolt
The offspring of a goldfish is referred to as a fingerling
The offspring of a trout is referred to as a fingerling
The offspring of a ferret is referred to as a kit
The offspring of a fox is referred to as a cub
The offspring of a beaver is referred to as a kit
The offspring of a woodchuck is referred to as a kit
The offspring of a ape is referred to as a
2024-06-12 10:51:41 lre.operators INFO     subject=ape, h_index=108
2024-06-12 10:51:41 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:51:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 10:54:17 root INFO     loading model + tokenizer
2024-06-12 10:54:34 root INFO     model + tokenizer loaded
2024-06-12 10:54:34 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 10:54:37 root INFO     starting operator prediction
2024-06-12 10:54:37 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 10:54:37 lre.operators INFO     estimating J for prompt:
The offspring of a seal is referred to as a pup
The offspring of a mink is referred to as a kit
The offspring of a bee is referred to as a larva
The offspring of a whale is referred to as a calf
The offspring of a muskrat is referred to as a kit
The offspring of a elephant is referred to as a calf
The offspring of a cockroach is referred to as a nymph
The offspring of a woodchuck is referred to as a kit
The offspring of a ape is referred to as a
2024-06-12 10:54:37 lre.operators INFO     subject=ape, h_index=108
2024-06-12 10:54:37 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 10:54:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:01:29 root INFO     loading model + tokenizer
2024-06-12 11:01:47 root INFO     model + tokenizer loaded
2024-06-12 11:01:47 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 11:01:49 root INFO     starting operator prediction
2024-06-12 11:01:49 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 11:01:49 lre.operators INFO     estimating J for prompt:
The offspring of a snake is referred to as a hatchling
The offspring of a ferret is referred to as a kit
The offspring of a fish is referred to as a fingerling
The offspring of a panda is referred to as a cub
The offspring of a wolf is referred to as a cub
The offspring of a badger is referred to as a kit
The offspring of a cricket is referred to as a larva
The offspring of a monkey is referred to as a infant
The offspring of a ape is referred to as a
2024-06-12 11:01:49 lre.operators INFO     subject=ape, h_index=106
2024-06-12 11:01:49 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:01:49 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:06:10 root INFO     loading model + tokenizer
2024-06-12 11:06:27 root INFO     model + tokenizer loaded
2024-06-12 11:06:27 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 11:06:30 root INFO     starting operator prediction
2024-06-12 11:06:30 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 11:06:30 lre.operators INFO     estimating J for prompt:
The offspring of a chimpanzee is referred to as a baby
The offspring of a beetle is referred to as a larva
The offspring of a lion is referred to as a cub
The offspring of a cicada is referred to as a nymph
The offspring of a fly is referred to as a grub
The offspring of a badger is referred to as a kit
The offspring of a duck is referred to as a duckling
The offspring of a tiger is referred to as a cub
The offspring of a ape is referred to as a
2024-06-12 11:06:30 lre.operators INFO     subject=ape, h_index=108
2024-06-12 11:06:30 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:06:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:11:05 root INFO     loading model + tokenizer
2024-06-12 11:11:23 root INFO     model + tokenizer loaded
2024-06-12 11:11:23 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 11:11:26 root INFO     starting operator prediction
2024-06-12 11:11:26 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 11:11:26 lre.operators INFO     estimating J for prompt:
The offspring of a trout is referred to as a fingerling
The offspring of a goat is referred to as a kid
The offspring of a fly is referred to as a grub
The offspring of a deer is referred to as a fawn
The offspring of a raccoon is referred to as a kit
The offspring of a chimpanzee is referred to as a baby
The offspring of a buffalo is referred to as a calf
The offspring of a cicada is referred to as a nymph
The offspring of a ape is referred to as a
2024-06-12 11:11:26 lre.operators INFO     subject=ape, h_index=108
2024-06-12 11:11:26 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:11:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:13:25 root INFO     loading model + tokenizer
2024-06-12 11:13:42 root INFO     model + tokenizer loaded
2024-06-12 11:13:42 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 11:13:44 root INFO     starting operator prediction
2024-06-12 11:13:44 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 11:13:44 lre.operators INFO     estimating J for prompt:
The offspring of a badger is referred to as a kit
The offspring of a ferret is referred to as a kit
The offspring of a shark is referred to as a cub
The offspring of a cicada is referred to as a nymph
The offspring of a cat is referred to as a kitten
The offspring of a lion is referred to as a cub
The offspring of a gorilla is referred to as a infant
The offspring of a duck is referred to as a duckling
The offspring of a ape is referred to as a
2024-06-12 11:13:44 lre.operators INFO     subject=ape, h_index=106
2024-06-12 11:13:44 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:13:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:31:45 root INFO     loading model + tokenizer
2024-06-12 11:32:03 root INFO     model + tokenizer loaded
2024-06-12 11:32:03 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 11:32:06 root INFO     starting operator prediction
2024-06-12 11:32:06 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 11:32:06 lre.operators INFO     estimating J for prompt:
The offspring of a cicada is referred to as a nymph
The offspring of a rabbit is referred to as a bunny
The offspring of a dog is referred to as a puppy
The offspring of a herring is referred to as a fingerling
The offspring of a insect is referred to as a larva
The offspring of a ferret is referred to as a kit
The offspring of a mink is referred to as a kit
The offspring of a elephant is referred to as a calf
The offspring of a ape is referred to as a
2024-06-12 11:32:06 lre.operators INFO     subject=ape, h_index=108
2024-06-12 11:32:06 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:32:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:37:49 root INFO     loading model + tokenizer
2024-06-12 11:38:08 root INFO     model + tokenizer loaded
2024-06-12 11:38:08 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 11:38:11 root INFO     starting operator prediction
2024-06-12 11:38:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 11:38:11 lre.operators INFO     estimating J for prompt:
The offspring of a ferret is referred to as a kit
The offspring of a butterfly is referred to as a larva
The offspring of a insect is referred to as a larva
The offspring of a duck is referred to as a duckling
The offspring of a beetle is referred to as a larva
The offspring of a whale is referred to as a calf
The offspring of a snake is referred to as a hatchling
The offspring of a seal is referred to as a pup
The offspring of a ape is referred to as a
2024-06-12 11:38:11 lre.operators INFO     subject=ape, h_index=106
2024-06-12 11:38:11 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:38:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:42:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 11:42:16 lre.operators INFO     [Jacobian] FINISHED order_1_approx
2024-06-12 11:42:16 lre.operators INFO     estimating J for prompt:
The offspring of a ferret is referred to as a kit
The offspring of a snake is referred to as a hatchling
The offspring of a monkey is referred to as a infant
The offspring of a ox is referred to as a calf
The offspring of a fly is referred to as a grub
The offspring of a horse is referred to as a foal
The offspring of a skunk is referred to as a kit
The offspring of a whale is referred to as a calf
The offspring of a badger is referred to as a
2024-06-12 11:42:16 lre.operators INFO     subject=badger, h_index=106
2024-06-12 11:42:16 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:42:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:46:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 11:46:21 lre.operators INFO     [Jacobian] FINISHED order_1_approx
2024-06-12 11:46:21 lre.operators INFO     estimating J for prompt:
The offspring of a lion is referred to as a cub
The offspring of a badger is referred to as a kit
The offspring of a tiger is referred to as a cub
The offspring of a bee is referred to as a larva
The offspring of a cattle is referred to as a calf
The offspring of a beaver is referred to as a kit
The offspring of a ape is referred to as a baby
The offspring of a wolf is referred to as a cub
The offspring of a bear is referred to as a
2024-06-12 11:46:21 lre.operators INFO     subject=bear, h_index=103
2024-06-12 11:46:21 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:46:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:50:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 11:50:28 lre.operators INFO     [Jacobian] FINISHED order_1_approx
2024-06-12 11:50:28 lre.operators INFO     estimating J for prompt:
The offspring of a skunk is referred to as a kit
The offspring of a woodchuck is referred to as a kit
The offspring of a insect is referred to as a larva
The offspring of a ape is referred to as a baby
The offspring of a fish is referred to as a fingerling
The offspring of a ox is referred to as a calf
The offspring of a deer is referred to as a fawn
The offspring of a goat is referred to as a kid
The offspring of a beaver is referred to as a
2024-06-12 11:50:28 lre.operators INFO     subject=beaver, h_index=107
2024-06-12 11:50:28 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:50:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:54:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 11:54:34 lre.operators INFO     [Jacobian] FINISHED order_1_approx
2024-06-12 11:54:34 lre.operators INFO     estimating J for prompt:
The offspring of a woodchuck is referred to as a kit
The offspring of a trout is referred to as a fingerling
The offspring of a monkey is referred to as a infant
The offspring of a dog is referred to as a puppy
The offspring of a buffalo is referred to as a calf
The offspring of a salmon is referred to as a smolt
The offspring of a chimpanzee is referred to as a baby
The offspring of a beetle is referred to as a larva
The offspring of a bee is referred to as a
2024-06-12 11:54:34 lre.operators INFO     subject=bee, h_index=106
2024-06-12 11:54:34 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 11:54:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 11:59:53 root INFO     loading model + tokenizer
2024-06-12 12:00:38 root INFO     loading model + tokenizer
2024-06-12 12:00:58 root INFO     model + tokenizer loaded
2024-06-12 12:01:24 root INFO     loading model + tokenizer
2024-06-12 12:01:50 root INFO     loading model + tokenizer
2024-06-12 12:02:09 root INFO     model + tokenizer loaded
2024-06-12 12:02:09 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 12:02:39 root INFO     loading model + tokenizer
2024-06-12 12:02:58 root INFO     model + tokenizer loaded
2024-06-12 12:02:58 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 12:03:01 root INFO     starting operator prediction
2024-06-12 12:03:01 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 12:03:01 root INFO     using cuda:0
2024-06-12 12:03:01 lre.operators INFO     estimating J for prompt:
The offspring of a ferret is referred to as a kit
The offspring of a skunk is referred to as a kit
The offspring of a gorilla is referred to as a infant
The offspring of a monkey is referred to as a infant
The offspring of a whale is referred to as a calf
The offspring of a fox is referred to as a cub
The offspring of a dog is referred to as a puppy
The offspring of a panda is referred to as a cub
The offspring of a ape is referred to as a
2024-06-12 12:03:01 lre.operators INFO     subject=ape, h_index=103
2024-06-12 12:03:01 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 12:03:01 root INFO     [order_1_approx] starting weight calculation
2024-06-12 12:44:42 root INFO     loading model + tokenizer
2024-06-12 12:45:01 root INFO     model + tokenizer loaded
2024-06-12 12:45:01 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 12:45:04 root INFO     starting operator prediction
2024-06-12 12:45:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 12:45:04 lre.operators INFO     estimating J for prompt:
The offspring of a fish is referred to as a fingerling
The offspring of a panda is referred to as a cub
The offspring of a cockroach is referred to as a nymph
The offspring of a ox is referred to as a calf
The offspring of a horse is referred to as a foal
The offspring of a lion is referred to as a cub
The offspring of a shark is referred to as a cub
The offspring of a whale is referred to as a calf
The offspring of a ape is referred to as a
2024-06-12 13:00:43 root INFO     loading model + tokenizer
2024-06-12 13:00:59 root INFO     model + tokenizer loaded
2024-06-12 13:00:59 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:01:02 root INFO     starting operator prediction
2024-06-12 13:01:02 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:01:23 root INFO     loading model + tokenizer
2024-06-12 13:01:39 root INFO     model + tokenizer loaded
2024-06-12 13:01:39 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:01:42 root INFO     starting operator prediction
2024-06-12 13:01:42 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:03:18 root INFO     loading model + tokenizer
2024-06-12 13:03:34 root INFO     model + tokenizer loaded
2024-06-12 13:03:35 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:03:37 root INFO     starting operator prediction
2024-06-12 13:03:37 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:04:09 root INFO     loading model + tokenizer
2024-06-12 13:04:25 root INFO     model + tokenizer loaded
2024-06-12 13:04:26 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:04:28 root INFO     starting operator prediction
2024-06-12 13:04:28 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:04:31 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 13:04:32 root INFO     [order_1_approx] starting weight calculation
2024-06-12 13:08:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 13:08:29 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 13:08:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 13:13:26 root INFO     loading model + tokenizer
2024-06-12 13:13:58 root INFO     loading model + tokenizer
2024-06-12 13:14:14 root INFO     model + tokenizer loaded
2024-06-12 13:14:14 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:14:19 root INFO     starting operator prediction
2024-06-12 13:14:19 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:14:19 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 13:15:53 root INFO     loading model + tokenizer
2024-06-12 13:16:09 root INFO     model + tokenizer loaded
2024-06-12 13:16:09 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:16:14 root INFO     starting operator prediction
2024-06-12 13:16:14 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:16:14 lre.operators INFO     [Jacobian] STARTED order_1_approx
2024-06-12 13:31:14 root INFO     loading model + tokenizer
2024-06-12 13:31:30 root INFO     model + tokenizer loaded
2024-06-12 13:31:30 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:32:12 root INFO     loading model + tokenizer
2024-06-12 13:32:28 root INFO     model + tokenizer loaded
2024-06-12 13:32:28 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:35:33 root INFO     loading model + tokenizer
2024-06-12 13:35:50 root INFO     model + tokenizer loaded
2024-06-12 13:35:50 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:35:54 root INFO     starting operator prediction
2024-06-12 13:35:54 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:41:06 root INFO     loading model + tokenizer
2024-06-12 13:41:22 root INFO     model + tokenizer loaded
2024-06-12 13:41:22 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:42:08 root INFO     loading model + tokenizer
2024-06-12 13:42:25 root INFO     model + tokenizer loaded
2024-06-12 13:42:25 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:43:42 root INFO     loading model + tokenizer
2024-06-12 13:43:58 root INFO     model + tokenizer loaded
2024-06-12 13:43:58 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:44:03 root INFO     starting operator prediction
2024-06-12 13:44:03 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:44:21 root INFO     loading model + tokenizer
2024-06-12 13:44:38 root INFO     model + tokenizer loaded
2024-06-12 13:44:38 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 13:44:40 root INFO     starting operator prediction
2024-06-12 13:44:40 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 13:44:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 13:48:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 13:48:40 root INFO     [order_1_approx] starting weight calculation

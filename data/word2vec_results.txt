2024-06-12 14:29:49 root INFO     loading model + tokenizer
2024-06-12 14:32:14 root INFO     model + tokenizer loaded
2024-06-12 14:32:14 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 14:32:19 root INFO     starting operator prediction
2024-06-12 14:32:19 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 14:32:20 root INFO     [order_1_approx] starting weight calculation
2024-06-12 14:36:19 root INFO     [order_1_approx] weight calculation finished
2024-06-12 14:36:20 root INFO     [order_1_approx] starting weight calculation
2024-06-12 14:40:19 root INFO     [order_1_approx] weight calculation finished
2024-06-12 14:40:19 root INFO     [order_1_approx] starting weight calculation
2024-06-12 14:44:25 root INFO     [order_1_approx] weight calculation finished
2024-06-12 14:44:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 14:48:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 14:48:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 14:52:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 14:52:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 14:56:43 root INFO     [order_1_approx] weight calculation finished
2024-06-12 14:56:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:00:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:00:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:04:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:06:25 root INFO     loading model + tokenizer
2024-06-12 15:06:41 root INFO     model + tokenizer loaded
2024-06-12 15:06:41 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 15:06:44 root INFO     starting operator prediction
2024-06-12 15:06:44 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 15:06:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:10:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:10:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:14:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:14:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:18:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:18:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:22:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:22:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:26:19 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:26:19 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:30:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:30:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:34:07 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:34:07 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:37:56 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:48:10 root INFO     loading model + tokenizer
2024-06-12 15:48:26 root INFO     model + tokenizer loaded
2024-06-12 15:48:26 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 15:48:29 root INFO     starting operator prediction
2024-06-12 15:48:29 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 15:48:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 15:52:20 root INFO     [order_1_approx] weight calculation finished
2024-06-12 15:52:20 lre.operators INFO     [Jacobian] FINISHED order_1_approx 0/8
2024-06-12 15:52:20 root INFO     total operator prediction time: 231.03941559791565 seconds
2024-06-12 15:54:12 root INFO     loading model + tokenizer
2024-06-12 15:54:28 root INFO     model + tokenizer loaded
2024-06-12 15:54:28 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 15:54:31 root INFO     starting operator prediction
2024-06-12 15:54:31 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 15:57:00 root INFO     loading model + tokenizer
2024-06-12 15:57:16 root INFO     model + tokenizer loaded
2024-06-12 15:57:16 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 15:57:19 root INFO     starting operator prediction
2024-06-12 15:57:19 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:00:07 root INFO     loading model + tokenizer
2024-06-12 16:00:24 root INFO     model + tokenizer loaded
2024-06-12 16:00:24 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:00:27 root INFO     starting operator prediction
2024-06-12 16:00:27 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:01:16 root INFO     loading model + tokenizer
2024-06-12 16:01:32 root INFO     model + tokenizer loaded
2024-06-12 16:01:32 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:01:35 root INFO     starting operator prediction
2024-06-12 16:01:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:08:38 root INFO     loading model + tokenizer
2024-06-12 16:08:54 root INFO     model + tokenizer loaded
2024-06-12 16:08:54 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:08:57 root INFO     starting operator prediction
2024-06-12 16:08:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:11:24 root INFO     loading model + tokenizer
2024-06-12 16:11:40 root INFO     model + tokenizer loaded
2024-06-12 16:11:40 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:11:43 root INFO     starting operator prediction
2024-06-12 16:11:43 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:12:48 root INFO     loading model + tokenizer
2024-06-12 16:13:04 root INFO     model + tokenizer loaded
2024-06-12 16:13:04 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:13:07 root INFO     starting operator prediction
2024-06-12 16:13:07 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:16:35 root INFO     loading model + tokenizer
2024-06-12 16:16:51 root INFO     model + tokenizer loaded
2024-06-12 16:16:51 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:16:54 root INFO     starting operator prediction
2024-06-12 16:16:54 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:16:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 16:20:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 16:20:54 lre.operators INFO     [Jacobian] FINISHED order_1_approx 0/8
2024-06-12 16:20:54 root INFO     total operator prediction time: 239.75668787956238 seconds
2024-06-12 16:23:43 root INFO     loading model + tokenizer
2024-06-12 16:23:59 root INFO     model + tokenizer loaded
2024-06-12 16:23:59 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:24:02 root INFO     starting operator prediction
2024-06-12 16:24:02 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:24:02 root INFO     [order_1_approx] starting weight calculation
2024-06-12 16:24:47 root INFO     loading model + tokenizer
2024-06-12 16:24:52 root INFO     loading model + tokenizer
2024-06-12 16:25:09 root INFO     model + tokenizer loaded
2024-06-12 16:25:09 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:25:11 root INFO     starting operator prediction
2024-06-12 16:25:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:25:12 root INFO     [order_1_approx] starting weight calculation
2024-06-12 16:29:12 root INFO     [order_1_approx] weight calculation finished
2024-06-12 16:29:12 lre.operators INFO     [Jacobian] FINISHED order_1_approx 0/8
2024-06-12 16:29:12 root INFO     total operator prediction time: 240.74822211265564 seconds
2024-06-12 16:30:49 root INFO     loading model + tokenizer
2024-06-12 16:31:05 root INFO     model + tokenizer loaded
2024-06-12 16:31:05 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:31:08 root INFO     starting operator prediction
2024-06-12 16:31:08 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:31:08 root INFO     [order_1_approx] starting weight calculation
2024-06-12 16:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 16:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 16:35:04 lre.operators INFO     [Jacobian] FINISHED order_1_approx 0/8
2024-06-12 16:35:04 root INFO     total operator prediction time: 236.01957893371582 seconds
2024-06-12 16:36:46 root INFO     loading model + tokenizer
2024-06-12 16:37:02 root INFO     model + tokenizer loaded
2024-06-12 16:37:02 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 16:37:05 root INFO     starting operator prediction
2024-06-12 16:37:05 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 16:37:05 root INFO     [order_1_approx] starting weight calculation
2024-06-12 16:40:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 16:40:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 16:40:58 lre.operators INFO     [Jacobian] FINISHED order_1_approx 0/8
2024-06-12 16:40:58 root INFO     total operator prediction time: 233.17193865776062 seconds
2024-06-12 17:09:08 root INFO     loading model + tokenizer
2024-06-12 17:09:24 root INFO     model + tokenizer loaded
2024-06-12 17:09:24 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:09:27 root INFO     starting operator prediction
2024-06-12 17:09:27 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:09:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:09:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:09:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:10:17 root INFO     loading model + tokenizer
2024-06-12 17:10:33 root INFO     model + tokenizer loaded
2024-06-12 17:10:33 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:10:36 root INFO     starting operator prediction
2024-06-12 17:10:36 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:10:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:10:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:10:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:10:51 root INFO     loading model + tokenizer
2024-06-12 17:11:07 root INFO     model + tokenizer loaded
2024-06-12 17:11:07 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:11:10 root INFO     starting operator prediction
2024-06-12 17:11:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:11:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:11:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:11:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:11:10 lre.operators INFO     [Jacobian] FINISHED order_1_approx 0/8
2024-06-12 17:11:10 root INFO     total operator prediction time: 0.1878831386566162 seconds
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['baby', 'infant'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit', 'cob'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit', 'kitten'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['larva'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['larva'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['calf'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['calf', 'colt'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kitten'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['calf', 'heifer'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['baby', 'infant'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['nymph'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['nymph'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['larva'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['fawn'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['puppy', 'pup', 'whelp'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['duckling'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['calf'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['grub', 'maggot'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kid'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['fingerling', 'fry'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['fingerling', 'fry'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['foal', 'colt', 'filly'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['larva'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit', 'cub'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['calf', 'stot'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['piglet', 'shoat', 'farrow'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit', 'cub'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['smolt'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['pup'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub', 'pup'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit', 'kitten'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['hatchling', 'nestling'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['fingerling'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['calf'] is True
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['cub', 'pup', 'puppy', 'whelp'] is False
2024-06-12 17:11:12 root INFO     [' f', ' do', ' kit', ' calf', ' buck'] matches ['kit', 'cob'] is True
2024-06-12 17:11:12 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {False: 24, True: 23})
2024-06-12 17:23:11 root INFO     loading model + tokenizer
2024-06-12 17:23:27 root INFO     model + tokenizer loaded
2024-06-12 17:23:27 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:23:30 root INFO     starting operator prediction
2024-06-12 17:23:30 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:24:03 root INFO     loading model + tokenizer
2024-06-12 17:24:20 root INFO     model + tokenizer loaded
2024-06-12 17:24:20 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:24:22 root INFO     starting operator prediction
2024-06-12 17:24:22 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:25:56 root INFO     loading model + tokenizer
2024-06-12 17:26:12 root INFO     model + tokenizer loaded
2024-06-12 17:26:13 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:26:15 root INFO     starting operator prediction
2024-06-12 17:26:15 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:28:21 root INFO     loading model + tokenizer
2024-06-12 17:28:37 root INFO     model + tokenizer loaded
2024-06-12 17:28:37 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:28:40 root INFO     starting operator prediction
2024-06-12 17:28:40 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:29:01 root INFO     loading model + tokenizer
2024-06-12 17:29:18 root INFO     model + tokenizer loaded
2024-06-12 17:29:18 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:29:20 root INFO     starting operator prediction
2024-06-12 17:29:20 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:29:20 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:20 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:20 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:29:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:29:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:29:22 root INFO     total operator prediction time: 1.3615589141845703 seconds
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['baby', 'infant'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit', 'cob'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit', 'kitten'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['larva'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['larva'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['calf'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['calf', 'colt'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kitten'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['calf', 'heifer'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['baby', 'infant'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['nymph'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['nymph'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['larva'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['fawn'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['puppy', 'pup', 'whelp'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['duckling'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['calf'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['grub', 'maggot'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kid'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['fingerling', 'fry'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['fingerling', 'fry'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['foal', 'colt', 'filly'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['larva'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit', 'cub'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['calf', 'stot'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit', 'cub'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['smolt'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['pup'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub', 'pup'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit', 'kitten'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['hatchling', 'nestling'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['fingerling'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['calf'] is False
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-12 17:29:24 root INFO     [' pup', ' baby', ' young', ' lar', ' puppy'] matches ['kit', 'cob'] is False
2024-06-12 17:29:24 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {True: 13, False: 34})
2024-06-12 17:31:40 root INFO     loading model + tokenizer
2024-06-12 17:31:56 root INFO     model + tokenizer loaded
2024-06-12 17:31:56 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - youth', prompt_templates=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], prompt_templates_zs=['The offspring of a {} is referred to as a', 'The young version of {} is', 'When a {} is young, it is called a'], samples=[RelationSample(subject='ape', object=['baby', 'infant']), RelationSample(subject='badger', object=['kit', 'cob']), RelationSample(subject='bear', object=['cub']), RelationSample(subject='beaver', object=['kit', 'kitten']), RelationSample(subject='bee', object=['larva']), RelationSample(subject='beetle', object=['larva']), RelationSample(subject='buffalo', object=['calf']), RelationSample(subject='butterfly', object=['larva', 'pupa', 'caterpillar', 'chrysalis']), RelationSample(subject='camel', object=['calf', 'colt']), RelationSample(subject='cat', object=['kitten']), RelationSample(subject='cattle', object=['calf', 'heifer']), RelationSample(subject='chimpanzee', object=['baby', 'infant']), RelationSample(subject='cicada', object=['nymph']), RelationSample(subject='cockroach', object=['nymph']), RelationSample(subject='cricket', object=['larva']), RelationSample(subject='deer', object=['fawn']), RelationSample(subject='dog', object=['puppy', 'pup', 'whelp']), RelationSample(subject='duck', object=['duckling']), RelationSample(subject='elephant', object=['calf']), RelationSample(subject='ferret', object=['kit']), RelationSample(subject='fish', object=['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow']), RelationSample(subject='fly', object=['grub', 'maggot']), RelationSample(subject='fox', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='goat', object=['kid']), RelationSample(subject='goldfish', object=['fingerling', 'fry']), RelationSample(subject='gorilla', object=['infant']), RelationSample(subject='herring', object=['fingerling', 'fry']), RelationSample(subject='horse', object=['foal', 'colt', 'filly']), RelationSample(subject='insect', object=['larva']), RelationSample(subject='lion', object=['cub']), RelationSample(subject='mink', object=['kit', 'cub']), RelationSample(subject='monkey', object=['infant']), RelationSample(subject='muskrat', object=['kit']), RelationSample(subject='ox', object=['calf', 'stot']), RelationSample(subject='panda', object=['cub']), RelationSample(subject='pig', object=['piglet', 'shoat', 'farrow']), RelationSample(subject='rabbit', object=['bunny']), RelationSample(subject='raccoon', object=['kit', 'cub']), RelationSample(subject='salmon', object=['smolt']), RelationSample(subject='seal', object=['pup']), RelationSample(subject='shark', object=['cub', 'pup']), RelationSample(subject='sheep', object=['lamb', 'lambkin', 'cosset']), RelationSample(subject='skunk', object=['kit', 'kitten']), RelationSample(subject='snake', object=['hatchling', 'nestling']), RelationSample(subject='tiger', object=['cub']), RelationSample(subject='trout', object=['fingerling']), RelationSample(subject='weasel', object=['kit']), RelationSample(subject='whale', object=['calf']), RelationSample(subject='wolf', object=['cub', 'pup', 'puppy', 'whelp']), RelationSample(subject='woodchuck', object=['kit', 'cob'])], _domain=None, _range=None)
2024-06-12 17:31:59 root INFO     starting operator prediction
2024-06-12 17:31:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The offspring of a {} is referred to as a)
2024-06-12 17:31:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:31:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:31:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:31:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:31:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:31:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:31:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:31:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:31:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:32:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:32:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:32:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:32:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:32:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:32:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:32:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:32:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:32:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:32:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:32:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:32:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:32:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:32:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:32:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:32:00 root INFO     total operator prediction time: 1.3475267887115479 seconds
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['baby', 'infant'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit', 'cob'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit', 'kitten'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['larva'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['larva'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['calf'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['larva', 'pupa', 'caterpillar', 'chrysalis'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['calf', 'colt'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kitten'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['calf', 'heifer'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['baby', 'infant'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['nymph'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['nymph'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['larva'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['fawn'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['puppy', 'pup', 'whelp'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['duckling'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['calf'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['fingerling', 'spawn', 'egg', 'larva', 'fry', 'minnmow'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['grub', 'maggot'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kid'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['fingerling', 'fry'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['fingerling', 'fry'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['foal', 'colt', 'filly'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['larva'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit', 'cub'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['calf', 'stot'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['piglet', 'shoat', 'farrow'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit', 'cub'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['smolt'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['pup'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub', 'pup'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['lamb', 'lambkin', 'cosset'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit', 'kitten'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['hatchling', 'nestling'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['fingerling'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['calf'] is False
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['cub', 'pup', 'puppy', 'whelp'] is True
2024-06-12 17:32:03 root INFO     [' baby', ' pup', ' kid', ' young', ' cub'] matches ['kit', 'cob'] is False
2024-06-12 17:32:03 root INFO     animal - youth (50) total: defaultdict(<class 'int'>, {True: 15, False: 32})
2024-06-12 17:33:07 root INFO     loading model + tokenizer
2024-06-12 17:33:23 root INFO     model + tokenizer loaded
2024-06-12 17:33:23 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:33:26 root INFO     starting operator prediction
2024-06-12 17:33:26 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:33:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:26 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:26 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:26 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:26 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:27 root INFO     total operator prediction time: 1.3483059406280518 seconds
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['angrier'] is True
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['cheaper'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['cleverer'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['coarser'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['costlier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['cuter'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['denser'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['dumber'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['fiercer'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['handier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['happier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['hardier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['harsher'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['healthier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['hotter'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['huger'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['hungrier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['lazier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['lengthier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['luckier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['madder'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['merrier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['milder'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['moister'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['nastier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['neater'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['nicer'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['noisier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['prouder'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['purer'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['riskier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['rockier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['ruder'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['sadder'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['scarier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['sexier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['stickier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['stricter'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['stronger'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['subtler'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['sunnier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['tastier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['tinier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['trickier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['uglier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['vaguer'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['vaster'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['weaker'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['wealthier'] is False
2024-06-12 17:33:30 root INFO     [' more', ' much', ' a', ' ', '\n'] matches ['weirder'] is False
2024-06-12 17:33:30 root INFO     adj - comparative (50) total: defaultdict(<class 'int'>, {True: 1, False: 49})
2024-06-12 17:33:30 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-12 17:33:32 root INFO     starting operator prediction
2024-06-12 17:33:32 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 17:33:32 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:32 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:32 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:34 root INFO     total operator prediction time: 1.411036491394043 seconds
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['albums'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['applications'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['areas'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['cars'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['colleges'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['councils'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['customers'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['days'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['deaths'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['departments'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['developments'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['differences'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['directors'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['events'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['examples'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['facts'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['friends'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['gods'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['governments'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['hours'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['ideas'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['languages'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['laws'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['members'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['months'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['nights'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['offices'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['periods'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['players'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['populations'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['problems'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['products'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['resources'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['rivers'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['roads'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['roles'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['sciences'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['solutions'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['songs'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['streets'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['students'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['systems'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['things'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['towns'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['users'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['versions'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['villages'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['websites'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['weeks'] is False
2024-06-12 17:33:36 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['years'] is False
2024-06-12 17:33:36 root INFO     noun - plural_reg (50) total: defaultdict(<class 'int'>, {True: 1, False: 99})
2024-06-12 17:33:36 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-12 17:33:38 root INFO     starting operator prediction
2024-06-12 17:33:38 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-12 17:33:38 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:38 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:38 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:40 root INFO     total operator prediction time: 1.396517276763916 seconds
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['accepted'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['achieved'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['added'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['agreed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['allowed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['announced'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['appeared'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['applied'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['asked'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['attended'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['became'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['believed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['considered'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['continued'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['created'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['decided'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['described'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['developed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['discovered'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['enjoyed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['ensured'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['established'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['expected'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['followed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['heard'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['identified'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['improved'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['included'] is True
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['introduced'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['involved'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['located'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['lost'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['managed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['married'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['performed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['provided'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['published'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['received'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['reduced'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['referred'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['related'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['remained'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['replaced'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['required'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['seemed'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['sent'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['spent'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['told'] is True
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['understood'] is False
2024-06-12 17:33:42 root INFO     ['\n', ' included', ' to', ' ', ' not'] matches ['united'] is False
2024-06-12 17:33:42 root INFO     verb_inf - Ved (50) total: defaultdict(<class 'int'>, {True: 3, False: 147})
2024-06-12 17:33:42 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-12 17:33:44 root INFO     starting operator prediction
2024-06-12 17:33:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:44 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:44 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:46 root INFO     total operator prediction time: 1.415684461593628 seconds
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['added'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['agreed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['allowed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['announced'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['appeared'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['applied'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['appointed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['asked'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['attended'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['became'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['considered'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['contained'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['continued'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['created'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['decided'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['described'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['developed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['established'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['existed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['expected'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['failed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['followed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['heard'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['improved'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['included'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['introduced'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['involved'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['located'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['lost'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['managed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['married'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['operated'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['performed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['proposed'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['provided'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['published'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['received'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['reduced'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['related'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['remained'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['replaced'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['represented'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['required'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['sent'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['spent'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['suffered'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['taught'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['told'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['understood'] is False
2024-06-12 17:33:48 root INFO     [' been', '\n', ' ', ' not', '...'] matches ['united'] is False
2024-06-12 17:33:48 root INFO     verb_Ving - Ved (50) total: defaultdict(<class 'int'>, {True: 3, False: 197})
2024-06-12 17:33:48 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-12 17:33:50 root INFO     starting operator prediction
2024-06-12 17:33:50 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-12 17:33:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:52 root INFO     total operator prediction time: 1.427546501159668 seconds
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['ablest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['angriest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['cheapest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['cleverest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['costliest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['cruelest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['cutest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['densest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['dumbest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['fiercest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['handiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['happiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['hardiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['harshest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['healthiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['hottest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['hugest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['hungriest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['laziest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['lengthiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['luckiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['merriest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['mildest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['nastiest'] is True
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['neatest'] is True
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['nicest'] is True
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['noisiest'] is True
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['politest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['proudest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['purest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['rarest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['riskiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['rudest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['saddest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['scariest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['sexiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['shiniest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['strangest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['strictest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['strongest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['subtlest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['sunniest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['tastiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['tiniest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['trickiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['ugliest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['vaguest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['weakest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['wealthiest'] is False
2024-06-12 17:33:54 root INFO     [' most', ' the', '\n', ' n', ' least'] matches ['weirdest'] is False
2024-06-12 17:33:54 root INFO     adj - superlative (50) total: defaultdict(<class 'int'>, {True: 7, False: 243})
2024-06-12 17:33:54 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-12 17:33:57 root INFO     starting operator prediction
2024-06-12 17:33:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-12 17:33:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:33:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:33:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:33:58 root INFO     total operator prediction time: 1.4522185325622559 seconds
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['accepts'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['achieves'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['adds'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['agrees'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['allows'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['appears'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['applies'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['asks'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['avoids'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['becomes'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['believes'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['considers'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['consists'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['contains'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['continues'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['creates'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['describes'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['develops'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['enables'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['enjoys'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['ensures'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['exists'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['explains'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['follows'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['happens'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['hears'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['identifies'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['improves'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['includes'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['involves'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['learns'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['maintains'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['occurs'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['operates'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['prevents'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['promotes'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['protects'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['provides'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['receives'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['reduces'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['refers'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['remains'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['remembers'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['represents'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['requires'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['seems'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['sends'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['suggests'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['tells'] is False
2024-06-12 17:34:00 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['understands'] is False
2024-06-12 17:34:00 root INFO     verb_inf - 3pSg (50) total: defaultdict(<class 'int'>, {True: 7, False: 293})
2024-06-12 17:34:00 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='Ving - verb_inf', prompt_templates=['{} is the active form of', '{} is to'], prompt_templates_zs=['{} is the active form of', '{} is to'], samples=[RelationSample(subject='achieving', object=['achieve']), RelationSample(subject='adding', object=['add']), RelationSample(subject='allowing', object=['allow']), RelationSample(subject='appearing', object=['appear']), RelationSample(subject='applying', object=['apply']), RelationSample(subject='asking', object=['ask']), RelationSample(subject='attending', object=['attend']), RelationSample(subject='avoiding', object=['avoid']), RelationSample(subject='becoming', object=['become']), RelationSample(subject='believing', object=['believe']), RelationSample(subject='considering', object=['consider']), RelationSample(subject='containing', object=['contain']), RelationSample(subject='continuing', object=['continue']), RelationSample(subject='creating', object=['create']), RelationSample(subject='developing', object=['develop']), RelationSample(subject='encouraging', object=['encourage']), RelationSample(subject='enjoying', object=['enjoy']), RelationSample(subject='ensuring', object=['ensure']), RelationSample(subject='establishing', object=['establish']), RelationSample(subject='existing', object=['exist']), RelationSample(subject='expecting', object=['expect']), RelationSample(subject='following', object=['follow']), RelationSample(subject='happening', object=['happen']), RelationSample(subject='identifying', object=['identify']), RelationSample(subject='improving', object=['improve']), RelationSample(subject='including', object=['include']), RelationSample(subject='involving', object=['involve']), RelationSample(subject='learning', object=['learn']), RelationSample(subject='losing', object=['lose']), RelationSample(subject='maintaining', object=['maintain']), RelationSample(subject='managing', object=['manage']), RelationSample(subject='operating', object=['operate']), RelationSample(subject='performing', object=['perform']), RelationSample(subject='preventing', object=['prevent']), RelationSample(subject='promoting', object=['promote']), RelationSample(subject='protecting', object=['protect']), RelationSample(subject='providing', object=['provide']), RelationSample(subject='receiving', object=['receive']), RelationSample(subject='reducing', object=['reduce']), RelationSample(subject='referring', object=['refer']), RelationSample(subject='remaining', object=['remain']), RelationSample(subject='remembering', object=['remember']), RelationSample(subject='representing', object=['represent']), RelationSample(subject='requiring', object=['require']), RelationSample(subject='seeming', object=['seem']), RelationSample(subject='sitting', object=['sit']), RelationSample(subject='spending', object=['spend']), RelationSample(subject='teaching', object=['teach']), RelationSample(subject='telling', object=['tell']), RelationSample(subject='understanding', object=['understand'])], _domain=None, _range=None)
2024-06-12 17:34:03 root INFO     starting operator prediction
2024-06-12 17:34:03 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} is the active form of)
2024-06-12 17:34:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:03 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:03 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:03 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:03 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:04 root INFO     total operator prediction time: 1.3764405250549316 seconds
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['achieve'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['add'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['allow'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['appear'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['apply'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['ask'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['attend'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['avoid'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['become'] is True
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['believe'] is True
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['consider'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['contain'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['continue'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['create'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['develop'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['encourage'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['enjoy'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['ensure'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['establish'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['exist'] is True
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['expect'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['follow'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['happen'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['identify'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['improve'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['include'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['involve'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['learn'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['lose'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['maintain'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['manage'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['operate'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['perform'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['prevent'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['promote'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['protect'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['provide'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['receive'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['reduce'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['refer'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['remain'] is True
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['remember'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['represent'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['require'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['seem'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['sit'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['spend'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['teach'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['tell'] is False
2024-06-12 17:34:06 root INFO     ['\n', ' ', ' remain', ' exist', ' be'] matches ['understand'] is False
2024-06-12 17:34:06 root INFO     Ving - verb_inf (50) total: defaultdict(<class 'int'>, {True: 11, False: 339})
2024-06-12 17:34:07 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_3pSg - Ved', prompt_templates=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], prompt_templates_zs=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], samples=[RelationSample(subject='adds', object=['added']), RelationSample(subject='agrees', object=['agreed']), RelationSample(subject='allows', object=['allowed']), RelationSample(subject='announces', object=['announced']), RelationSample(subject='appears', object=['appeared']), RelationSample(subject='applies', object=['applied']), RelationSample(subject='appoints', object=['appointed']), RelationSample(subject='asks', object=['asked']), RelationSample(subject='becomes', object=['became']), RelationSample(subject='believes', object=['believed']), RelationSample(subject='considers', object=['considered']), RelationSample(subject='consists', object=['consisted']), RelationSample(subject='contains', object=['contained']), RelationSample(subject='continues', object=['continued']), RelationSample(subject='creates', object=['created']), RelationSample(subject='decides', object=['decided']), RelationSample(subject='describes', object=['described']), RelationSample(subject='develops', object=['developed']), RelationSample(subject='establishes', object=['established']), RelationSample(subject='expects', object=['expected']), RelationSample(subject='fails', object=['failed']), RelationSample(subject='follows', object=['followed']), RelationSample(subject='happens', object=['happened']), RelationSample(subject='hears', object=['heard']), RelationSample(subject='includes', object=['included']), RelationSample(subject='intends', object=['intended']), RelationSample(subject='introduces', object=['introduced']), RelationSample(subject='involves', object=['involved']), RelationSample(subject='locates', object=['located']), RelationSample(subject='loses', object=['lost']), RelationSample(subject='manages', object=['managed']), RelationSample(subject='marries', object=['married']), RelationSample(subject='occurs', object=['occurred']), RelationSample(subject='operates', object=['operated']), RelationSample(subject='performs', object=['performed']), RelationSample(subject='proposes', object=['proposed']), RelationSample(subject='provides', object=['provided']), RelationSample(subject='publishes', object=['published']), RelationSample(subject='receives', object=['received']), RelationSample(subject='refers', object=['referred']), RelationSample(subject='relates', object=['related']), RelationSample(subject='remains', object=['remained']), RelationSample(subject='replaces', object=['replaced']), RelationSample(subject='represents', object=['represented']), RelationSample(subject='requires', object=['required']), RelationSample(subject='seems', object=['seemed']), RelationSample(subject='sends', object=['sent']), RelationSample(subject='spends', object=['spent']), RelationSample(subject='suggests', object=['suggested']), RelationSample(subject='tells', object=['told'])], _domain=None, _range=None)
2024-06-12 17:34:09 root INFO     starting operator prediction
2024-06-12 17:34:09 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When he {} something, something has been)
2024-06-12 17:34:09 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:09 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:09 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:09 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:10 root INFO     total operator prediction time: 1.3532636165618896 seconds
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['added'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['agreed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['allowed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['announced'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['appeared'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['applied'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['appointed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['asked'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['became'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['believed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['considered'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['consisted'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['contained'] is True
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['continued'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['created'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['decided'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['described'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['developed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['established'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['expected'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['failed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['followed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['happened'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['heard'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['included'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['intended'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['introduced'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['involved'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['located'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['lost'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['managed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['married'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['occurred'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['operated'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['performed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['proposed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['provided'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['published'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['received'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['referred'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['related'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['remained'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['replaced'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['represented'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['required'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['seemed'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['sent'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['spent'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['suggested'] is False
2024-06-12 17:34:12 root INFO     ['\n', ' been', ' made', ' contained', ' had'] matches ['told'] is False
2024-06-12 17:34:12 root INFO     verb_3pSg - Ved (50) total: defaultdict(<class 'int'>, {True: 12, False: 388})
2024-06-12 17:34:13 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_Ving - 3pSg', prompt_templates=['When something is {}, it'], prompt_templates_zs=['When something is {}, it'], samples=[RelationSample(subject='adding', object=['adds']), RelationSample(subject='advertising', object=['advertises']), RelationSample(subject='allowing', object=['allows']), RelationSample(subject='appearing', object=['appears']), RelationSample(subject='applying', object=['applies']), RelationSample(subject='asking', object=['asks']), RelationSample(subject='becoming', object=['becomes']), RelationSample(subject='believing', object=['believes']), RelationSample(subject='considering', object=['considers']), RelationSample(subject='consisting', object=['consists']), RelationSample(subject='containing', object=['contains']), RelationSample(subject='continuing', object=['continues']), RelationSample(subject='creating', object=['creates']), RelationSample(subject='depending', object=['depends']), RelationSample(subject='describing', object=['describes']), RelationSample(subject='developing', object=['develops']), RelationSample(subject='discovering', object=['discovers']), RelationSample(subject='enabling', object=['enables']), RelationSample(subject='existing', object=['exists']), RelationSample(subject='explaining', object=['explains']), RelationSample(subject='following', object=['follows']), RelationSample(subject='happening', object=['happens']), RelationSample(subject='hearing', object=['hears']), RelationSample(subject='improving', object=['improves']), RelationSample(subject='including', object=['includes']), RelationSample(subject='involving', object=['involves']), RelationSample(subject='learning', object=['learns']), RelationSample(subject='losing', object=['loses']), RelationSample(subject='managing', object=['manages']), RelationSample(subject='occurring', object=['occurs']), RelationSample(subject='operating', object=['operates']), RelationSample(subject='performing', object=['performs']), RelationSample(subject='promoting', object=['promotes']), RelationSample(subject='providing', object=['provides']), RelationSample(subject='publishing', object=['publishes']), RelationSample(subject='receiving', object=['receives']), RelationSample(subject='reducing', object=['reduces']), RelationSample(subject='referring', object=['refers']), RelationSample(subject='relating', object=['relates']), RelationSample(subject='remaining', object=['remains']), RelationSample(subject='representing', object=['represents']), RelationSample(subject='requiring', object=['requires']), RelationSample(subject='seeming', object=['seems']), RelationSample(subject='sitting', object=['sits']), RelationSample(subject='spending', object=['spends']), RelationSample(subject='suggesting', object=['suggests']), RelationSample(subject='teaching', object=['teaches']), RelationSample(subject='telling', object=['tells']), RelationSample(subject='thanking', object=['thanks']), RelationSample(subject='understanding', object=['understands'])], _domain=None, _range=None)
2024-06-12 17:34:15 root INFO     starting operator prediction
2024-06-12 17:34:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:16 root INFO     total operator prediction time: 1.367995262145996 seconds
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['adds'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['advertises'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['allows'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['appears'] is True
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['applies'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['asks'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['becomes'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['believes'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['considers'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['consists'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['contains'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['continues'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['creates'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['depends'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['describes'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['develops'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['discovers'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['enables'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['exists'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['explains'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['follows'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['happens'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['hears'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['improves'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['includes'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['involves'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['learns'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['loses'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['manages'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['occurs'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['operates'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['performs'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['promotes'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['provides'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['publishes'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['receives'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['reduces'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['refers'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['relates'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['remains'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['represents'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['requires'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['seems'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['sits'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['spends'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['suggests'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['teaches'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['tells'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['thanks'] is False
2024-06-12 17:34:19 root INFO     [' is', '\n', "'s", ' appears', ' does'] matches ['understands'] is False
2024-06-12 17:34:19 root INFO     verb_Ving - 3pSg (50) total: defaultdict(<class 'int'>, {True: 13, False: 437})
2024-06-12 17:34:19 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun - plural_irreg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='ability', object=['abilities']), RelationSample(subject='academy', object=['academies']), RelationSample(subject='activity', object=['activities']), RelationSample(subject='agency', object=['agencies']), RelationSample(subject='analysis', object=['analyses']), RelationSample(subject='army', object=['armies']), RelationSample(subject='authority', object=['authorities']), RelationSample(subject='basis', object=['bases']), RelationSample(subject='business', object=['businesses']), RelationSample(subject='category', object=['categories']), RelationSample(subject='century', object=['centuries']), RelationSample(subject='child', object=['children']), RelationSample(subject='city', object=['cities']), RelationSample(subject='community', object=['communities']), RelationSample(subject='country', object=['countries']), RelationSample(subject='county', object=['counties']), RelationSample(subject='datum', object=['data']), RelationSample(subject='duty', object=['duties']), RelationSample(subject='economy', object=['economies']), RelationSample(subject='energy', object=['energies']), RelationSample(subject='entry', object=['entries']), RelationSample(subject='facility', object=['facilities']), RelationSample(subject='family', object=['families']), RelationSample(subject='formula', object=['formulae']), RelationSample(subject='history', object=['histories']), RelationSample(subject='industry', object=['industries']), RelationSample(subject='library', object=['libraries']), RelationSample(subject='life', object=['lives']), RelationSample(subject='loss', object=['losses']), RelationSample(subject='majority', object=['majorities']), RelationSample(subject='memory', object=['memories']), RelationSample(subject='opportunity', object=['opportunities']), RelationSample(subject='policy', object=['policies']), RelationSample(subject='property', object=['properties']), RelationSample(subject='responsibility', object=['responsibilities']), RelationSample(subject='safety', object=['safeties']), RelationSample(subject='secretary', object=['secretaries']), RelationSample(subject='security', object=['securities']), RelationSample(subject='series', object=['series']), RelationSample(subject='society', object=['societies']), RelationSample(subject='species', object=['species']), RelationSample(subject='story', object=['stories']), RelationSample(subject='strategy', object=['strategies']), RelationSample(subject='success', object=['successes']), RelationSample(subject='technology', object=['technologies']), RelationSample(subject='theory', object=['theories']), RelationSample(subject='university', object=['universities']), RelationSample(subject='variety', object=['varieties']), RelationSample(subject='wife', object=['wives']), RelationSample(subject='woman', object=['women'])], _domain=None, _range=None)
2024-06-12 17:34:21 root INFO     starting operator prediction
2024-06-12 17:34:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 17:34:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:22 root INFO     total operator prediction time: 1.3404982089996338 seconds
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['abilities'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['academies'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['activities'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['agencies'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['analyses'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['armies'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['authorities'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['bases'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['businesses'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['categories'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['centuries'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['children'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['cities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['communities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['countries'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['counties'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['data'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['duties'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['economies'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['energies'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['entries'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['facilities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['families'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['formulae'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['histories'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['industries'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['libraries'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['lives'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['losses'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['majorities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['memories'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['opportunities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['policies'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['properties'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['responsibilities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['safeties'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['secretaries'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['securities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['series'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['societies'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['species'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['stories'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['strategies'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['successes'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['technologies'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['theories'] is True
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['universities'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['varieties'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['wives'] is False
2024-06-12 17:34:25 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['women'] is False
2024-06-12 17:34:25 root INFO     noun - plural_irreg (50) total: defaultdict(<class 'int'>, {True: 21, False: 479})
2024-06-12 17:34:25 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+tion_irreg', prompt_templates=['To {} results in', 'To {} is to form a'], prompt_templates_zs=['To {} results in', 'To {} is to form a'], samples=[RelationSample(subject='accuse', object=['accusation']), RelationSample(subject='admire', object=['admiration']), RelationSample(subject='allege', object=['allegation']), RelationSample(subject='aspire', object=['aspiration']), RelationSample(subject='authorize', object=['authorization', 'authorisation']), RelationSample(subject='characterize', object=['characterization', 'characterisation']), RelationSample(subject='civilize', object=['civilization', 'civilisation']), RelationSample(subject='colonize', object=['colonization']), RelationSample(subject='compile', object=['compilation']), RelationSample(subject='compute', object=['computation']), RelationSample(subject='condense', object=['condensation']), RelationSample(subject='configure', object=['configuration']), RelationSample(subject='consult', object=['consulation']), RelationSample(subject='continue', object=['continuation']), RelationSample(subject='customize', object=['customization']), RelationSample(subject='declare', object=['declaration']), RelationSample(subject='degrade', object=['degradation']), RelationSample(subject='deprive', object=['deprivation']), RelationSample(subject='derive', object=['derivation']), RelationSample(subject='determine', object=['determination']), RelationSample(subject='examine', object=['examination']), RelationSample(subject='expire', object=['expiration']), RelationSample(subject='explore', object=['exploration']), RelationSample(subject='globalize', object=['globalization', 'globalisation']), RelationSample(subject='illumine', object=['illumination']), RelationSample(subject='imagine', object=['imagination']), RelationSample(subject='improvize', object=['improvization', 'improvisation']), RelationSample(subject='inspire', object=['inspiration']), RelationSample(subject='install', object=['installation', 'instalation']), RelationSample(subject='maximize', object=['maximization', 'maximisation']), RelationSample(subject='minimize', object=['minimization', 'minimisation']), RelationSample(subject='modernize', object=['modernization', 'modernisation']), RelationSample(subject='oblige', object=['obligation']), RelationSample(subject='observe', object=['observation']), RelationSample(subject='occupy', object=['occupation']), RelationSample(subject='optimize', object=['optimization', 'optimisation']), RelationSample(subject='organize', object=['organization']), RelationSample(subject='perspire', object=['perspiration']), RelationSample(subject='prepare', object=['preparation']), RelationSample(subject='privatize', object=['privatization', 'privatisation']), RelationSample(subject='randomize', object=['randomization', 'randomisation']), RelationSample(subject='realize', object=['realization', 'realisation']), RelationSample(subject='reorganize', object=['reorganization', 'reorganisation']), RelationSample(subject='restore', object=['restoration']), RelationSample(subject='specialize', object=['specialization', 'specialisation']), RelationSample(subject='stabilize', object=['stabilization']), RelationSample(subject='standardize', object=['standardization', 'standardisation']), RelationSample(subject='starve', object=['starvation']), RelationSample(subject='utilize', object=['utilization', 'utilisation']), RelationSample(subject='visualize', object=['visualization'])], _domain=None, _range=None)
2024-06-12 17:34:27 root INFO     starting operator prediction
2024-06-12 17:34:27 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in)
2024-06-12 17:34:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:28 root INFO     total operator prediction time: 1.4095864295959473 seconds
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['accusation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['admiration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['allegation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['aspiration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['authorization', 'authorisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['characterization', 'characterisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['civilization', 'civilisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['colonization'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['compilation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['computation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['condensation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['configuration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['continuation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['customization'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['declaration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['degradation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['deprivation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['derivation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['determination'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['examination'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['expiration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['exploration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['globalization', 'globalisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['illumination'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['imagination'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['improvization', 'improvisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['inspiration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['installation', 'instalation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['maximization', 'maximisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['minimization', 'minimisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['modernization', 'modernisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['obligation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['observation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['occupation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['optimization', 'optimisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['organization'] is True
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['perspiration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['preparation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['privatization', 'privatisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['randomization', 'randomisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['realization', 'realisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['reorganization', 'reorganisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['restoration'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['specialization', 'specialisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['stabilization'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['standardization', 'standardisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['starvation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['utilization', 'utilisation'] is False
2024-06-12 17:34:31 root INFO     [' the', '\n', ' ', ' organization', ' self'] matches ['visualization'] is False
2024-06-12 17:34:31 root INFO     verb+tion_irreg (50) total: defaultdict(<class 'int'>, {True: 22, False: 527})
2024-06-12 17:34:31 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='re+verb_reg', prompt_templates=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], prompt_templates_zs=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], samples=[RelationSample(subject='acquire', object=['reacquire']), RelationSample(subject='adjust', object=['readjust']), RelationSample(subject='appear', object=['reappear']), RelationSample(subject='apply', object=['reapply']), RelationSample(subject='appoint', object=['reappoint']), RelationSample(subject='arrange', object=['rearrange']), RelationSample(subject='assess', object=['reassess']), RelationSample(subject='assign', object=['reassign']), RelationSample(subject='assure', object=['reassure']), RelationSample(subject='calculate', object=['recalculate']), RelationSample(subject='cognize', object=['recognize']), RelationSample(subject='commend', object=['recommend']), RelationSample(subject='configure', object=['reconfigure']), RelationSample(subject='confirm', object=['reconfirm']), RelationSample(subject='connect', object=['reconnect']), RelationSample(subject='consider', object=['reconsider']), RelationSample(subject='create', object=['recreate']), RelationSample(subject='decorate', object=['redecorate']), RelationSample(subject='deem', object=['redeem']), RelationSample(subject='define', object=['redefine']), RelationSample(subject='develop', object=['redevelop']), RelationSample(subject='discover', object=['rediscover']), RelationSample(subject='distribute', object=['redistribute']), RelationSample(subject='emerge', object=['reemerge']), RelationSample(subject='engage', object=['reengage']), RelationSample(subject='establish', object=['reestablish']), RelationSample(subject='evaluate', object=['reevaluate']), RelationSample(subject='examine', object=['reexamine']), RelationSample(subject='generate', object=['regenerate']), RelationSample(subject='grow', object=['regrow']), RelationSample(subject='install', object=['reinstall']), RelationSample(subject='integrate', object=['reintegrate']), RelationSample(subject='interpret', object=['reinterpret']), RelationSample(subject='introduce', object=['reintroduce']), RelationSample(subject='invest', object=['reinvest']), RelationSample(subject='investigate', object=['reinvestigate']), RelationSample(subject='learn', object=['relearn']), RelationSample(subject='locate', object=['relocate']), RelationSample(subject='marry', object=['remarry']), RelationSample(subject='negotiate', object=['renegotiate']), RelationSample(subject='occur', object=['reoccur']), RelationSample(subject='organize', object=['reorganize', 'reorganise']), RelationSample(subject='publish', object=['republish']), RelationSample(subject='send', object=['resend']), RelationSample(subject='solve', object=['resolve']), RelationSample(subject='submit', object=['resubmit']), RelationSample(subject='tell', object=['retell']), RelationSample(subject='unite', object=['reunite']), RelationSample(subject='upload', object=['reupload']), RelationSample(subject='write', object=['rewrite'])], _domain=None, _range=None)
2024-06-12 17:34:33 root INFO     starting operator prediction
2024-06-12 17:34:33 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} again is to)
2024-06-12 17:34:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:34 root INFO     total operator prediction time: 1.3221046924591064 seconds
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reacquire'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['readjust'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reappear'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reapply'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reappoint'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['rearrange'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reassess'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reassign'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reassure'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['recalculate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['recognize'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['recommend'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reconfigure'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reconfirm'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reconnect'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reconsider'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['recreate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['redecorate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['redeem'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['redefine'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['redevelop'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['rediscover'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['redistribute'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reemerge'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reengage'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reestablish'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reevaluate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reexamine'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['regenerate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['regrow'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reinstall'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reintegrate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reinterpret'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reintroduce'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reinvest'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reinvestigate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['relearn'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['relocate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['remarry'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['renegotiate'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reoccur'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reorganize', 'reorganise'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['republish'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['resend'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['resolve'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['resubmit'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['retell'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reunite'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['reupload'] is True
2024-06-12 17:34:37 root INFO     [' re', ' rec', ' repeat', ' recon', ' rem'] matches ['rewrite'] is True
2024-06-12 17:34:37 root INFO     re+verb_reg (50) total: defaultdict(<class 'int'>, {True: 72, False: 527})
2024-06-12 17:34:37 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+ment_irreg', prompt_templates=['To {} results in a', 'To {} brings about a'], prompt_templates_zs=['To {} results in a', 'To {} brings about a'], samples=[RelationSample(subject='accomplish', object=['accomplishment']), RelationSample(subject='achieve', object=['achievement']), RelationSample(subject='acknowledge', object=['acknowledgement']), RelationSample(subject='adjust', object=['adjustment']), RelationSample(subject='advertise', object=['advertisement', 'advertizement']), RelationSample(subject='agree', object=['agreement']), RelationSample(subject='align', object=['alignment']), RelationSample(subject='amend', object=['amendment']), RelationSample(subject='amuse', object=['amusement']), RelationSample(subject='announce', object=['announcement']), RelationSample(subject='appoint', object=['appointment']), RelationSample(subject='arrange', object=['arrangement']), RelationSample(subject='assess', object=['assessment']), RelationSample(subject='assign', object=['assignment']), RelationSample(subject='commit', object=['commitment']), RelationSample(subject='detach', object=['detachment']), RelationSample(subject='develop', object=['development']), RelationSample(subject='disagree', object=['disagreement']), RelationSample(subject='disappoint', object=['disappointment']), RelationSample(subject='displace', object=['displacement']), RelationSample(subject='embarrass', object=['embarrassment']), RelationSample(subject='encourage', object=['encouragement']), RelationSample(subject='endorse', object=['endorsement']), RelationSample(subject='enforce', object=['enforcement']), RelationSample(subject='engage', object=['engagement']), RelationSample(subject='enhance', object=['enhancement']), RelationSample(subject='enjoy', object=['enjoyment']), RelationSample(subject='enlighten', object=['enlightenment']), RelationSample(subject='enroll', object=['enrollment', 'enrolment']), RelationSample(subject='entertain', object=['entertainment']), RelationSample(subject='entitle', object=['entitlement']), RelationSample(subject='equip', object=['equipment']), RelationSample(subject='establish', object=['establishment']), RelationSample(subject='excite', object=['excitement']), RelationSample(subject='fulfil', object=['fulfilment']), RelationSample(subject='fulfill', object=['fulfillment']), RelationSample(subject='harass', object=['harassment']), RelationSample(subject='impair', object=['impairment']), RelationSample(subject='improve', object=['improvement']), RelationSample(subject='infringe', object=['infringement']), RelationSample(subject='invest', object=['investment']), RelationSample(subject='involve', object=['involvement']), RelationSample(subject='manage', object=['management']), RelationSample(subject='punish', object=['punishment']), RelationSample(subject='redevelop', object=['redevelopment']), RelationSample(subject='reimburse', object=['reimbursement']), RelationSample(subject='reinforce', object=['reinforcement']), RelationSample(subject='replace', object=['replacement']), RelationSample(subject='require', object=['requirement']), RelationSample(subject='resent', object=['resentment'])], _domain=None, _range=None)
2024-06-12 17:34:39 root INFO     starting operator prediction
2024-06-12 17:34:39 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in a)
2024-06-12 17:34:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:40 root INFO     total operator prediction time: 1.3445475101470947 seconds
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['accomplishment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['achievement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['acknowledgement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['adjustment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['advertisement', 'advertizement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['agreement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['alignment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['amendment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['amusement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['announcement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['appointment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['arrangement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['assessment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['assignment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['commitment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['detachment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['development'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['disagreement'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['disappointment'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['displacement'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['embarrassment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['encouragement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['endorsement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['enforcement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['engagement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['enhancement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['enjoyment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['enlightenment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['enrollment', 'enrolment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['entertainment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['entitlement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['equipment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['establishment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['excitement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['fulfilment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['fulfillment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['harassment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['impairment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['improvement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['infringement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['investment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['involvement'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['management'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['punishment'] is False
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['redevelopment'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['reimbursement'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['reinforcement'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['replacement'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['requirement'] is True
2024-06-12 17:34:43 root INFO     ['\n', ' re', '...', ' dis', ' '] matches ['resentment'] is True
2024-06-12 17:34:43 root INFO     verb+ment_irreg (50) total: defaultdict(<class 'int'>, {True: 81, False: 568})
2024-06-12 17:34:43 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun+less_reg', prompt_templates=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], prompt_templates_zs=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], samples=[RelationSample(subject='arm', object=['armless']), RelationSample(subject='art', object=['artless']), RelationSample(subject='bone', object=['boneless']), RelationSample(subject='breath', object=['breathless']), RelationSample(subject='carbon', object=['carbonless']), RelationSample(subject='child', object=['childless']), RelationSample(subject='collar', object=['collarless']), RelationSample(subject='death', object=['deathless']), RelationSample(subject='defence', object=['defenceless', 'defenseless']), RelationSample(subject='effort', object=['effortless']), RelationSample(subject='ego', object=['egoless']), RelationSample(subject='emotion', object=['emotionless']), RelationSample(subject='error', object=['errorless']), RelationSample(subject='expression', object=['expressionless']), RelationSample(subject='faith', object=['faithless']), RelationSample(subject='friction', object=['frictionless']), RelationSample(subject='friend', object=['friendless']), RelationSample(subject='gender', object=['genderless']), RelationSample(subject='goal', object=['goalless']), RelationSample(subject='god', object=['godless']), RelationSample(subject='guile', object=['guileless']), RelationSample(subject='guilt', object=['guiltless']), RelationSample(subject='hair', object=['hairless']), RelationSample(subject='heart', object=['heartless']), RelationSample(subject='heir', object=['heirless']), RelationSample(subject='home', object=['homeless']), RelationSample(subject='law', object=['lawless']), RelationSample(subject='leg', object=['legless']), RelationSample(subject='life', object=['lifeless', 'liveless']), RelationSample(subject='luck', object=['luckless']), RelationSample(subject='meat', object=['meatless']), RelationSample(subject='mirth', object=['mirthless']), RelationSample(subject='money', object=['moneyless']), RelationSample(subject='odor', object=['odorless', 'odourless']), RelationSample(subject='passion', object=['passionless']), RelationSample(subject='path', object=['pathless']), RelationSample(subject='penny', object=['penniless']), RelationSample(subject='remorse', object=['remorseless']), RelationSample(subject='ruth', object=['ruthless']), RelationSample(subject='sensor', object=['sensorless']), RelationSample(subject='sleeve', object=['sleeveless']), RelationSample(subject='soul', object=['soulless']), RelationSample(subject='speech', object=['speechless']), RelationSample(subject='spine', object=['spineless']), RelationSample(subject='tact', object=['tactless']), RelationSample(subject='talent', object=['talentless']), RelationSample(subject='thought', object=['thoughtless']), RelationSample(subject='tooth', object=['toothless']), RelationSample(subject='window', object=['windowless']), RelationSample(subject='wit', object=['witless'])], _domain=None, _range=None)
2024-06-12 17:34:45 root INFO     starting operator prediction
2024-06-12 17:34:45 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Something without {} is)
2024-06-12 17:34:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:46 root INFO     total operator prediction time: 1.3208940029144287 seconds
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['armless'] is True
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['artless'] is True
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['boneless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['breathless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['carbonless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['childless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['collarless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['deathless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['defenceless', 'defenseless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['effortless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['egoless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['emotionless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['errorless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['expressionless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['faithless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['frictionless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['friendless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['genderless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['goalless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['godless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['guileless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['guiltless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['hairless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['heartless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['heirless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['homeless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['lawless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['legless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['lifeless', 'liveless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['luckless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['meatless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['mirthless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['moneyless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['odorless', 'odourless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['passionless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['pathless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['penniless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['remorseless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['ruthless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['sensorless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['sleeveless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['soulless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['speechless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['spineless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['tactless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['talentless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['thoughtless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['toothless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['windowless'] is False
2024-06-12 17:34:49 root INFO     [' un', ' a', ' without', '\n', ' not'] matches ['witless'] is False
2024-06-12 17:34:49 root INFO     noun+less_reg (50) total: defaultdict(<class 'int'>, {True: 83, False: 616})
2024-06-12 17:34:49 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='over+adj_reg', prompt_templates=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], prompt_templates_zs=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], samples=[RelationSample(subject='ambitious', object=['overambitious', 'over-ambitious']), RelationSample(subject='arching', object=['overarching', 'over-arching']), RelationSample(subject='booked', object=['overbooked', 'over-booked']), RelationSample(subject='charged', object=['overcharged', 'over-charged']), RelationSample(subject='compensated', object=['overcompensated', 'over-compensated']), RelationSample(subject='confident', object=['overconfident', 'over-confident']), RelationSample(subject='cooked', object=['overcooked', 'over-cooked']), RelationSample(subject='crowded', object=['overcrowded', 'over-crowded']), RelationSample(subject='developed', object=['overdeveloped', 'over-developed']), RelationSample(subject='done', object=['overdone', 'over-done']), RelationSample(subject='dressed', object=['overdressed', 'over-dressed']), RelationSample(subject='enthusiastic', object=['overenthusiastic', 'over-enthusiastic']), RelationSample(subject='excited', object=['overexcited', 'over-excited']), RelationSample(subject='exposed', object=['overexposed', 'over-exposed']), RelationSample(subject='filled', object=['overfilled', 'over-filled']), RelationSample(subject='grown', object=['overgrown', 'over-grown']), RelationSample(subject='heard', object=['overheard', 'over-heard']), RelationSample(subject='heated', object=['overheated', 'over-heated']), RelationSample(subject='inflated', object=['overinflated', 'over-inflated']), RelationSample(subject='laid', object=['overlaid', 'over-laid']), RelationSample(subject='loaded', object=['overloaded', 'over-loaded']), RelationSample(subject='optimistic', object=['overoptimistic', 'over-optimistic']), RelationSample(subject='paid', object=['overpaid', 'over-paid']), RelationSample(subject='painted', object=['overpainted', 'over-painted']), RelationSample(subject='played', object=['overplayed', 'over-played']), RelationSample(subject='populated', object=['overpopulated', 'over-populated']), RelationSample(subject='powered', object=['overpowered', 'over-powered']), RelationSample(subject='protected', object=['overprotected', 'over-protected']), RelationSample(subject='protective', object=['overprotective', 'over-protective']), RelationSample(subject='qualified', object=['overqualified', 'over-qualified']), RelationSample(subject='represented', object=['overrepresented', 'over-represented']), RelationSample(subject='saturated', object=['oversaturated', 'over-saturated']), RelationSample(subject='shadowed', object=['overshadowed', 'over-shadowed']), RelationSample(subject='simplified', object=['oversimplified', 'over-simplified']), RelationSample(subject='sized', object=['oversized', 'over-sized']), RelationSample(subject='sold', object=['oversold', 'over-sold']), RelationSample(subject='spent', object=['overspent', 'over-spent']), RelationSample(subject='stated', object=['overstated', 'over-stated']), RelationSample(subject='stimulated', object=['overstimulated', 'over-stimulated']), RelationSample(subject='stocked', object=['overstocked', 'over-stocked']), RelationSample(subject='strained', object=['overstrained', 'over-strained']), RelationSample(subject='stressed', object=['overstressed', 'over-stressed']), RelationSample(subject='stretched', object=['overstretched', 'over-stretched']), RelationSample(subject='subscribed', object=['oversubscribed', 'over-subscribed']), RelationSample(subject='taken', object=['overtaken', 'over-taken']), RelationSample(subject='thrown', object=['overthrown', 'over-thrown']), RelationSample(subject='turned', object=['overturned', 'over-turned']), RelationSample(subject='used', object=['overused', 'over-used']), RelationSample(subject='written', object=['overwritten', 'over-written']), RelationSample(subject='zealous', object=['overzealous', 'over-zealous'])], _domain=None, _range=None)
2024-06-12 17:34:51 root INFO     starting operator prediction
2024-06-12 17:34:51 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If something is too {}, it is)
2024-06-12 17:34:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:51 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:51 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:52 root INFO     total operator prediction time: 1.365732192993164 seconds
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overambitious', 'over-ambitious'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overarching', 'over-arching'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overbooked', 'over-booked'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overcharged', 'over-charged'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overcompensated', 'over-compensated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overconfident', 'over-confident'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overcooked', 'over-cooked'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overcrowded', 'over-crowded'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overdeveloped', 'over-developed'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overdone', 'over-done'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overdressed', 'over-dressed'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overenthusiastic', 'over-enthusiastic'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overexcited', 'over-excited'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overexposed', 'over-exposed'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overfilled', 'over-filled'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overgrown', 'over-grown'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overheard', 'over-heard'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overheated', 'over-heated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overinflated', 'over-inflated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overlaid', 'over-laid'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overloaded', 'over-loaded'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overoptimistic', 'over-optimistic'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overpaid', 'over-paid'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overpainted', 'over-painted'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overplayed', 'over-played'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overpopulated', 'over-populated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overpowered', 'over-powered'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overprotected', 'over-protected'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overprotective', 'over-protective'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overqualified', 'over-qualified'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overrepresented', 'over-represented'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['oversaturated', 'over-saturated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overshadowed', 'over-shadowed'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['oversimplified', 'over-simplified'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['oversized', 'over-sized'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['oversold', 'over-sold'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overspent', 'over-spent'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overstated', 'over-stated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overstimulated', 'over-stimulated'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overstocked', 'over-stocked'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overstrained', 'over-strained'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overstressed', 'over-stressed'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overstretched', 'over-stretched'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['oversubscribed', 'over-subscribed'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overtaken', 'over-taken'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overthrown', 'over-thrown'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overturned', 'over-turned'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overused', 'over-used'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overwritten', 'over-written'] is True
2024-06-12 17:34:55 root INFO     [' over', ' overs', ' overe', ' overc', ' overly'] matches ['overzealous', 'over-zealous'] is True
2024-06-12 17:34:55 root INFO     over+adj_reg (50) total: defaultdict(<class 'int'>, {True: 133, False: 616})
2024-06-12 17:34:55 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj+ness_reg', prompt_templates=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], prompt_templates_zs=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], samples=[RelationSample(subject='amazing', object=['amazingness']), RelationSample(subject='attractive', object=['attractiveness']), RelationSample(subject='aware', object=['awareness']), RelationSample(subject='broken', object=['brokenness']), RelationSample(subject='careful', object=['carefulness']), RelationSample(subject='cheap', object=['cheapness']), RelationSample(subject='competitive', object=['competitiveness']), RelationSample(subject='connected', object=['connectedness']), RelationSample(subject='conscious', object=['consciousness']), RelationSample(subject='creative', object=['creativeness']), RelationSample(subject='dangerous', object=['dangerousness']), RelationSample(subject='devoted', object=['devotedness']), RelationSample(subject='directed', object=['directedness']), RelationSample(subject='distinct', object=['distinctness']), RelationSample(subject='distinctive', object=['distinctiveness']), RelationSample(subject='effective', object=['effectiveness']), RelationSample(subject='extensive', object=['extensiveness']), RelationSample(subject='fixed', object=['fixedness']), RelationSample(subject='foreign', object=['foreignness']), RelationSample(subject='happy', object=['happiness']), RelationSample(subject='helpful', object=['helpfulness']), RelationSample(subject='hidden', object=['hiddenness']), RelationSample(subject='hot', object=['hotness']), RelationSample(subject='huge', object=['hugeness']), RelationSample(subject='impressive', object=['impressiveness']), RelationSample(subject='innovative', object=['innovativeness']), RelationSample(subject='interesting', object=['interestingness']), RelationSample(subject='mad', object=['madness']), RelationSample(subject='marked', object=['markedness']), RelationSample(subject='massive', object=['massiveness']), RelationSample(subject='nice', object=['niceness']), RelationSample(subject='obvious', object=['obviousness']), RelationSample(subject='odd', object=['oddness']), RelationSample(subject='prepared', object=['preparedness']), RelationSample(subject='pure', object=['pureness']), RelationSample(subject='random', object=['randomness']), RelationSample(subject='rare', object=['rareness']), RelationSample(subject='reasonable', object=['reasonableness']), RelationSample(subject='related', object=['relatedness']), RelationSample(subject='righteous', object=['righteousness']), RelationSample(subject='sacred', object=['sacredness']), RelationSample(subject='sad', object=['sadness']), RelationSample(subject='same', object=['sameness']), RelationSample(subject='serious', object=['seriousness']), RelationSample(subject='situated', object=['situatedness']), RelationSample(subject='strange', object=['strangeness']), RelationSample(subject='unique', object=['uniqueness']), RelationSample(subject='useful', object=['usefulness']), RelationSample(subject='vast', object=['vastness']), RelationSample(subject='weak', object=['weakness'])], _domain=None, _range=None)
2024-06-12 17:34:57 root INFO     starting operator prediction
2024-06-12 17:34:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The state of being {} is)
2024-06-12 17:34:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:34:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:34:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:34:58 root INFO     total operator prediction time: 1.366147518157959 seconds
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['amazingness'] is True
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['attractiveness'] is True
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['awareness'] is True
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['brokenness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['carefulness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['cheapness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['competitiveness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['connectedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['consciousness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['creativeness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['dangerousness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['devotedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['directedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['distinctness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['distinctiveness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['effectiveness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['extensiveness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['fixedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['foreignness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['happiness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['helpfulness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['hiddenness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['hotness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['hugeness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['impressiveness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['innovativeness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['interestingness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['madness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['markedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['massiveness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['niceness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['obviousness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['oddness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['preparedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['pureness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['randomness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['rareness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['reasonableness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['relatedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['righteousness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['sacredness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['sadness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['sameness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['seriousness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['situatedness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['strangeness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['uniqueness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['usefulness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['vastness'] is False
2024-06-12 17:35:01 root INFO     ['\n', ' a', ' the', ' being', ' '] matches ['weakness'] is False
2024-06-12 17:35:01 root INFO     adj+ness_reg (50) total: defaultdict(<class 'int'>, {True: 136, False: 663})
2024-06-12 17:35:01 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='un+adj_reg', prompt_templates=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], prompt_templates_zs=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], samples=[RelationSample(subject='able', object=['unable']), RelationSample(subject='acceptable', object=['unacceptable']), RelationSample(subject='affected', object=['unaffected']), RelationSample(subject='authorized', object=['unauthorized', 'unauthorised']), RelationSample(subject='available', object=['unavailable']), RelationSample(subject='avoidable', object=['unavoidable']), RelationSample(subject='aware', object=['unaware']), RelationSample(subject='believable', object=['unbelievable']), RelationSample(subject='biased', object=['unbiased']), RelationSample(subject='certain', object=['uncertain']), RelationSample(subject='changed', object=['unchanged']), RelationSample(subject='comfortable', object=['uncomfortable']), RelationSample(subject='conditional', object=['unconditional']), RelationSample(subject='conscious', object=['unconscious']), RelationSample(subject='controlled', object=['uncontrolled']), RelationSample(subject='desirable', object=['undesirable']), RelationSample(subject='employed', object=['unemployed']), RelationSample(subject='expected', object=['unexpected']), RelationSample(subject='finished', object=['unfinished']), RelationSample(subject='forgettable', object=['unforgettable']), RelationSample(subject='fortunate', object=['unfortunate']), RelationSample(subject='happy', object=['unhappy']), RelationSample(subject='healthy', object=['unhealthy']), RelationSample(subject='identified', object=['unidentified']), RelationSample(subject='intended', object=['unintended']), RelationSample(subject='interrupted', object=['uninterrupted']), RelationSample(subject='known', object=['unknown']), RelationSample(subject='lawful', object=['unlawful']), RelationSample(subject='lucky', object=['unlucky']), RelationSample(subject='noticed', object=['unnoticed']), RelationSample(subject='paid', object=['unpaid']), RelationSample(subject='pleasant', object=['unpleasant']), RelationSample(subject='popular', object=['unpopular']), RelationSample(subject='predictable', object=['unpredictable']), RelationSample(subject='published', object=['unpublished']), RelationSample(subject='realistic', object=['unrealistic']), RelationSample(subject='reasonable', object=['unreasonable']), RelationSample(subject='related', object=['unrelated']), RelationSample(subject='reliable', object=['unreliable']), RelationSample(subject='resolved', object=['unresolved']), RelationSample(subject='restricted', object=['unrestricted']), RelationSample(subject='satisfactory', object=['unsatisfactory']), RelationSample(subject='specified', object=['unspecified']), RelationSample(subject='successful', object=['unsuccessful']), RelationSample(subject='suitable', object=['unsuitable']), RelationSample(subject='sustainable', object=['unsustainable']), RelationSample(subject='used', object=['unused']), RelationSample(subject='usual', object=['unusual']), RelationSample(subject='veiled', object=['unveiled']), RelationSample(subject='wanted', object=['unwanted'])], _domain=None, _range=None)
2024-06-12 17:35:03 root INFO     starting operator prediction
2024-06-12 17:35:03 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-12 17:35:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:03 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:03 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:03 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:04 root INFO     total operator prediction time: 1.4283027648925781 seconds
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unacceptable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unaffected'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unauthorized', 'unauthorised'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unavailable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unavoidable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unaware'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unbelievable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unbiased'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['uncertain'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unchanged'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['uncomfortable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unconditional'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unconscious'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['uncontrolled'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['undesirable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unemployed'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unexpected'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unfinished'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unforgettable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unfortunate'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unhappy'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unhealthy'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unidentified'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unintended'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['uninterrupted'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unknown'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unlawful'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unlucky'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unnoticed'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unpaid'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unpleasant'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unpopular'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unpredictable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unpublished'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unrealistic'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unreasonable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unrelated'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unreliable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unresolved'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unrestricted'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unsatisfactory'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unspecified'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unsuccessful'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unsuitable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unsustainable'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unused'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unusual'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unveiled'] is True
2024-06-12 17:35:07 root INFO     [' un', ' not', ' non', ' unf', '\n'] matches ['unwanted'] is True
2024-06-12 17:35:07 root INFO     un+adj_reg (50) total: defaultdict(<class 'int'>, {True: 186, False: 663})
2024-06-12 17:35:07 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj+ly_reg', prompt_templates=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], prompt_templates_zs=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], samples=[RelationSample(subject='according', object=['accordingly']), RelationSample(subject='actual', object=['actually']), RelationSample(subject='additional', object=['additionally']), RelationSample(subject='apparent', object=['apparently']), RelationSample(subject='beautiful', object=['beautifully']), RelationSample(subject='clinical', object=['clinically']), RelationSample(subject='creative', object=['creatively']), RelationSample(subject='critical', object=['critically']), RelationSample(subject='cultural', object=['culturally']), RelationSample(subject='decided', object=['decidedly']), RelationSample(subject='different', object=['differently']), RelationSample(subject='digital', object=['digitally']), RelationSample(subject='effective', object=['effectively']), RelationSample(subject='environmental', object=['environmentally']), RelationSample(subject='extensive', object=['extensively']), RelationSample(subject='famous', object=['famously']), RelationSample(subject='federal', object=['federally']), RelationSample(subject='financial', object=['financially']), RelationSample(subject='global', object=['globally']), RelationSample(subject='historical', object=['historically']), RelationSample(subject='huge', object=['hugely']), RelationSample(subject='immediate', object=['immediately']), RelationSample(subject='important', object=['importantly']), RelationSample(subject='increasing', object=['increasingly']), RelationSample(subject='interesting', object=['interestingly']), RelationSample(subject='internal', object=['internally']), RelationSample(subject='international', object=['internationally']), RelationSample(subject='legal', object=['legally']), RelationSample(subject='mental', object=['mentally']), RelationSample(subject='nice', object=['nicely']), RelationSample(subject='obvious', object=['obviously']), RelationSample(subject='physical', object=['physically']), RelationSample(subject='political', object=['politically']), RelationSample(subject='popular', object=['popularly']), RelationSample(subject='practical', object=['practically']), RelationSample(subject='previous', object=['previously']), RelationSample(subject='rare', object=['rarely']), RelationSample(subject='regional', object=['regionally']), RelationSample(subject='serious', object=['seriously']), RelationSample(subject='sexual', object=['sexually']), RelationSample(subject='significant', object=['significantly']), RelationSample(subject='similar', object=['similarly']), RelationSample(subject='strong', object=['strongly']), RelationSample(subject='subsequent', object=['subsequently']), RelationSample(subject='successful', object=['successfully']), RelationSample(subject='traditional', object=['traditionally']), RelationSample(subject='typical', object=['typically']), RelationSample(subject='unique', object=['uniquely']), RelationSample(subject='virtual', object=['virtually']), RelationSample(subject='visual', object=['visually'])], _domain=None, _range=None)
2024-06-12 17:35:09 root INFO     starting operator prediction
2024-06-12 17:35:09 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The adjective form of {} is)
2024-06-12 17:35:09 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:09 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:10 root INFO     total operator prediction time: 1.32602858543396 seconds
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['accordingly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['actually'] is True
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['additionally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['apparently'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['beautifully'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['clinically'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['creatively'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['critically'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['culturally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['decidedly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['differently'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['digitally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['effectively'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['environmentally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['extensively'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['famously'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['federally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['financially'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['globally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['historically'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['hugely'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['immediately'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['importantly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['increasingly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['interestingly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['internally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['internationally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['legally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['mentally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['nicely'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['obviously'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['physically'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['politically'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['popularly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['practically'] is True
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['previously'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['rarely'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['regionally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['seriously'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['sexually'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['significantly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['similarly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['strongly'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['subsequently'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['successfully'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['traditionally'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['typically'] is True
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['uniquely'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['virtually'] is False
2024-06-12 17:35:13 root INFO     [' typically', ' practically', ' generally', ' usually', ' actually'] matches ['visually'] is False
2024-06-12 17:35:13 root INFO     adj+ly_reg (50) total: defaultdict(<class 'int'>, {True: 189, False: 710})
2024-06-12 17:35:13 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+er_irreg', prompt_templates=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], prompt_templates_zs=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], samples=[RelationSample(subject='achieve', object=['achiever']), RelationSample(subject='advertise', object=['advertiser']), RelationSample(subject='announce', object=['announcer']), RelationSample(subject='bake', object=['baker']), RelationSample(subject='begin', object=['beginner']), RelationSample(subject='believe', object=['believer']), RelationSample(subject='borrow', object=['borrower']), RelationSample(subject='choreograph', object=['choreographer']), RelationSample(subject='compose', object=['composer']), RelationSample(subject='consume', object=['consumer']), RelationSample(subject='contend', object=['contender']), RelationSample(subject='defend', object=['defender']), RelationSample(subject='deliver', object=['deliverer']), RelationSample(subject='destroy', object=['destroyer']), RelationSample(subject='determine', object=['determiner']), RelationSample(subject='develop', object=['developer']), RelationSample(subject='discover', object=['discoverer']), RelationSample(subject='eat', object=['eater']), RelationSample(subject='entertain', object=['entertainer']), RelationSample(subject='examine', object=['examiner']), RelationSample(subject='explore', object=['explorer']), RelationSample(subject='follow', object=['follower']), RelationSample(subject='interpret', object=['interpreter']), RelationSample(subject='intrude', object=['intruder']), RelationSample(subject='learn', object=['learner']), RelationSample(subject='listen', object=['listener']), RelationSample(subject='lose', object=['loser']), RelationSample(subject='manage', object=['manager']), RelationSample(subject='molest', object=['molester']), RelationSample(subject='mourn', object=['mourner']), RelationSample(subject='observe', object=['observer']), RelationSample(subject='offend', object=['offender']), RelationSample(subject='organise', object=['organiser']), RelationSample(subject='organize', object=['organizer']), RelationSample(subject='perform', object=['performer']), RelationSample(subject='preach', object=['preacher']), RelationSample(subject='promote', object=['promoter']), RelationSample(subject='provide', object=['provider']), RelationSample(subject='publish', object=['publisher']), RelationSample(subject='receive', object=['receiver']), RelationSample(subject='recommend', object=['recommender']), RelationSample(subject='send', object=['sender']), RelationSample(subject='skydive', object=['skydiver']), RelationSample(subject='slay', object=['slayer']), RelationSample(subject='speak', object=['speaker']), RelationSample(subject='subscribe', object=['subscriber']), RelationSample(subject='suffer', object=['sufferer']), RelationSample(subject='teach', object=['teacher']), RelationSample(subject='tell', object=['teller']), RelationSample(subject='write', object=['writer'])], _domain=None, _range=None)
2024-06-12 17:35:15 root INFO     starting operator prediction
2024-06-12 17:35:15 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you {} something, you are a)
2024-06-12 17:35:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:16 root INFO     total operator prediction time: 1.3654849529266357 seconds
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['achiever'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['advertiser'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['announcer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['baker'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['beginner'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['believer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['borrower'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['choreographer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['composer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['consumer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['contender'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['defender'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['deliverer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['destroyer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['determiner'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['developer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['discoverer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['eater'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['entertainer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['examiner'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['explorer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['follower'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['interpreter'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['intruder'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['learner'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['listener'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['loser'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['manager'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['molester'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['mourner'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['observer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['offender'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['organiser'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['organizer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['performer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['preacher'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['promoter'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['provider'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['publisher'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['receiver'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['recommender'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['sender'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['skydiver'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['slayer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['speaker'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['subscriber'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['sufferer'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['teacher'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['teller'] is False
2024-06-12 17:35:19 root INFO     ['\n', ' ', ' person', ' leader', '...'] matches ['writer'] is False
2024-06-12 17:35:19 root INFO     verb+er_irreg (50) total: defaultdict(<class 'int'>, {True: 189, False: 760})
2024-06-12 17:35:19 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+able_reg', prompt_templates=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], prompt_templates_zs=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], samples=[RelationSample(subject='accept', object=['acceptable']), RelationSample(subject='achieve', object=['achieveable']), RelationSample(subject='adapt', object=['adaptable']), RelationSample(subject='adjust', object=['adjustable']), RelationSample(subject='admire', object=['admirable']), RelationSample(subject='adore', object=['adorable']), RelationSample(subject='advise', object=['advisable']), RelationSample(subject='afford', object=['affordable']), RelationSample(subject='avoid', object=['avoidable']), RelationSample(subject='believe', object=['believeable', 'believable']), RelationSample(subject='consider', object=['considerable']), RelationSample(subject='contain', object=['containable']), RelationSample(subject='define', object=['definable']), RelationSample(subject='deliver', object=['deliverable']), RelationSample(subject='discover', object=['discoverable']), RelationSample(subject='dispose', object=['disposable']), RelationSample(subject='download', object=['downloadable']), RelationSample(subject='edit', object=['editable']), RelationSample(subject='enjoy', object=['enjoyable']), RelationSample(subject='execute', object=['executable']), RelationSample(subject='expand', object=['expandable']), RelationSample(subject='expect', object=['expectable']), RelationSample(subject='explain', object=['explainable']), RelationSample(subject='extend', object=['extendable']), RelationSample(subject='foresee', object=['foreseeable']), RelationSample(subject='identify', object=['identifiable']), RelationSample(subject='imagine', object=['imaginable']), RelationSample(subject='improve', object=['improvable']), RelationSample(subject='inflate', object=['inflatable']), RelationSample(subject='learn', object=['learnable']), RelationSample(subject='maintain', object=['maintainable']), RelationSample(subject='manage', object=['manageable']), RelationSample(subject='observe', object=['observable']), RelationSample(subject='perform', object=['performable']), RelationSample(subject='predict', object=['predictable']), RelationSample(subject='prefer', object=['preferable']), RelationSample(subject='prevent', object=['preventable']), RelationSample(subject='protect', object=['protectable']), RelationSample(subject='publish', object=['publishable']), RelationSample(subject='recognize', object=['recognizable', 'recognisable']), RelationSample(subject='recommend', object=['recommendable']), RelationSample(subject='rely', object=['reliable']), RelationSample(subject='renew', object=['renewable']), RelationSample(subject='replace', object=['replaceable']), RelationSample(subject='represent', object=['representable']), RelationSample(subject='survive', object=['survivable']), RelationSample(subject='sustain', object=['sustainable']), RelationSample(subject='understand', object=['understandable']), RelationSample(subject='vary', object=['variable']), RelationSample(subject='write', object=['writeable', 'writable'])], _domain=None, _range=None)
2024-06-12 17:35:21 root INFO     starting operator prediction
2024-06-12 17:35:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you can {} something, that thing is)
2024-06-12 17:35:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:22 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:22 root INFO     total operator prediction time: 1.3898470401763916 seconds
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['acceptable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['achieveable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['adaptable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['adjustable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['admirable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['adorable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['advisable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['affordable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['avoidable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['believeable', 'believable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['considerable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['containable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['definable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['deliverable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['discoverable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['disposable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['downloadable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['editable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['enjoyable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['executable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['expandable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['expectable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['explainable'] is True
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['extendable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['foreseeable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['identifiable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['imaginable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['improvable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['inflatable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['learnable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['maintainable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['manageable'] is True
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['observable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['performable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['predictable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['preferable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['preventable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['protectable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['publishable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['recognizable', 'recognisable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['recommendable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['reliable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['renewable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['replaceable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['representable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['survivable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['sustainable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['understandable'] is True
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['variable'] is False
2024-06-12 17:35:25 root INFO     [' capable', ' explain', ' manageable', ' expl', ' understandable'] matches ['writeable', 'writable'] is False
2024-06-12 17:35:25 root INFO     verb+able_reg (50) total: defaultdict(<class 'int'>, {True: 192, False: 807})
2024-06-12 17:35:25 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='meronyms - part', prompt_templates=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], prompt_templates_zs=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], samples=[RelationSample(subject='academia', object=['college', 'university', 'institute']), RelationSample(subject='apartment', object=['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room']), RelationSample(subject='bird', object=['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat']), RelationSample(subject='brush', object=['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem']), RelationSample(subject='bus', object=['seats', 'conductor', 'window', 'driver', 'roof']), RelationSample(subject='byte', object=['bit']), RelationSample(subject='car', object=['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system']), RelationSample(subject='castle', object=['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall']), RelationSample(subject='cat', object=['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth']), RelationSample(subject='chair', object=['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs']), RelationSample(subject='church', object=['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner']), RelationSample(subject='comb', object=['teeth', 'shaft', 'grip', 'tooth', 'handle']), RelationSample(subject='day', object=['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour']), RelationSample(subject='deer', object=['antler', 'antlers', 'withers', 'flag', 'scut']), RelationSample(subject='dollar', object=['cent']), RelationSample(subject='door', object=['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill']), RelationSample(subject='dress', object=['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener']), RelationSample(subject='filename', object=['extension', 'name']), RelationSample(subject='flower', object=['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium']), RelationSample(subject='gigabit', object=['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit']), RelationSample(subject='gramm', object=['milligram', 'mg', 'grain', 'milligram', 'mcg', 'carat', 'microgram', 'ng', 'dg', 'decigram', 'nanogram', 'metric_grain', 'obolus']), RelationSample(subject='guitar', object=['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard']), RelationSample(subject='gun', object=['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover']), RelationSample(subject='harbor', object=['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='jail', object=['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell']), RelationSample(subject='jewellery', object=['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel']), RelationSample(subject='litre', object=['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre']), RelationSample(subject='movie', object=['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption']), RelationSample(subject='orthography', object=['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling']), RelationSample(subject='piano', object=['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal']), RelationSample(subject='pie', object=['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing']), RelationSample(subject='poem', object=['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry']), RelationSample(subject='pub', object=['bar', 'barroom', 'taproom', 'saloon', 'ginmill']), RelationSample(subject='radio', object=['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set']), RelationSample(subject='railcar', object=['suspension', 'cushion', 'shock', 'shock_absorber', 'suspension_system']), RelationSample(subject='seafront', object=['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='shilling', object=['pence']), RelationSample(subject='shirt', object=['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button']), RelationSample(subject='sonata', object=['movement', 'part']), RelationSample(subject='staircase', object=['step', 'riser', 'landing', 'tread', 'stair', 'stairhead']), RelationSample(subject='sword', object=['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge']), RelationSample(subject='table', object=['tabletop', 'tableware', 'leg', 'legs']), RelationSample(subject='teapot', object=['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter']), RelationSample(subject='telephone', object=['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver']), RelationSample(subject='tonne', object=['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg']), RelationSample(subject='torso', object=['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end']), RelationSample(subject='tripod', object=['leg', 'stand']), RelationSample(subject='typewriter', object=['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer']), RelationSample(subject='window', object=['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame']), RelationSample(subject='womb', object=['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'])], _domain=None, _range=None)
2024-06-12 17:35:27 root INFO     starting operator prediction
2024-06-12 17:35:27 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A part of a {} is a)
2024-06-12 17:35:27 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:27 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:29 root INFO     total operator prediction time: 1.3751366138458252 seconds
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['college', 'university', 'institute'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['seats', 'conductor', 'window', 'driver', 'roof'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['bit'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['teeth', 'shaft', 'grip', 'tooth', 'handle'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['cent'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['extension', 'name'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['bar', 'barroom', 'taproom', 'saloon', 'ginmill'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['pence'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['movement', 'part'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['step', 'riser', 'landing', 'tread', 'stair', 'stairhead'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['tabletop', 'tableware', 'leg', 'legs'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['leg', 'stand'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer'] is False
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame'] is True
2024-06-12 17:35:31 root INFO     [' p', ' st', ' qu', ' d', ' line'] matches ['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'] is True
2024-06-12 17:35:31 root INFO     meronyms - part (50) total: defaultdict(<class 'int'>, {True: 227, False: 818})
2024-06-12 17:35:31 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='synonyms - exact', prompt_templates=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], prompt_templates_zs=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], samples=[RelationSample(subject='airplane', object=['aeroplane', 'plane']), RelationSample(subject='auto', object=['car', 'automobile', 'motorcar']), RelationSample(subject='baby', object=['infant', 'babe']), RelationSample(subject='bicycle', object=['bike', 'wheel', 'cycle']), RelationSample(subject='child', object=['kid', 'youngster', 'minor', 'shaver', 'nipper', 'small_fry', 'tiddler', 'tike', 'tyke', 'fry', 'nestling']), RelationSample(subject='cloth', object=['fabric', 'material', 'textile']), RelationSample(subject='clothes', object=['clothing', 'apparel', 'dress']), RelationSample(subject='confused', object=['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up']), RelationSample(subject='dollars', object=['bucks']), RelationSample(subject='emphasis', object=['accent', 'accentuaion', 'importance', 'stress', 'significance']), RelationSample(subject='father', object=['dad', 'daddy']), RelationSample(subject='flower', object=['blossom', 'bloom']), RelationSample(subject='harbor', object=['seaport', 'haven', 'harbour']), RelationSample(subject='help', object=['aid', 'assist']), RelationSample(subject='hieroglyph', object=['hieroglyphic', 'pictogram']), RelationSample(subject='homogeneous', object=['uniform', 'unvarying']), RelationSample(subject='honest', object=['sincere', 'ingenuous', 'true', 'direct', 'truthful']), RelationSample(subject='identical', object=['same', 'indistinguishable']), RelationSample(subject='incorrect', object=['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false']), RelationSample(subject='intelligent', object=['clever', 'smart']), RelationSample(subject='jewel', object=['gem', 'stone']), RelationSample(subject='lad', object=['chap', 'fellow', 'feller', 'fella', 'gent', 'blighter', 'cuss', 'bloke']), RelationSample(subject='lady', object=['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman']), RelationSample(subject='lazy', object=['indolent', 'faineant', 'otiose', 'slothful', 'work-shy']), RelationSample(subject='list', object=['listing', 'enumeration']), RelationSample(subject='loyal', object=['faithful', 'true', 'dependable', 'devoted', 'reliable']), RelationSample(subject='market', object=['marketplace', 'mart', 'bazaar']), RelationSample(subject='mend', object=['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning']), RelationSample(subject='mesh', object=['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork']), RelationSample(subject='monument', object=['memorial']), RelationSample(subject='mother', object=['mom', 'mommy', 'mum']), RelationSample(subject='murder', object=['slaying', 'slay', 'execution']), RelationSample(subject='new', object=['modern', 'recent']), RelationSample(subject='obsolete', object=['outdated', 'out-of-date', 'superannuated']), RelationSample(subject='organized', object=['arranged', 'configured', 'corporate', 'incorporated', 're-formed', 'reorganized', 'reorganised']), RelationSample(subject='package', object=['parcel', 'pack', 'packet', 'bundle']), RelationSample(subject='phone', object=['telephone', 'cell', 'cellphone', 'smartphone']), RelationSample(subject='portion', object=['part', 'component_part', 'component', 'constituent']), RelationSample(subject='railway', object=['railroad']), RelationSample(subject='rational', object=['logical', 'coherent', 'reasonable', 'sane']), RelationSample(subject='reasonable', object=['sensible']), RelationSample(subject='rock', object=['stone']), RelationSample(subject='shore', object=['coast', 'strand', 'bank', 'beach', '']), RelationSample(subject='snake', object=['serpent', 'ophidian']), RelationSample(subject='sofa', object=['couch', 'lounge']), RelationSample(subject='spouse', object=['partner', 'mate', 'better_half']), RelationSample(subject='style', object=['manner', 'mode', 'fashion', 'way']), RelationSample(subject='sweets', object=['confectionery', 'dessert', 'confection']), RelationSample(subject='villain', object=['scoundrel', 'rascal']), RelationSample(subject='vocabulary', object=['lexicon', 'wordbook', 'dictionary', 'glossary'])], _domain=None, _range=None)
2024-06-12 17:35:33 root INFO     starting operator prediction
2024-06-12 17:35:33 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Another word for {} is )
2024-06-12 17:35:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:33 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:35 root INFO     total operator prediction time: 1.3609874248504639 seconds
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['aeroplane', 'plane'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['car', 'automobile', 'motorcar'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['infant', 'babe'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['bike', 'wheel', 'cycle'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['kid', 'youngster', 'minor', 'shaver', 'nipper', 'small_fry', 'tiddler', 'tike', 'tyke', 'fry', 'nestling'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['fabric', 'material', 'textile'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['clothing', 'apparel', 'dress'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['accent', 'accentuaion', 'importance', 'stress', 'significance'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['dad', 'daddy'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['blossom', 'bloom'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['seaport', 'haven', 'harbour'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['aid', 'assist'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['hieroglyphic', 'pictogram'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['uniform', 'unvarying'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['sincere', 'ingenuous', 'true', 'direct', 'truthful'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['same', 'indistinguishable'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['clever', 'smart'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['gem', 'stone'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['indolent', 'faineant', 'otiose', 'slothful', 'work-shy'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['faithful', 'true', 'dependable', 'devoted', 'reliable'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['marketplace', 'mart', 'bazaar'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['memorial'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['mom', 'mommy', 'mum'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['modern', 'recent'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['outdated', 'out-of-date', 'superannuated'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['parcel', 'pack', 'packet', 'bundle'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['telephone', 'cell', 'cellphone', 'smartphone'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['part', 'component_part', 'component', 'constituent'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['railroad'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['logical', 'coherent', 'reasonable', 'sane'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['stone'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['coast', 'strand', 'bank', 'beach', ''] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['serpent', 'ophidian'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['couch', 'lounge'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['partner', 'mate', 'better_half'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['manner', 'mode', 'fashion', 'way'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['confectionery', 'dessert', 'confection'] is True
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['scoundrel', 'rascal'] is False
2024-06-12 17:35:37 root INFO     [' ', ' a', ' d', ' con', ' ch'] matches ['lexicon', 'wordbook', 'dictionary', 'glossary'] is True
2024-06-12 17:35:37 root INFO     synonyms - exact (50) total: defaultdict(<class 'int'>, {True: 241, False: 848})
2024-06-12 17:35:37 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='synonyms - intensity', prompt_templates=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], prompt_templates_zs=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], samples=[RelationSample(subject='afraid', object=['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky']), RelationSample(subject='angry', object=['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething']), RelationSample(subject='ask', object=['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist']), RelationSample(subject='bad', object=['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable']), RelationSample(subject='boring', object=['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome']), RelationSample(subject='cat', object=['lion', 'tiger', 'leopard', 'panther', 'jaguar']), RelationSample(subject='chuckle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='confused', object=['lost', 'bewildered', 'trapped', 'desperate']), RelationSample(subject='creative', object=['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative']), RelationSample(subject='cry', object=['scream', 'shriek', 'screech', 'screeching']), RelationSample(subject='damp', object=['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet']), RelationSample(subject='dinner', object=['feast', 'banquet', 'fiesta']), RelationSample(subject='dislike', object=['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain']), RelationSample(subject='doze', object=['sleep', 'slumber']), RelationSample(subject='drizzle', object=['rain', 'shower', 'raifall', 'deluge']), RelationSample(subject='excited', object=['agitated', 'nervous']), RelationSample(subject='faith', object=['fanatism', 'fanaticism', 'zealotry']), RelationSample(subject='giggle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='guilty', object=['remorseful', 'sorrowful', 'unworthy']), RelationSample(subject='happy', object=['ecstatic', 'enraptured', 'rapturous', 'rapt', 'rhapsodic']), RelationSample(subject='house', object=['palace', 'castle']), RelationSample(subject='hungry', object=['starving', 'famished', 'peckish', 'ravenous', 'starved']), RelationSample(subject='indulge', object=['pamper', 'spoil', 'coddle']), RelationSample(subject='interesting', object=['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling']), RelationSample(subject='irritate', object=['enrage', 'incense', 'infuriate', 'ire', 'mad', 'madden', 'steam', 'umbrage']), RelationSample(subject='jog', object=['run', 'scarper', 'flee', 'fly']), RelationSample(subject='lake', object=['sea', 'ocean']), RelationSample(subject='like', object=['love', 'care', 'fond', 'crush', 'infatuate']), RelationSample(subject='love', object=['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere']), RelationSample(subject='monkey', object=['gorilla']), RelationSample(subject='nap', object=['sleep', 'slumber']), RelationSample(subject='necessary', object=['essential', 'indispensable', 'vital', 'required']), RelationSample(subject='opposed', object=['averse', 'antipathetic', 'antipathetical', 'indisposed', 'loath', 'loth']), RelationSample(subject='pain', object=['torment', 'torture', 'agony']), RelationSample(subject='pony', object=['horse']), RelationSample(subject='poorly', object=['afflicted', 'sick', 'ill', 'stricken']), RelationSample(subject='rain', object=['deluge', 'shower']), RelationSample(subject='sad', object=['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy']), RelationSample(subject='sea', object=['ocean']), RelationSample(subject='snack', object=['meal', 'eat']), RelationSample(subject='sniffles', object=['pneumonia']), RelationSample(subject='soon', object=['immediately', 'promptly', 'straightaway']), RelationSample(subject='strong', object=['powerful', 'forceful', 'super', 'potent']), RelationSample(subject='tasty', object=['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly']), RelationSample(subject='tired', object=['exhausted', 'drained']), RelationSample(subject='unfortunate', object=['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous']), RelationSample(subject='unhappy', object=['miserable', 'suffering', 'wretched']), RelationSample(subject='want', object=['crave', 'hunger', 'thirst', 'starve', 'lust']), RelationSample(subject='warm', object=['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot']), RelationSample(subject='well', object=['flourishing', 'robust', 'booming', 'prospering', 'prosperous', 'thriving'])], _domain=None, _range=None)
2024-06-12 17:35:39 root INFO     starting operator prediction
2024-06-12 17:35:39 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more intense word for {} is )
2024-06-12 17:35:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:40 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:40 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:41 root INFO     total operator prediction time: 1.3999412059783936 seconds
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['lion', 'tiger', 'leopard', 'panther', 'jaguar'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['lost', 'bewildered', 'trapped', 'desperate'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['scream', 'shriek', 'screech', 'screeching'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['feast', 'banquet', 'fiesta'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['sleep', 'slumber'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['rain', 'shower', 'raifall', 'deluge'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['remorseful', 'sorrowful', 'unworthy'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['palace', 'castle'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['starving', 'famished', 'peckish', 'ravenous', 'starved'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['pamper', 'spoil', 'coddle'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['run', 'scarper', 'flee', 'fly'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['sea', 'ocean'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['love', 'care', 'fond', 'crush', 'infatuate'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['sleep', 'slumber'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['essential', 'indispensable', 'vital', 'required'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['torment', 'torture', 'agony'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['horse'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['afflicted', 'sick', 'ill', 'stricken'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['deluge', 'shower'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['ocean'] is False
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['meal', 'eat'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['powerful', 'forceful', 'super', 'potent'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['exhausted', 'drained'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['miserable', 'suffering', 'wretched'] is True
2024-06-12 17:35:43 root INFO     [' ', ' p', ' f', ' m', ' d'] matches ['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot'] is True
2024-06-12 17:35:43 root INFO     synonyms - intensity (50) total: defaultdict(<class 'int'>, {True: 268, False: 860})
2024-06-12 17:35:43 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='hypernyms - misc', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='armchair', object=['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='blender', object=['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='bracelet', object=['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='brooch', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', '']), RelationSample(subject='cake', object=['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity']), RelationSample(subject='computer', object=['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', '']), RelationSample(subject='croissant', object=['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity']), RelationSample(subject='cup', object=['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container']), RelationSample(subject='denim', object=['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='deodorant', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='desk', object=['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='diary', object=['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dishwasher', object=['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dress', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='fridge', object=['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='gasoline', object=['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity']), RelationSample(subject='grapefruit', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='hairnet', object=['net', 'network', 'mesh', 'meshing', 'meshwork', 'fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hairpin', object=['pin', 'fastener', 'fastening', 'holdfast', 'fixing', 'restraint', 'constraint', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hamburger', object=['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='jacket', object=['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='jeans', object=['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='juicer', object=['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='lemon', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='lotion', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='mascara', object=['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='necklace', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notebook', object=['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notepad', object=['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity']), RelationSample(subject='pastry', object=['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='peach', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='perfume', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='photo', object=['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='pie', object=['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='plum', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='postcard', object=['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='shelf', object=['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='shirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sidewalk', object=['walk', 'walkway', 'paseo', 'path', 'way', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='skirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sofa', object=['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='stapler', object=['device', 'machine', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sunscreen', object=['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sweater', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='toaster', object=['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='toothbrush', object=['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tub', object=['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tv', object=['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='vase', object=['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='wristband', object=['band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'])], _domain=None, _range=None)
2024-06-12 17:35:45 root INFO     starting operator prediction
2024-06-12 17:35:45 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-12 17:35:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:45 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:45 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:46 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:46 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:46 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:47 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:47 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:47 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:47 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:47 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:47 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:47 root INFO     total operator prediction time: 1.36897611618042 seconds
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     [' the', ' a', ' food', '\n', ' '] matches ['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 17:35:49 root INFO     hypernyms - misc (50) total: defaultdict(<class 'int'>, {True: 311, False: 860})
2024-06-12 17:35:49 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='hyponyms - misc', prompt_templates=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], prompt_templates_zs=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], samples=[RelationSample(subject='backpack', object=['daypack', 'kitbag', 'kit_bag']), RelationSample(subject='bag', object=['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag']), RelationSample(subject='bed', object=['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble']), RelationSample(subject='boat', object=['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat']), RelationSample(subject='book', object=['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook']), RelationSample(subject='brush', object=['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush']), RelationSample(subject='burger', object=['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger']), RelationSample(subject='camera', object=['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera']), RelationSample(subject='candy', object=['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg']), RelationSample(subject='car', object=['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand']), RelationSample(subject='church', object=['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk']), RelationSample(subject='citrus', object=['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu']), RelationSample(subject='cloud', object=['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke']), RelationSample(subject='collar', object=['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece']), RelationSample(subject='color', object=['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown']), RelationSample(subject='computer', object=['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad']), RelationSample(subject='container', object=['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag']), RelationSample(subject='cookware', object=['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner']), RelationSample(subject='cup', object=['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail']), RelationSample(subject='cushion', object=['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat']), RelationSample(subject='cutlery', object=['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork']), RelationSample(subject='dessert', object=['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice']), RelationSample(subject='dress', object=['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress']), RelationSample(subject='drum', object=['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka']), RelationSample(subject='emotion', object=['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy']), RelationSample(subject='flask', object=['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask']), RelationSample(subject='guitar', object=['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke']), RelationSample(subject='gun', object=['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling']), RelationSample(subject='jewel', object=['diamond', 'ruby', 'pearl', 'emerald', 'sapphire']), RelationSample(subject='jewelry', object=['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst']), RelationSample(subject='mixer', object=['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk']), RelationSample(subject='month', object=['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']), RelationSample(subject='oven', object=['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor']), RelationSample(subject='painting', object=['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti']), RelationSample(subject='poem', object=['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle']), RelationSample(subject='railway', object=['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail']), RelationSample(subject='season', object=['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek']), RelationSample(subject='seat', object=['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet']), RelationSample(subject='shelf', object=['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm']), RelationSample(subject='shirt', object=['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt']), RelationSample(subject='shoes', object=['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled']), RelationSample(subject='sofa', object=['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab']), RelationSample(subject='song', object=['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song']), RelationSample(subject='spice', object=['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed']), RelationSample(subject='sweater', object=['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck']), RelationSample(subject='tool', object=['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage']), RelationSample(subject='toy', object=['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo']), RelationSample(subject='trousers', object=['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen']), RelationSample(subject='weapon', object=['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire']), RelationSample(subject='weekday', object=['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'])], _domain=None, _range=None)
2024-06-12 17:35:51 root INFO     starting operator prediction
2024-06-12 17:35:51 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more specific term for a {} is)
2024-06-12 17:35:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:53 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:53 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:53 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:53 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:53 root INFO     total operator prediction time: 1.393683910369873 seconds
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['daypack', 'kitbag', 'kit_bag'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['diamond', 'ruby', 'pearl', 'emerald', 'sapphire'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab'] is False
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire'] is True
2024-06-12 17:35:55 root INFO     [' a', ' an', ' t', ' the', ' '] matches ['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'] is True
2024-06-12 17:35:55 root INFO     hyponyms - misc (50) total: defaultdict(<class 'int'>, {True: 354, False: 867})
2024-06-12 17:35:55 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='hypernyms - animals', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='allosaurus', object=['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='anaconda', object=['snake', 'reptile', 'boa', 'serpent', 'ophidian']), RelationSample(subject='ant', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing']), RelationSample(subject='beaver', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='bee', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing']), RelationSample(subject='beetle', object=['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing']), RelationSample(subject='buffalo', object=['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='butterfly', object=['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing']), RelationSample(subject='cat', object=['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', '']), RelationSample(subject='chicken', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='chimpanzee', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='chinchilla', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='cobra', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='cockroach', object=['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing']), RelationSample(subject='cow', object=['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='coyote', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='deer', object=['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='dog', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='duck', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='eagle', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='falcon', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='fox', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='gibbon', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='goat', object=['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='goose', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='gorilla', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='hawk', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='human', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='jackal', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='jaguar', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='leopard', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='lion', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='mamba', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='mouse', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='orangutan', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='owl', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='pony', object=['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus']), RelationSample(subject='porcupine', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='quail', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='rattlesnake', object=['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian']), RelationSample(subject='squirrel', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='stegosaurus', object=['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='tiger', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='triceratops', object=['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='turkey', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='tyrannosaurus', object=['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='velociraptor', object=['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='viper', object=['snake', 'reptile', 'snake', 'serpent', 'ophidian']), RelationSample(subject='vulture', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='wolf', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'])], _domain=None, _range=None)
2024-06-12 17:35:57 root INFO     starting operator prediction
2024-06-12 17:35:58 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-12 17:35:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:58 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:58 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:35:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:35:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:35:59 root INFO     total operator prediction time: 1.38859224319458 seconds
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['snake', 'reptile', 'boa', 'serpent', 'ophidian'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['snake', 'reptile', 'snake', 'serpent', 'ophidian'] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 17:36:01 root INFO     [' animal', ' mammal', ' insect', ' rept', ' carniv'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 17:36:01 root INFO     hypernyms - animals (50) total: defaultdict(<class 'int'>, {True: 404, False: 867})
2024-06-12 17:36:01 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='antonyms - binary', prompt_templates=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], prompt_templates_zs=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], samples=[RelationSample(subject='after', object=['before', 'earlier', 'previously']), RelationSample(subject='ahead', object=['behind', 'rear', 'after', 'tail', 'beforehand']), RelationSample(subject='anterior', object=['posterior']), RelationSample(subject='backward', object=['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward']), RelationSample(subject='before', object=['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead']), RelationSample(subject='beginning', object=['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='below', object=['above', 'higher', 'up']), RelationSample(subject='climb', object=['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining']), RelationSample(subject='dead', object=['alive', 'living', 'live']), RelationSample(subject='decrement', object=['increment']), RelationSample(subject='descend', object=['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant']), RelationSample(subject='dive', object=['emerge']), RelationSample(subject='down', object=['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward']), RelationSample(subject='downslope', object=['upslope', 'ascent']), RelationSample(subject='drop', object=['lift', 'pick_up']), RelationSample(subject='dynamic', object=['static', 'still', 'unmoving', 'unchanging']), RelationSample(subject='employ', object=['dismiss', 'fire', 'sack', 'displace', 'terminate']), RelationSample(subject='exit', object=['entrance', 'entranceway', 'entryway', 'entry', 'entree']), RelationSample(subject='fall', object=['rise', 'upward', 'climb']), RelationSample(subject='first', object=['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='forget', object=['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect']), RelationSample(subject='forward', object=['backward', 'back', 'backwards', 'rearward', 'rearwards']), RelationSample(subject='front', object=['back', 'rear', 'forepart']), RelationSample(subject='in', object=['out', 'outer', 'exterior', 'outside']), RelationSample(subject='inbound', object=['outbound']), RelationSample(subject='inhale', object=['exhale']), RelationSample(subject='input', object=['output']), RelationSample(subject='inside', object=['outside', 'exterior', 'out']), RelationSample(subject='interior', object=['exterior', 'outdoor', 'out-of-door', 'outside']), RelationSample(subject='internal', object=['external', 'outer', 'outside']), RelationSample(subject='inverse', object=['reverse', 'reversion', 'reversal', 'turnabout', 'turnaround']), RelationSample(subject='mortal', object=['immortal']), RelationSample(subject='occupied', object=['vacant', 'free']), RelationSample(subject='off', object=['on']), RelationSample(subject='out', object=['in', 'inside']), RelationSample(subject='outward', object=['upward', 'up', 'upwards']), RelationSample(subject='over', object=['under', 'below', 'beneath']), RelationSample(subject='previously', object=['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent']), RelationSample(subject='proceed', object=['retreat', 'return']), RelationSample(subject='rise', object=['sink', 'drop', 'fall']), RelationSample(subject='south', object=['north']), RelationSample(subject='southeast', object=['southwest', 'northeast']), RelationSample(subject='submerge', object=['emerge']), RelationSample(subject='top', object=['bottom', 'underside', 'undersurface']), RelationSample(subject='toward', object=['away', 'off', 'forth', 'aside']), RelationSample(subject='true', object=['false', 'incorrect', 'wrong', 'mistaken']), RelationSample(subject='under', object=['over', 'above', 'up']), RelationSample(subject='up', object=['down', 'downwards', 'downward', 'downwardly']), RelationSample(subject='uphill', object=['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping']), RelationSample(subject='west', object=['east'])], _domain=None, _range=None)
2024-06-12 17:36:04 root INFO     starting operator prediction
2024-06-12 17:36:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-12 17:36:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:04 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:04 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:05 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:05 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:05 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:05 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:05 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:05 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:05 root INFO     total operator prediction time: 1.366337776184082 seconds
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['before', 'earlier', 'previously'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['behind', 'rear', 'after', 'tail', 'beforehand'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['posterior'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['above', 'higher', 'up'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['alive', 'living', 'live'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['increment'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['upslope', 'ascent'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['lift', 'pick_up'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['static', 'still', 'unmoving', 'unchanging'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['dismiss', 'fire', 'sack', 'displace', 'terminate'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['entrance', 'entranceway', 'entryway', 'entry', 'entree'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['rise', 'upward', 'climb'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['backward', 'back', 'backwards', 'rearward', 'rearwards'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['back', 'rear', 'forepart'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['out', 'outer', 'exterior', 'outside'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['outbound'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['exhale'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['output'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['outside', 'exterior', 'out'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['exterior', 'outdoor', 'out-of-door', 'outside'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['external', 'outer', 'outside'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['immortal'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['vacant', 'free'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['on'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['in', 'inside'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['under', 'below', 'beneath'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['retreat', 'return'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['sink', 'drop', 'fall'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['north'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['southwest', 'northeast'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['emerge'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['bottom', 'underside', 'undersurface'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['away', 'off', 'forth', 'aside'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['false', 'incorrect', 'wrong', 'mistaken'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['over', 'above', 'up'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['down', 'downwards', 'downward', 'downwardly'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping'] is False
2024-06-12 17:36:07 root INFO     ['\n', ' the', ' ', '...', ' to'] matches ['east'] is False
2024-06-12 17:36:07 root INFO     antonyms - binary (50) total: defaultdict(<class 'int'>, {True: 404, False: 914})
2024-06-12 17:36:07 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='meronyms - substance', prompt_templates=['A {} is made up of', 'A {} is comprised of', '{} is made from'], prompt_templates_zs=['A {} is made up of', 'A {} is comprised of', '{} is made from'], samples=[RelationSample(subject='atmosphere', object=['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone']), RelationSample(subject='bag', object=['leather', 'fabric', 'plastic']), RelationSample(subject='beach', object=['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si']), RelationSample(subject='beard', object=['hair']), RelationSample(subject='body', object=['flesh', 'bones']), RelationSample(subject='boots', object=['leather', 'canvas']), RelationSample(subject='bottle', object=['glass', 'plastic']), RelationSample(subject='bowl', object=['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay']), RelationSample(subject='box', object=['cardboard', 'tin', 'boxwood', 'turkish_boxwood']), RelationSample(subject='bread', object=['flour', 'yeast', '']), RelationSample(subject='bronze', object=['copper', 'tin', 'cu', 'atomic_number_29']), RelationSample(subject='candy', object=['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts']), RelationSample(subject='chocolate', object=['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean']), RelationSample(subject='clothing', object=['fabric', 'leather', '']), RelationSample(subject='cloud', object=['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor']), RelationSample(subject='cocktail', object=['alcohol', 'juice', 'water']), RelationSample(subject='concrete', object=['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si']), RelationSample(subject='desk', object=['wood', 'metal', 'steel']), RelationSample(subject='diamond', object=['carbon']), RelationSample(subject='doorknob', object=['metal', 'steel', 'bronze', 'wood']), RelationSample(subject='flag', object=['fabric', 'paper']), RelationSample(subject='glacier', object=['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice']), RelationSample(subject='glass', object=['silicone']), RelationSample(subject='house', object=['bricks', 'cement', 'wood', 'clay']), RelationSample(subject='ice', object=['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='icicle', object=['ice', 'water']), RelationSample(subject='jam', object=['fruit', 'sugar', 'berries']), RelationSample(subject='jeans', object=['fabric', 'denim']), RelationSample(subject='lawn', object=['grass']), RelationSample(subject='lens', object=['glass', 'plastic']), RelationSample(subject='mirror', object=['glass', 'bronze']), RelationSample(subject='money', object=['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin']), RelationSample(subject='ocean', object=['water']), RelationSample(subject='omelette', object=['eggs', 'egg', 'milk', 'cheese']), RelationSample(subject='pastry', object=['flour', 'egg', 'butter', 'filling']), RelationSample(subject='penny', object=['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin']), RelationSample(subject='pill', object=['medicine', 'drug']), RelationSample(subject='plastic', object=['polymer', 'oil', 'gas', 'coal']), RelationSample(subject='roof', object=['shingles', 'tiles', 'wood', 'metal']), RelationSample(subject='sea', object=['water']), RelationSample(subject='snow', object=['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='spoon', object=['aluminium', 'wood', 'steel']), RelationSample(subject='steel', object=['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron']), RelationSample(subject='table', object=['wood', 'metal', 'plastic']), RelationSample(subject='wall', object=['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud']), RelationSample(subject='water', object=['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='wig', object=['hair']), RelationSample(subject='wine', object=['grapes', 'grape']), RelationSample(subject='wire', object=['metal']), RelationSample(subject='yogurt', object=['milk'])], _domain=None, _range=None)
2024-06-12 17:36:10 root INFO     starting operator prediction
2024-06-12 17:36:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is made up of)
2024-06-12 17:36:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:11 root INFO     total operator prediction time: 1.3474524021148682 seconds
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['leather', 'fabric', 'plastic'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['hair'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['flesh', 'bones'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['leather', 'canvas'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['glass', 'plastic'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['cardboard', 'tin', 'boxwood', 'turkish_boxwood'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['flour', 'yeast', ''] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['copper', 'tin', 'cu', 'atomic_number_29'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['fabric', 'leather', ''] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['alcohol', 'juice', 'water'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['wood', 'metal', 'steel'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['carbon'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['metal', 'steel', 'bronze', 'wood'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['fabric', 'paper'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['bricks', 'cement', 'wood', 'clay'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['ice', 'water'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['fruit', 'sugar', 'berries'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['fabric', 'denim'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['grass'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['glass', 'plastic'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['glass', 'bronze'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['water'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['eggs', 'egg', 'milk', 'cheese'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['flour', 'egg', 'butter', 'filling'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['medicine', 'drug'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['polymer', 'oil', 'gas', 'coal'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['shingles', 'tiles', 'wood', 'metal'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['water'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['aluminium', 'wood', 'steel'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['wood', 'metal', 'plastic'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['hair'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['grapes', 'grape'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['metal'] is False
2024-06-12 17:36:13 root INFO     [' a', ' plastic', ' material', ' wood', ' water'] matches ['milk'] is False
2024-06-12 17:36:13 root INFO     meronyms - substance (50) total: defaultdict(<class 'int'>, {True: 429, False: 938})
2024-06-12 17:36:14 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='meronyms - member', prompt_templates=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], prompt_templates_zs=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], samples=[RelationSample(subject='acrobat', object=['troupe']), RelationSample(subject='antelope', object=['herd']), RelationSample(subject='bee', object=['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand']), RelationSample(subject='bird', object=['flock']), RelationSample(subject='book', object=['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting']), RelationSample(subject='calf', object=['cattle', 'herd']), RelationSample(subject='car', object=['train', 'procession']), RelationSample(subject='cat', object=['clowder', 'glaring', 'clutter', 'pounce']), RelationSample(subject='cattle', object=['herd']), RelationSample(subject='christian', object=['congregation', 'church', 'parish']), RelationSample(subject='citizen', object=['citizenry', 'country', 'state']), RelationSample(subject='college', object=['university']), RelationSample(subject='county', object=['state', 'country']), RelationSample(subject='cow', object=['herd']), RelationSample(subject='crow', object=['murder']), RelationSample(subject='division', object=['company', 'business', 'platoon', 'battle_group']), RelationSample(subject='elephant', object=['herd']), RelationSample(subject='employee', object=['staff', 'company']), RelationSample(subject='fish', object=['school']), RelationSample(subject='flower', object=['bouquet', 'bunch']), RelationSample(subject='galaxy', object=['universe']), RelationSample(subject='goose', object=['gaggle']), RelationSample(subject='juror', object=['jury']), RelationSample(subject='kitten', object=['litter']), RelationSample(subject='letter', object=['alphabet']), RelationSample(subject='lion', object=['pride']), RelationSample(subject='listener', object=['audience']), RelationSample(subject='member', object=['club', 'team', 'group', 'band', 'community']), RelationSample(subject='musician', object=['orchestra', 'band']), RelationSample(subject='nomad', object=['horde']), RelationSample(subject='page', object=['book', 'notebook', 'website', 'web-site']), RelationSample(subject='parishioner', object=['parish', 'church']), RelationSample(subject='person', object=['society', 'company', 'party', 'world']), RelationSample(subject='photo', object=['album', 'collection', 'library']), RelationSample(subject='player', object=['team', 'group', 'orchestra']), RelationSample(subject='policeman', object=['police']), RelationSample(subject='secretary', object=['staff']), RelationSample(subject='senator', object=['senate', 'house']), RelationSample(subject='sheep', object=['flock']), RelationSample(subject='shrub', object=['shrubbery']), RelationSample(subject='singer', object=['choir', 'band', 'duo', 'trio', 'quartet']), RelationSample(subject='soldier', object=['army', 'unit', 'division', 'troop']), RelationSample(subject='song', object=['album', 'collection', 'antology', 'library']), RelationSample(subject='spouse', object=['couple', 'relationship', 'family']), RelationSample(subject='star', object=['constellation', 'galaxy']), RelationSample(subject='state', object=['country', 'province']), RelationSample(subject='student', object=['class', 'school']), RelationSample(subject='tree', object=['forest', 'wood', 'grove']), RelationSample(subject='wolf', object=['pack']), RelationSample(subject='word', object=['paragraph', 'sentence', 'text'])], _domain=None, _range=None)
2024-06-12 17:36:16 root INFO     starting operator prediction
2024-06-12 17:36:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is a member of a)
2024-06-12 17:36:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:17 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:17 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:17 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:17 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:17 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:17 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:17 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:17 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:17 root INFO     total operator prediction time: 1.3319504261016846 seconds
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['troupe'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['herd'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['flock'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['cattle', 'herd'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['herd'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['congregation', 'church', 'parish'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['citizenry', 'country', 'state'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['university'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['state', 'country'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['herd'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['company', 'business', 'platoon', 'battle_group'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['herd'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['staff', 'company'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['school'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['bouquet', 'bunch'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['universe'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['gaggle'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['jury'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['litter'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['pride'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['club', 'team', 'group', 'band', 'community'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['orchestra', 'band'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['book', 'notebook', 'website', 'web-site'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['parish', 'church'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['society', 'company', 'party', 'world'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['album', 'collection', 'library'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['team', 'group', 'orchestra'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['police'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['staff'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['flock'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['shrubbery'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['choir', 'band', 'duo', 'trio', 'quartet'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['army', 'unit', 'division', 'troop'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['couple', 'relationship', 'family'] is True
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['constellation', 'galaxy'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['country', 'province'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['class', 'school'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['forest', 'wood', 'grove'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['pack'] is False
2024-06-12 17:36:19 root INFO     [' family', ' group', ' household', ' clan', ' herd'] matches ['paragraph', 'sentence', 'text'] is False
2024-06-12 17:36:19 root INFO     meronyms - member (50) total: defaultdict(<class 'int'>, {True: 437, False: 972})
2024-06-12 17:36:20 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='UK_city - county', prompt_templates=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], prompt_templates_zs=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], samples=[RelationSample(subject='aberdeen', object=['aberdeenshire']), RelationSample(subject='bath', object=['somerset']), RelationSample(subject='belfast', object=['antrim']), RelationSample(subject='birmingham', object=['midlands']), RelationSample(subject='bradford', object=['yorkshire']), RelationSample(subject='brighton', object=['sussex']), RelationSample(subject='cambridge', object=['cambridgeshire']), RelationSample(subject='canterbury', object=['kent']), RelationSample(subject='cardiff', object=['glamorgan']), RelationSample(subject='carlisle', object=['cumbria']), RelationSample(subject='chester', object=['cheshire']), RelationSample(subject='chichester', object=['sussex']), RelationSample(subject='coventry', object=['midlands']), RelationSample(subject='crawley', object=['sussex']), RelationSample(subject='derby', object=['derbyshire']), RelationSample(subject='dundee', object=['lowlands']), RelationSample(subject='edinburgh', object=['lowlands']), RelationSample(subject='ely', object=['cambridgeshire']), RelationSample(subject='exeter', object=['devon']), RelationSample(subject='glasgow', object=['lowlands']), RelationSample(subject='gloucester', object=['gloucestershire']), RelationSample(subject='hereford', object=['herefordshire']), RelationSample(subject='hull', object=['yorkshire']), RelationSample(subject='inverness', object=['highlands']), RelationSample(subject='lancaster', object=['lancashire']), RelationSample(subject='leeds', object=['yorkshire']), RelationSample(subject='leicester', object=['midlands']), RelationSample(subject='lincoln', object=['lincolnshire']), RelationSample(subject='liverpool', object=['lancashire']), RelationSample(subject='newcastle', object=['northumberland']), RelationSample(subject='newport', object=['gwent']), RelationSample(subject='norwich', object=['norfolk']), RelationSample(subject='nottingham', object=['nottinghamshire']), RelationSample(subject='oxford', object=['oxfordshire']), RelationSample(subject='plymouth', object=['devon']), RelationSample(subject='portsmouth', object=['hampshire']), RelationSample(subject='preston', object=['lancashire']), RelationSample(subject='reading', object=['berkshire']), RelationSample(subject='salford', object=['manchester']), RelationSample(subject='salisbury', object=['wiltshire']), RelationSample(subject='sheffield', object=['yorkshire']), RelationSample(subject='southampton', object=['hampshire']), RelationSample(subject='stirling', object=['stirlingshire']), RelationSample(subject='swansea', object=['glamorgan']), RelationSample(subject='wakefield', object=['yorkshire']), RelationSample(subject='wells', object=['somerset']), RelationSample(subject='winchester', object=['hampshire']), RelationSample(subject='wolverhampton', object=['midlands']), RelationSample(subject='worcester', object=['worcestershire']), RelationSample(subject='york', object=['yorkshire'])], _domain=None, _range=None)
2024-06-12 17:36:22 root INFO     starting operator prediction
2024-06-12 17:36:22 lre.operators WARNING  relation has > 1 prompt_templates, will use first (In the United Kingdom, the city of {} is in the county of)
2024-06-12 17:36:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:23 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:23 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:23 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:23 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:23 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:24 root INFO     total operator prediction time: 1.422476053237915 seconds
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['aberdeenshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['antrim'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['midlands'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['sussex'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['cambridgeshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['kent'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['glamorgan'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['cumbria'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['derbyshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['cambridgeshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['devon'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['gloucestershire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['herefordshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['highlands'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['lancashire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['yorkshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['midlands'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['lincolnshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['lancashire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['northumberland'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['norfolk'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['nottinghamshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['oxfordshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['devon'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['berkshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['manchester'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['yorkshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['hampshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['hampshire'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['midlands'] is False
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['worcestershire'] is True
2024-06-12 17:36:26 root INFO     [' west', ' w', ' south', ' the', ' wel'] matches ['yorkshire'] is False
2024-06-12 17:36:26 root INFO     UK_city - county (50) total: defaultdict(<class 'int'>, {True: 438, False: 1003})
2024-06-12 17:36:26 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - sound', prompt_templates=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], prompt_templates_zs=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], samples=[RelationSample(subject='alpaca', object=['bray']), RelationSample(subject='bear', object=['growl']), RelationSample(subject='bee', object=['buzz', 'hum']), RelationSample(subject='beetle', object=['drone']), RelationSample(subject='cat', object=['meow', 'meu', 'purr', 'caterwaul']), RelationSample(subject='cattle', object=['moo', 'bellow', 'low']), RelationSample(subject='chicken', object=['cluck', 'crow', 'cock-a-doodle-doo']), RelationSample(subject='chimpanzee', object=['scream']), RelationSample(subject='cicada', object=['buzz']), RelationSample(subject='coyote', object=['howl']), RelationSample(subject='cricket', object=['chirp']), RelationSample(subject='crow', object=['caw']), RelationSample(subject='deer', object=['bellow']), RelationSample(subject='dog', object=['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof']), RelationSample(subject='donkey', object=['bray', 'hee-haw']), RelationSample(subject='duck', object=['quack']), RelationSample(subject='elephant', object=['trumpet']), RelationSample(subject='elk', object=['bellow']), RelationSample(subject='ferret', object=['dook']), RelationSample(subject='fly', object=['buzz']), RelationSample(subject='fox', object=['howl', 'yelp']), RelationSample(subject='frog', object=['ribbit', 'croak']), RelationSample(subject='goat', object=['bleat']), RelationSample(subject='gorilla', object=['grunt', 'scream']), RelationSample(subject='hornet', object=['buzz']), RelationSample(subject='horse', object=['neigh', 'snort', 'whinny']), RelationSample(subject='hound', object=['bark', 'howl', 'bay']), RelationSample(subject='hyena', object=['laugh']), RelationSample(subject='leopard', object=['growl']), RelationSample(subject='lion', object=['roar', 'growl']), RelationSample(subject='magpie', object=['chatter']), RelationSample(subject='mallard', object=['quack']), RelationSample(subject='monkey', object=['chatter', 'gibber', 'howl', 'scream']), RelationSample(subject='moose', object=['bellow']), RelationSample(subject='mouse', object=['squeak']), RelationSample(subject='mule', object=['bray', 'hee-haw']), RelationSample(subject='pig', object=['oink', 'grunt', 'gruff', 'squeal']), RelationSample(subject='pigeon', object=['coo']), RelationSample(subject='rat', object=['squeak']), RelationSample(subject='raven', object=['caw']), RelationSample(subject='seal', object=['bark']), RelationSample(subject='sheep', object=['baa', 'bleat']), RelationSample(subject='snake', object=['hiss']), RelationSample(subject='songbird', object=['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter']), RelationSample(subject='tiger', object=['growl', 'roar']), RelationSample(subject='toad', object=['ribbit', 'croak']), RelationSample(subject='turkey', object=['gobble']), RelationSample(subject='wasp', object=['buzz']), RelationSample(subject='whale', object=['sing']), RelationSample(subject='wolf', object=['howl'])], _domain=None, _range=None)
2024-06-12 17:36:29 root INFO     starting operator prediction
2024-06-12 17:36:29 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The sound that a {} makes is called a)
2024-06-12 17:36:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:30 root INFO     total operator prediction time: 1.4933605194091797 seconds
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bray'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['growl'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['buzz', 'hum'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['meow', 'meu', 'purr', 'caterwaul'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['moo', 'bellow', 'low'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['cluck', 'crow', 'cock-a-doodle-doo'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['scream'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['buzz'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['howl'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['chirp'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['caw'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bellow'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bray', 'hee-haw'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['quack'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['trumpet'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bellow'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['buzz'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['howl', 'yelp'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['ribbit', 'croak'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bleat'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['grunt', 'scream'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['buzz'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['neigh', 'snort', 'whinny'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bark', 'howl', 'bay'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['roar', 'growl'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['chatter'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['quack'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['chatter', 'gibber', 'howl', 'scream'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bellow'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['squeak'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bray', 'hee-haw'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['oink', 'grunt', 'gruff', 'squeal'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['coo'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['squeak'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['caw'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['bark'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['baa', 'bleat'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['hiss'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['growl', 'roar'] is True
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['ribbit', 'croak'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['gobble'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['buzz'] is False
2024-06-12 17:36:32 root INFO     [' h', ' cry', ' m', ' scream', ' roar'] matches ['howl'] is True
2024-06-12 17:36:32 root INFO     animal - sound (50) total: defaultdict(<class 'int'>, {True: 454, False: 1032})
2024-06-12 17:36:33 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - shelter', prompt_templates=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], prompt_templates_zs=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], samples=[RelationSample(subject='ant', object=['anthill', 'insectarium', 'terrarium', 'formicarium']), RelationSample(subject='ape', object=['grove', 'tree', 'cage']), RelationSample(subject='baboon', object=['grove', 'tree', 'cage']), RelationSample(subject='bat', object=['cave', 'cage']), RelationSample(subject='bear', object=['den', 'cage']), RelationSample(subject='beaver', object=['dam', 'river', 'pen']), RelationSample(subject='bee', object=['hive']), RelationSample(subject='cattle', object=['barn', 'coral']), RelationSample(subject='chimpanzee', object=['grove', 'tree', 'cage']), RelationSample(subject='chinchilla', object=['nest', 'cage']), RelationSample(subject='cockroach', object=['nest']), RelationSample(subject='cricket', object=['nest']), RelationSample(subject='crocodile', object=['river', 'lake', 'pool']), RelationSample(subject='crow', object=['nest', 'cage']), RelationSample(subject='dog', object=['doghouse', 'home', 'den', 'kennel']), RelationSample(subject='dolphin', object=['sea', 'sanctuary']), RelationSample(subject='duck', object=['pond', 'nest']), RelationSample(subject='fish', object=['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary']), RelationSample(subject='fly', object=['nest']), RelationSample(subject='fox', object=['den', 'cage']), RelationSample(subject='goldfish', object=['pond', 'bowl', 'aquarium', 'sanctuary']), RelationSample(subject='gorilla', object=['grove', 'tree', 'cage']), RelationSample(subject='hamster', object=['nest', 'cage']), RelationSample(subject='hedgehog', object=['nest', 'hedge', 'pen']), RelationSample(subject='herring', object=['sea', 'sanctuary']), RelationSample(subject='hippopotamus', object=['river', 'lake', 'pen']), RelationSample(subject='hornet', object=['nest']), RelationSample(subject='horse', object=['stable', 'range', 'paddock', 'corral']), RelationSample(subject='insect', object=['nest', 'cage', 'box']), RelationSample(subject='lion', object=['den', 'cage', 'savannah']), RelationSample(subject='locust', object=['nest']), RelationSample(subject='mallard', object=['nest', 'pond']), RelationSample(subject='mole', object=['hole', 'nest']), RelationSample(subject='monkey', object=['tree', 'grove', 'cage']), RelationSample(subject='mouse', object=['nest', 'cage']), RelationSample(subject='pig', object=['sty', 'pigsty', 'pen', 'pigpen']), RelationSample(subject='rabbit', object=['burrow', 'warren', 'hutch', 'cage']), RelationSample(subject='rat', object=['nest', 'cage']), RelationSample(subject='raven', object=['nest', 'cage']), RelationSample(subject='scorpion', object=['nest', 'aquarium', 'terrarium']), RelationSample(subject='seal', object=['den', 'aquarium', 'sea']), RelationSample(subject='snake', object=['nest', 'pit', 'acquarium']), RelationSample(subject='spider', object=['web', 'acquarium', 'terrarium']), RelationSample(subject='termite', object=['hill', 'terrarium']), RelationSample(subject='tiger', object=['den', 'cage']), RelationSample(subject='trout', object=['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank']), RelationSample(subject='wasp', object=['nest']), RelationSample(subject='whale', object=['sea', 'sanctuary']), RelationSample(subject='wolf', object=['den', 'cage']), RelationSample(subject='woodchuck', object=['hole'])], _domain=None, _range=None)
2024-06-12 17:36:35 root INFO     starting operator prediction
2024-06-12 17:36:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The place {} lives in is called)
2024-06-12 17:36:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:36 root INFO     total operator prediction time: 1.380340576171875 seconds
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['anthill', 'insectarium', 'terrarium', 'formicarium'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['grove', 'tree', 'cage'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['cave', 'cage'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['den', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['dam', 'river', 'pen'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['hive'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['barn', 'coral'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['river', 'lake', 'pool'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['doghouse', 'home', 'den', 'kennel'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['sea', 'sanctuary'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['pond', 'nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['den', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['pond', 'bowl', 'aquarium', 'sanctuary'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['grove', 'tree', 'cage'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'hedge', 'pen'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['sea', 'sanctuary'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['river', 'lake', 'pen'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['stable', 'range', 'paddock', 'corral'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage', 'box'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['den', 'cage', 'savannah'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'pond'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['hole', 'nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['tree', 'grove', 'cage'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['sty', 'pigsty', 'pen', 'pigpen'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['burrow', 'warren', 'hutch', 'cage'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'aquarium', 'terrarium'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['den', 'aquarium', 'sea'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest', 'pit', 'acquarium'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['web', 'acquarium', 'terrarium'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['den', 'cage'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['nest'] is True
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['sea', 'sanctuary'] is False
2024-06-12 17:36:39 root INFO     [' nest', ' den', ' home', ' house', ' lair'] matches ['hole'] is False
2024-06-12 17:36:39 root INFO     animal - shelter (50) total: defaultdict(<class 'int'>, {True: 479, False: 1053})
2024-06-12 17:36:39 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='name - nationality', prompt_templates=['{} was', '{} identified nationally as', '{} identifies as'], prompt_templates_zs=['{} was', '{} identified nationally as', '{} identifies as'], samples=[RelationSample(subject='aristotle', object=['greek']), RelationSample(subject='balzac', object=['french']), RelationSample(subject='beethoven', object=['german']), RelationSample(subject='caesar', object=['roman']), RelationSample(subject='confucius', object=['chinese']), RelationSample(subject='copernicus', object=['polish']), RelationSample(subject='darwin', object=['english', 'british']), RelationSample(subject='depp', object=['american']), RelationSample(subject='descartes', object=['french']), RelationSample(subject='dickens', object=['english', 'british']), RelationSample(subject='dostoyevsky', object=['russian']), RelationSample(subject='edison', object=['american']), RelationSample(subject='einstein', object=['jewish', 'german', 'american']), RelationSample(subject='euclid', object=['greek']), RelationSample(subject='fermi', object=['italian']), RelationSample(subject='galilei', object=['italian']), RelationSample(subject='gorbachev', object=['soviet', 'russian']), RelationSample(subject='hawking', object=['english', 'british']), RelationSample(subject='hegel', object=['german']), RelationSample(subject='hitler', object=['german', 'austrian']), RelationSample(subject='homer', object=['greek']), RelationSample(subject='hume', object=['scottish', 'british']), RelationSample(subject='jolie', object=['american']), RelationSample(subject='kant', object=['german']), RelationSample(subject='kepler', object=['german']), RelationSample(subject='lavoisier', object=['french']), RelationSample(subject='leibniz', object=['german']), RelationSample(subject='lenin', object=['soviet', 'russian']), RelationSample(subject='lennon', object=['english', 'british']), RelationSample(subject='lincoln', object=['american']), RelationSample(subject='locke', object=['english', 'british']), RelationSample(subject='machiavelli', object=['italian']), RelationSample(subject='marx', object=['german']), RelationSample(subject='maxwell', object=['scottish', 'british']), RelationSample(subject='mencius', object=['chinese']), RelationSample(subject='michelangelo', object=['italian']), RelationSample(subject='mozart', object=['german', 'austrian']), RelationSample(subject='napoleon', object=['french', 'corsican', 'italian']), RelationSample(subject='newton', object=['english', 'british']), RelationSample(subject='pascal', object=['french']), RelationSample(subject='plato', object=['greek']), RelationSample(subject='raphael', object=['italian']), RelationSample(subject='rousseau', object=['french']), RelationSample(subject='spinoza', object=['dutch']), RelationSample(subject='stalin', object=['soviet', 'georgian']), RelationSample(subject='strauss', object=['austrian']), RelationSample(subject='tchaikovsky', object=['russian']), RelationSample(subject='tolstoi', object=['russian']), RelationSample(subject='truman', object=['american']), RelationSample(subject='wagner', object=['german'])], _domain=None, _range=None)
2024-06-12 17:36:41 root INFO     starting operator prediction
2024-06-12 17:36:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was)
2024-06-12 17:36:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:42 root INFO     total operator prediction time: 1.4192254543304443 seconds
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['greek'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['french'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['roman'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['chinese'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['polish'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['english', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['french'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['english', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['russian'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['american'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['jewish', 'german', 'american'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['greek'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['italian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['italian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['soviet', 'russian'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['english', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german', 'austrian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['greek'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['scottish', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['american'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['french'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['soviet', 'russian'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['english', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['american'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['english', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['italian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['scottish', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['chinese'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['italian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german', 'austrian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['french', 'corsican', 'italian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['english', 'british'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['french'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['greek'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['italian'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['french'] is True
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['austrian'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['russian'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['russian'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['american'] is False
2024-06-12 17:36:45 root INFO     [' g', ' it', ' english', ' french', ' b'] matches ['german'] is True
2024-06-12 17:36:45 root INFO     name - nationality (50) total: defaultdict(<class 'int'>, {True: 512, False: 1067})
2024-06-12 17:36:45 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='male - female', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='actor', object=['actress']), RelationSample(subject='batman', object=['batwoman']), RelationSample(subject='boar', object=['sow']), RelationSample(subject='boy', object=['girl']), RelationSample(subject='brother', object=['sister']), RelationSample(subject='buck', object=['doe']), RelationSample(subject='bull', object=['cow']), RelationSample(subject='businessman', object=['businesswoman']), RelationSample(subject='chairman', object=['chairwoman']), RelationSample(subject='dad', object=['mom', 'mum']), RelationSample(subject='daddy', object=['mommy', 'mother', 'mom']), RelationSample(subject='duke', object=['duchess']), RelationSample(subject='emperor', object=['empress']), RelationSample(subject='father', object=['mother']), RelationSample(subject='fisherman', object=['fisherwoman']), RelationSample(subject='fox', object=['vixen']), RelationSample(subject='gentleman', object=['lady', 'gentlewoman', 'madam']), RelationSample(subject='god', object=['goddess']), RelationSample(subject='grandfather', object=['grandmother']), RelationSample(subject='grandpa', object=['grandma']), RelationSample(subject='grandson', object=['granddaughter']), RelationSample(subject='groom', object=['bride']), RelationSample(subject='headmaster', object=['headmistress']), RelationSample(subject='heir', object=['heiress']), RelationSample(subject='hero', object=['heroine']), RelationSample(subject='hound', object=['bitch']), RelationSample(subject='husband', object=['wife']), RelationSample(subject='king', object=['queen']), RelationSample(subject='lion', object=['lioness']), RelationSample(subject='man', object=['woman']), RelationSample(subject='manager', object=['manageress']), RelationSample(subject='mister', object=['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam']), RelationSample(subject='murderer', object=['murderess']), RelationSample(subject='nephew', object=['niece']), RelationSample(subject='poet', object=['poetess']), RelationSample(subject='policeman', object=['policewoman']), RelationSample(subject='prince', object=['princess']), RelationSample(subject='ram', object=['ewe']), RelationSample(subject='rooster', object=['hen']), RelationSample(subject='sculptor', object=['sculptress']), RelationSample(subject='sir', object=['madam']), RelationSample(subject='son', object=['daughter']), RelationSample(subject='stallion', object=['mare']), RelationSample(subject='stepfather', object=['stepmother']), RelationSample(subject='superman', object=['superwoman']), RelationSample(subject='tiger', object=['tigress']), RelationSample(subject='uncle', object=['aunt']), RelationSample(subject='valet', object=['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid']), RelationSample(subject='waiter', object=['waitress']), RelationSample(subject='webmaster', object=['webmistress'])], _domain=None, _range=None)
2024-06-12 17:36:47 root INFO     starting operator prediction
2024-06-12 17:36:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-12 17:36:47 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:47 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:47 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:47 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:47 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:47 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:47 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:47 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:47 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:48 root INFO     total operator prediction time: 1.3105757236480713 seconds
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['actress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['batwoman'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['sow'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['girl'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['sister'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['doe'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['cow'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['businesswoman'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['chairwoman'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['mom', 'mum'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['mommy', 'mother', 'mom'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['duchess'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['empress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['mother'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['fisherwoman'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['vixen'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['lady', 'gentlewoman', 'madam'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['goddess'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['grandmother'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['grandma'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['granddaughter'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['bride'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['headmistress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['heiress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['heroine'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['bitch'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['wife'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['queen'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['lioness'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['manageress'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['murderess'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['niece'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['poetess'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['policewoman'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['princess'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['ewe'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['hen'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['sculptress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['madam'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['mare'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['stepmother'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['superwoman'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['tigress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['aunt'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid'] is True
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['waitress'] is False
2024-06-12 17:36:51 root INFO     [' female', ' woman', ' lady', ' m', ' d'] matches ['webmistress'] is False
2024-06-12 17:36:51 root INFO     male - female (50) total: defaultdict(<class 'int'>, {True: 524, False: 1103})
2024-06-12 17:36:51 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='name - occupation', prompt_templates=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], prompt_templates_zs=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], samples=[RelationSample(subject='andersen', object=['writer', 'poet', 'author']), RelationSample(subject='aristotle', object=['philosopher']), RelationSample(subject='balzac', object=['novelist', 'writer']), RelationSample(subject='beethoven', object=['composer']), RelationSample(subject='caesar', object=['emperor', 'commander', 'leader']), RelationSample(subject='columbus', object=['explorer']), RelationSample(subject='confucius', object=['philosopher']), RelationSample(subject='dante', object=['poet']), RelationSample(subject='darwin', object=['naturalist', 'biologist', 'geologist']), RelationSample(subject='depp', object=['actor', 'producer', 'musician']), RelationSample(subject='descartes', object=['mathematician', 'philosopher']), RelationSample(subject='dickens', object=['novelist', 'writer', 'critic', 'author']), RelationSample(subject='edison', object=['inventor', 'businessman']), RelationSample(subject='einstein', object=['physicist', 'scientist']), RelationSample(subject='euler', object=['mathematician', 'physicist', 'astronomer', 'logician', 'engineer']), RelationSample(subject='goethe', object=['poet', 'playwright', 'novelist', 'writer', 'author']), RelationSample(subject='hawking', object=['physicist', 'scientist']), RelationSample(subject='haydn', object=['composer']), RelationSample(subject='hegel', object=['philosopher']), RelationSample(subject='hitler', object=['dictator', 'politician', 'nazi']), RelationSample(subject='hume', object=['philosopher', 'politician']), RelationSample(subject='jolie', object=['actress', 'filmmaker', 'director', 'humanitarian', 'activist']), RelationSample(subject='kant', object=['philosopher']), RelationSample(subject='kepler', object=['mathematician', 'physicist', 'astronomer', 'astrologer']), RelationSample(subject='lincoln', object=['president']), RelationSample(subject='locke', object=['philosopher']), RelationSample(subject='marx', object=['philosopher', 'communist']), RelationSample(subject='maxwell', object=['physicist', 'scientist']), RelationSample(subject='mencius', object=['philosopher']), RelationSample(subject='michelangelo', object=['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer']), RelationSample(subject='moses', object=['prophet', 'leader']), RelationSample(subject='mozart', object=['composer']), RelationSample(subject='napoleon', object=['emperor', 'leader', 'politician', 'commander']), RelationSample(subject='newton', object=['scientist', 'mathematician', 'psysicist', 'philosopher']), RelationSample(subject='pacino', object=['actor', 'director', 'filmmaker']), RelationSample(subject='pascal', object=['mathematician', 'philosopher']), RelationSample(subject='picasso', object=['painter', 'artist', 'sculptor', 'designer']), RelationSample(subject='plato', object=['philosopher']), RelationSample(subject='raphael', object=['painter', 'artist', 'architect']), RelationSample(subject='rembrandt', object=['painter', 'etcher', 'artist']), RelationSample(subject='rousseau', object=['writer', 'author', 'philosopher']), RelationSample(subject='schwarzenegger', object=['actor', 'politician', 'governor']), RelationSample(subject='shakespeare', object=['playwright', 'poet']), RelationSample(subject='spinoza', object=['philosopher']), RelationSample(subject='stalin', object=['dictator', 'politician', 'leader', 'statesman']), RelationSample(subject='strauss', object=['composer']), RelationSample(subject='tolstoi', object=['novelist', 'writer', 'philosopher']), RelationSample(subject='truman', object=['president']), RelationSample(subject='wagner', object=['composer']), RelationSample(subject='wittgenstein', object=['philosopher'])], _domain=None, _range=None)
2024-06-12 17:36:53 root INFO     starting operator prediction
2024-06-12 17:36:53 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was known for their work as a )
2024-06-12 17:36:53 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:53 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:53 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:53 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:53 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:54 root INFO     total operator prediction time: 1.4194586277008057 seconds
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['writer', 'poet', 'author'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['novelist', 'writer'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['composer'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['emperor', 'commander', 'leader'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['explorer'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['poet'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['naturalist', 'biologist', 'geologist'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['actor', 'producer', 'musician'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['mathematician', 'philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['novelist', 'writer', 'critic', 'author'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['inventor', 'businessman'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['physicist', 'scientist'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['mathematician', 'physicist', 'astronomer', 'logician', 'engineer'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['poet', 'playwright', 'novelist', 'writer', 'author'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['physicist', 'scientist'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['composer'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['dictator', 'politician', 'nazi'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher', 'politician'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['actress', 'filmmaker', 'director', 'humanitarian', 'activist'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['mathematician', 'physicist', 'astronomer', 'astrologer'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['president'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher', 'communist'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['physicist', 'scientist'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['prophet', 'leader'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['composer'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['emperor', 'leader', 'politician', 'commander'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['scientist', 'mathematician', 'psysicist', 'philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['actor', 'director', 'filmmaker'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['mathematician', 'philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['painter', 'artist', 'sculptor', 'designer'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['painter', 'artist', 'architect'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['painter', 'etcher', 'artist'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['writer', 'author', 'philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['actor', 'politician', 'governor'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['playwright', 'poet'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['dictator', 'politician', 'leader', 'statesman'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['novelist', 'writer', 'philosopher'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['president'] is False
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['composer'] is True
2024-06-12 17:36:57 root INFO     [' writer', ' poet', ' philosopher', ' composer', ' '] matches ['philosopher'] is True
2024-06-12 17:36:57 root INFO     name - occupation (50) total: defaultdict(<class 'int'>, {True: 551, False: 1125})
2024-06-12 17:36:57 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='country - language', prompt_templates=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], prompt_templates_zs=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], samples=[RelationSample(subject='andorra', object=['catalan']), RelationSample(subject='argentina', object=['spanish']), RelationSample(subject='australia', object=['english']), RelationSample(subject='austria', object=['german']), RelationSample(subject='bahamas', object=['english']), RelationSample(subject='bangladesh', object=['bengali', 'bangla']), RelationSample(subject='barbados', object=['english']), RelationSample(subject='belize', object=['english']), RelationSample(subject='bolivia', object=['spanish']), RelationSample(subject='brazil', object=['portuguese']), RelationSample(subject='cambodia', object=['khmer']), RelationSample(subject='canada', object=['english', 'french']), RelationSample(subject='chile', object=['spanish']), RelationSample(subject='colombia', object=['spanish']), RelationSample(subject='cuba', object=['spanish']), RelationSample(subject='cyprus', object=['greek', 'turkish']), RelationSample(subject='denmark', object=['danish', 'faroese', 'greenlandic', 'german']), RelationSample(subject='ecuador', object=['spanish', 'quechua']), RelationSample(subject='egypt', object=['arabic']), RelationSample(subject='ethiopia', object=['amharic']), RelationSample(subject='fiji', object=['english']), RelationSample(subject='guadeloupe', object=['french']), RelationSample(subject='guam', object=['english', 'chamorro']), RelationSample(subject='guatemala', object=['spanish']), RelationSample(subject='guyana', object=['english']), RelationSample(subject='haiti', object=['creole', 'french']), RelationSample(subject='iran', object=['persian']), RelationSample(subject='iraq', object=['arabic', 'kurdish']), RelationSample(subject='ireland', object=['english', 'irish', 'gaelic']), RelationSample(subject='israel', object=['hebrew', 'arabic']), RelationSample(subject='jamaica', object=['english', 'creole']), RelationSample(subject='jordan', object=['arabic']), RelationSample(subject='kazakhstan', object=['kazak', 'qazaq', 'russian']), RelationSample(subject='kosovo', object=['albanian', 'serbian']), RelationSample(subject='kuwait', object=['arabic']), RelationSample(subject='mexico', object=['spanish', 'nahuatl']), RelationSample(subject='moldova', object=['moldovan', 'romanian']), RelationSample(subject='morocco', object=['berber', 'arabic']), RelationSample(subject='mozambique', object=['portuguese']), RelationSample(subject='netherlands', object=['dutch', 'frisian']), RelationSample(subject='nicaragua', object=['spanish']), RelationSample(subject='norway', object=['norwegian', 'bokmål', 'bokmal', 'nynorsk']), RelationSample(subject='palestine', object=['arabic']), RelationSample(subject='peru', object=['spanish']), RelationSample(subject='philippines', object=['tagalog', 'filipino']), RelationSample(subject='switzerland', object=['german', 'french', 'italian']), RelationSample(subject='syria', object=['arabic']), RelationSample(subject='taiwan', object=['chinese']), RelationSample(subject='usa', object=['english']), RelationSample(subject='venezuela', object=['spanish'])], _domain=None, _range=None)
2024-06-12 17:36:59 root INFO     starting operator prediction
2024-06-12 17:36:59 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The country of {} primarily speaks the language of)
2024-06-12 17:36:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:36:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:36:59 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:36:59 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:00 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:00 root INFO     total operator prediction time: 1.456855297088623 seconds
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['catalan'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['german'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['bengali', 'bangla'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['portuguese'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['khmer'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english', 'french'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['greek', 'turkish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['danish', 'faroese', 'greenlandic', 'german'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish', 'quechua'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['amharic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['french'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english', 'chamorro'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['creole', 'french'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['persian'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['arabic', 'kurdish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english', 'irish', 'gaelic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['hebrew', 'arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english', 'creole'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['kazak', 'qazaq', 'russian'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['albanian', 'serbian'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish', 'nahuatl'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['moldovan', 'romanian'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['berber', 'arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['portuguese'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['dutch', 'frisian'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['norwegian', 'bokmål', 'bokmal', 'nynorsk'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['tagalog', 'filipino'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['german', 'french', 'italian'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['arabic'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['chinese'] is False
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['english'] is True
2024-06-12 17:37:03 root INFO     [' english', ' sp', ' g', ' french', ' a'] matches ['spanish'] is True
2024-06-12 17:37:03 root INFO     country - language (50) total: defaultdict(<class 'int'>, {True: 589, False: 1137})
2024-06-12 17:37:03 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='things - color', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='ant', object=['black', 'brown', 'red']), RelationSample(subject='apple', object=['red', 'orange', 'yellow', 'golden']), RelationSample(subject='blackboard', object=['black', 'green']), RelationSample(subject='blood', object=['red']), RelationSample(subject='blueberry', object=['blue', 'black']), RelationSample(subject='broccoli', object=['green']), RelationSample(subject='bruise', object=['blue', 'purple']), RelationSample(subject='cabbage', object=['green']), RelationSample(subject='carrot', object=['orange', 'red', 'yellow']), RelationSample(subject='cauliflower', object=['white', 'green', 'yellow', 'yellowish']), RelationSample(subject='celery', object=['green', 'white', 'brown']), RelationSample(subject='cherry', object=['red', 'yellow', 'black']), RelationSample(subject='chocolate', object=['white', 'brown', 'black']), RelationSample(subject='cloud', object=['white', 'gray', 'grey']), RelationSample(subject='coal', object=['black']), RelationSample(subject='coffee', object=['black', 'brown']), RelationSample(subject='cranberry', object=['red', 'purple', 'pink']), RelationSample(subject='cream', object=['white']), RelationSample(subject='crow', object=['black']), RelationSample(subject='cucumber', object=['green']), RelationSample(subject='emerald', object=['green']), RelationSample(subject='fridge', object=['white', 'silver', 'black']), RelationSample(subject='frog', object=['green', 'brown', 'grey', 'gray']), RelationSample(subject='grapes', object=['black', 'red', 'green', 'purple']), RelationSample(subject='grass', object=['green']), RelationSample(subject='leaves', object=['green', 'red', 'yellow']), RelationSample(subject='milk', object=['white']), RelationSample(subject='paper', object=['white', 'color']), RelationSample(subject='parsley', object=['green']), RelationSample(subject='peony', object=['red', 'white', 'pink', 'purple']), RelationSample(subject='pepper', object=['black', 'red', 'green', 'yellow', 'orange']), RelationSample(subject='potato', object=['brown']), RelationSample(subject='radish', object=['red', 'pink', 'white', 'green', 'black']), RelationSample(subject='raven', object=['black']), RelationSample(subject='rose', object=['red', 'yellow', 'pink', 'white', 'blue']), RelationSample(subject='ruby', object=['red']), RelationSample(subject='salt', object=['white']), RelationSample(subject='sapphire', object=['blue']), RelationSample(subject='sea', object=['blue', 'green', 'gray', 'grey']), RelationSample(subject='sky', object=['blue', 'gray', 'grey']), RelationSample(subject='snow', object=['white']), RelationSample(subject='soil', object=['black', 'brown', 'dark']), RelationSample(subject='spinach', object=['green']), RelationSample(subject='sugar', object=['white', 'brown']), RelationSample(subject='sun', object=['yellow', 'gold']), RelationSample(subject='swan', object=['white', 'black', 'gray', 'grey']), RelationSample(subject='tea', object=['black', 'green', 'white', 'red', 'brown', 'yellow']), RelationSample(subject='tomato', object=['red']), RelationSample(subject='toothpaste', object=['white']), RelationSample(subject='yoghurt', object=['white', 'pink'])], _domain=None, _range=None)
2024-06-12 17:37:05 root INFO     starting operator prediction
2024-06-12 17:37:05 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-12 17:37:05 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:05 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:06 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:06 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:06 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:06 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:06 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:06 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:06 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:07 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:37:07 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:37:07 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:37:07 root INFO     total operator prediction time: 1.4407556056976318 seconds
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'brown', 'red'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red', 'orange', 'yellow', 'golden'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['blue', 'black'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['blue', 'purple'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['orange', 'red', 'yellow'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'green', 'yellow', 'yellowish'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green', 'white', 'brown'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red', 'yellow', 'black'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'brown', 'black'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'gray', 'grey'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'brown'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red', 'purple', 'pink'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'silver', 'black'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green', 'brown', 'grey', 'gray'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'red', 'green', 'purple'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green', 'red', 'yellow'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'color'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red', 'white', 'pink', 'purple'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'red', 'green', 'yellow', 'orange'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red', 'pink', 'white', 'green', 'black'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red', 'yellow', 'pink', 'white', 'blue'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['blue'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['blue', 'green', 'gray', 'grey'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['blue', 'gray', 'grey'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'brown', 'dark'] is False
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['green'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'brown'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['yellow', 'gold'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'black', 'gray', 'grey'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['black', 'green', 'white', 'red', 'brown', 'yellow'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['red'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white'] is True
2024-06-12 17:37:09 root INFO     [' white', ' yellow', ' red', ' green', ' purple'] matches ['white', 'pink'] is True
2024-06-12 17:37:09 root INFO     things - color (50) total: defaultdict(<class 'int'>, {True: 630, False: 1145})
2024-06-12 17:39:04 root INFO     loading model + tokenizer
2024-06-12 17:39:21 root INFO     model + tokenizer loaded
2024-06-12 17:39:21 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:39:23 root INFO     starting operator prediction
2024-06-12 17:39:23 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:39:23 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:23 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:25 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:25 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:25 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:25 root INFO     total operator prediction time: 1.3321564197540283 seconds
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['angrier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['cheaper'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['cleverer'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['coarser'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['costlier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['cuter'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['denser'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['dumber'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['fiercer'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['handier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['happier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['hardier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['harsher'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['healthier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['hotter'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['huger'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['hungrier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['lazier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['lengthier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['luckier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['madder'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['merrier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['milder'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['moister'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['nastier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['neater'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['nicer'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['noisier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['prouder'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['purer'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['riskier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['rockier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['ruder'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['sadder'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['scarier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['sexier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['stickier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['stricter'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['stronger'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['subtler'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['sunnier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['tastier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['tinier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['trickier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['uglier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['vaguer'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['vaster'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['weaker'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['wealthier'] is False
2024-06-12 17:39:27 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['weirder'] is False
2024-06-12 17:39:27 root INFO     adj - comparative (50) total: defaultdict(<class 'int'>, {False: 50})
2024-06-12 17:39:27 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-12 17:39:29 root INFO     starting operator prediction
2024-06-12 17:39:29 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 17:39:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:31 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:31 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:31 root INFO     total operator prediction time: 1.3923754692077637 seconds
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['albums'] is True
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['applications'] is True
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['areas'] is True
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['cars'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['colleges'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['councils'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['customers'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['days'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['deaths'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['departments'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['developments'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['differences'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['directors'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['events'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['examples'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['facts'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['friends'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['gods'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['governments'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['hours'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['ideas'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['languages'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['laws'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['members'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['months'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['nights'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['offices'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['periods'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['players'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['populations'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['problems'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['products'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['resources'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['rivers'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['roads'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['roles'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['sciences'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['solutions'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['songs'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['streets'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['students'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['systems'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['things'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['towns'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['users'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['versions'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['villages'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['websites'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['weeks'] is False
2024-06-12 17:39:33 root INFO     [' ', '\n', ' the', ' (', ' a'] matches ['years'] is False
2024-06-12 17:39:33 root INFO     noun - plural_reg (50) total: defaultdict(<class 'int'>, {False: 97, True: 3})
2024-06-12 17:39:33 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-12 17:39:35 root INFO     starting operator prediction
2024-06-12 17:39:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-12 17:39:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:39:37 root INFO     total operator prediction time: 1.4073326587677002 seconds
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['accepted'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['achieved'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['added'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['agreed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['allowed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['announced'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['appeared'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['applied'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['asked'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['attended'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['became'] is True
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['believed'] is True
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['considered'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['continued'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['created'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['decided'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['described'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['developed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['discovered'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['enjoyed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['ensured'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['established'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['expected'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['followed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['heard'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['identified'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['improved'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['included'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['introduced'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['involved'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['located'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['lost'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['managed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['married'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['performed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['provided'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['published'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['received'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['reduced'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['referred'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['related'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['remained'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['replaced'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['required'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['seemed'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['sent'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['spent'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['told'] is True
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['understood'] is False
2024-06-12 17:39:39 root INFO     ['\n', ' ', ' been', ' to', ' be'] matches ['united'] is False
2024-06-12 17:39:39 root INFO     verb_inf - Ved (50) total: defaultdict(<class 'int'>, {False: 144, True: 6})
2024-06-12 17:39:39 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-12 17:39:41 root INFO     starting operator prediction
2024-06-12 17:39:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:39:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:39:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:41:52 root INFO     loading model + tokenizer
2024-06-12 17:42:08 root INFO     model + tokenizer loaded
2024-06-12 17:42:08 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:42:11 root INFO     starting operator prediction
2024-06-12 17:42:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:42:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:43:18 root INFO     loading model + tokenizer
2024-06-12 17:43:35 root INFO     model + tokenizer loaded
2024-06-12 17:43:35 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:45:21 root INFO     loading model + tokenizer
2024-06-12 17:45:38 root INFO     model + tokenizer loaded
2024-06-12 17:45:38 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:45:41 root INFO     starting operator prediction
2024-06-12 17:45:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:45:41 root INFO     [relation call] using When something is more {}, it is
2024-06-12 17:46:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:46:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:46:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:46:40 root INFO     loading model + tokenizer
2024-06-12 17:47:01 root INFO     loading model + tokenizer
2024-06-12 17:47:17 root INFO     model + tokenizer loaded
2024-06-12 17:47:17 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:47:20 root INFO     starting operator prediction
2024-06-12 17:47:20 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:47:20 root INFO     [relation call] using When something is more {}, it is
2024-06-12 17:47:30 root INFO     total operator prediction time: 10.367666959762573 seconds
2024-06-12 17:47:33 root INFO     [' more', ' harder', ' much', ' less', ' '] matches ['angrier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' much', ' ', '\n'] matches ['cheaper'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['cleverer'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['coarser'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['costlier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['cuter'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['denser'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['dumber'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', ' harder'] matches ['fiercer'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' much', ' ', ' harder'] matches ['handier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['happier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['hardier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['harsher'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['healthier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' harder', ' much', ' less', ' '] matches ['hotter'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', ' harder'] matches ['huger'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' harder', ' much', ' '] matches ['hungrier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['lazier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['lengthier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['luckier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['madder'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['merrier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['milder'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['moister'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['nastier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['neater'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['nicer'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['noisier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['prouder'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['purer'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['riskier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' harder', ' less', ' much', ' n'] matches ['rockier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['ruder'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['sadder'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['scarier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['sexier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['stickier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['stricter'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', ' harder'] matches ['stronger'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['subtler'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['sunnier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' harder', ' much', ' less', '\n'] matches ['tastier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['tinier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['trickier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', ' harder'] matches ['uglier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', ' harder'] matches ['vaguer'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['vaster'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['weaker'] is False
2024-06-12 17:47:33 root INFO     [' more', ' less', ' harder', ' much', ' '] matches ['wealthier'] is False
2024-06-12 17:47:33 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['weirder'] is False
2024-06-12 17:47:33 root INFO     adj - comparative (50) total: defaultdict(<class 'int'>, {False: 50})
2024-06-12 17:47:33 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-12 17:47:35 root INFO     starting operator prediction
2024-06-12 17:47:35 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 17:47:35 root INFO     [relation call] using The plural form of {} is
2024-06-12 17:47:44 root INFO     total operator prediction time: 8.451932191848755 seconds
2024-06-12 17:50:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:50:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:50:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:53:22 root INFO     loading model + tokenizer
2024-06-12 17:53:39 root INFO     model + tokenizer loaded
2024-06-12 17:53:58 root INFO     loading model + tokenizer
2024-06-12 17:54:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:54:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:54:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:54:14 root INFO     model + tokenizer loaded
2024-06-12 17:54:14 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:54:17 root INFO     starting operator prediction
2024-06-12 17:54:17 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:54:17 root INFO     [relation call] using When something is more {}, it is
2024-06-12 17:54:28 root INFO     total operator prediction time: 10.438802480697632 seconds
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['angrier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['cheaper'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['cleverer'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['coarser'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['costlier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['cuter'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['denser'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['dumber'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['fiercer'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['handier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['happier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['hardier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['harsher'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['healthier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['hotter'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['huger'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['hungrier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['lazier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['lengthier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['luckier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['madder'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['merrier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['milder'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['moister'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['nastier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['neater'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['nicer'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['noisier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['prouder'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', ' harder', ' '] matches ['purer'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['riskier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['rockier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['ruder'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['sadder'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['scarier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['sexier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['stickier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['stricter'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['stronger'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['subtler'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['sunnier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['tastier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['tinier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['trickier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['uglier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['vaguer'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['vaster'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['weaker'] is False
2024-06-12 17:54:30 root INFO     [' more', ' less', ' ', '\n', ' much'] matches ['wealthier'] is False
2024-06-12 17:54:30 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['weirder'] is False
2024-06-12 17:54:50 root INFO     loading model + tokenizer
2024-06-12 17:55:07 root INFO     model + tokenizer loaded
2024-06-12 17:55:07 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - comparative', prompt_templates=['When something is more {}, it is', 'If something is more {}, it is'], prompt_templates_zs=['When something is more {}, it is', 'If something is more {}, it is'], samples=[RelationSample(subject='angry', object=['angrier']), RelationSample(subject='cheap', object=['cheaper']), RelationSample(subject='clever', object=['cleverer']), RelationSample(subject='coarse', object=['coarser']), RelationSample(subject='costly', object=['costlier']), RelationSample(subject='cute', object=['cuter']), RelationSample(subject='dense', object=['denser']), RelationSample(subject='dumb', object=['dumber']), RelationSample(subject='fierce', object=['fiercer']), RelationSample(subject='handy', object=['handier']), RelationSample(subject='happy', object=['happier']), RelationSample(subject='hardy', object=['hardier']), RelationSample(subject='harsh', object=['harsher']), RelationSample(subject='healthy', object=['healthier']), RelationSample(subject='hot', object=['hotter']), RelationSample(subject='huge', object=['huger']), RelationSample(subject='hungry', object=['hungrier']), RelationSample(subject='lazy', object=['lazier']), RelationSample(subject='lengthy', object=['lengthier']), RelationSample(subject='lucky', object=['luckier']), RelationSample(subject='mad', object=['madder']), RelationSample(subject='merry', object=['merrier']), RelationSample(subject='mild', object=['milder']), RelationSample(subject='moist', object=['moister']), RelationSample(subject='nasty', object=['nastier']), RelationSample(subject='neat', object=['neater']), RelationSample(subject='nice', object=['nicer']), RelationSample(subject='noisy', object=['noisier']), RelationSample(subject='proud', object=['prouder']), RelationSample(subject='pure', object=['purer']), RelationSample(subject='risky', object=['riskier']), RelationSample(subject='rocky', object=['rockier']), RelationSample(subject='rude', object=['ruder']), RelationSample(subject='sad', object=['sadder']), RelationSample(subject='scary', object=['scarier']), RelationSample(subject='sexy', object=['sexier']), RelationSample(subject='sticky', object=['stickier']), RelationSample(subject='strict', object=['stricter']), RelationSample(subject='strong', object=['stronger']), RelationSample(subject='subtle', object=['subtler']), RelationSample(subject='sunny', object=['sunnier']), RelationSample(subject='tasty', object=['tastier']), RelationSample(subject='tiny', object=['tinier']), RelationSample(subject='tricky', object=['trickier']), RelationSample(subject='ugly', object=['uglier']), RelationSample(subject='vague', object=['vaguer']), RelationSample(subject='vast', object=['vaster']), RelationSample(subject='weak', object=['weaker']), RelationSample(subject='wealthy', object=['wealthier']), RelationSample(subject='weird', object=['weirder'])], _domain=None, _range=None)
2024-06-12 17:55:10 root INFO     starting operator prediction
2024-06-12 17:55:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is more {}, it is)
2024-06-12 17:55:10 root INFO     [relation call] using When something is more {}, it is
2024-06-12 17:55:20 root INFO     total operator prediction time: 10.429608821868896 seconds
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['angrier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['cheaper'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['cleverer'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['coarser'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['costlier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['cuter'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['denser'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['dumber'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' ', ' less', '\n'] matches ['fiercer'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['handier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['happier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['hardier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['harsher'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['healthier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['hotter'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['huger'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['hungrier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['lazier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['lengthier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['luckier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['madder'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['merrier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['milder'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['moister'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['nastier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['neater'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['nicer'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['noisier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' harder', ' less', ' '] matches ['prouder'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['purer'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', '\n', ' harder'] matches ['riskier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['rockier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['ruder'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['sadder'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' harder'] matches ['scarier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' harder', ' less', '\n'] matches ['sexier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['stickier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', ' harder', '\n'] matches ['stricter'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['stronger'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['subtler'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['sunnier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['tastier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['tinier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['trickier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['uglier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['vaguer'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['vaster'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', '\n', ' '] matches ['weaker'] is False
2024-06-12 17:55:23 root INFO     [' more', ' less', ' much', '\n', ' '] matches ['wealthier'] is False
2024-06-12 17:55:23 root INFO     [' more', ' much', ' less', ' harder', ' '] matches ['weirder'] is False
2024-06-12 17:55:23 root INFO     0.0adj - comparative (50) total: defaultdict(<class 'int'>, {False: 50})
2024-06-12 17:55:23 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-12 17:55:25 root INFO     starting operator prediction
2024-06-12 17:55:25 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 17:55:25 root INFO     [relation call] using The plural form of {} is
2024-06-12 17:55:34 root INFO     total operator prediction time: 8.487242221832275 seconds
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', '/'] matches ['albums'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['applications'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['areas'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['cars'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['colleges'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['councils'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['customers'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', '/'] matches ['days'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['deaths'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['departments'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['developments'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['differences'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['directors'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['events'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['examples'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['facts'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['friends'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['gods'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['governments'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', ','] matches ['hours'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', '/'] matches ['ideas'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['languages'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['laws'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', '/'] matches ['members'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['months'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', ','] matches ['nights'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['offices'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['periods'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['players'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', ','] matches ['populations'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['problems'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['products'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['resources'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['rivers'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['roads'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['roles'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['sciences'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['solutions'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', '/'] matches ['songs'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['streets'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['students'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['systems'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['things'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['towns'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['users'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['versions'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', '/'] matches ['villages'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['websites'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['weeks'] is False
2024-06-12 17:55:36 root INFO     ['\n', ' ', ' (', ' the', ','] matches ['years'] is False
2024-06-12 17:55:36 root INFO     0.0noun - plural_reg (50) total: defaultdict(<class 'int'>, {False: 100})
2024-06-12 17:55:36 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-12 17:55:38 root INFO     starting operator prediction
2024-06-12 17:55:38 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-12 17:55:38 root INFO     [relation call] using If the present form is {}, the past form is
2024-06-12 17:55:51 root INFO     total operator prediction time: 13.10536527633667 seconds
2024-06-12 17:55:54 root INFO     ['\n', ' been', ' ', ' not', ' ('] matches ['accepted'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' (', ' not'] matches ['achieved'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' to'] matches ['added'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' made'] matches ['agreed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' been', ' ', ' (', ' not'] matches ['allowed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' (', ' made'] matches ['announced'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' to', ' considered'] matches ['appeared'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' (', ' been'] matches ['applied'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' made'] matches ['asked'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' (', ' been', ' to'] matches ['attended'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' considered', ' ('] matches ['became'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' to'] matches ['believed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' to'] matches ['considered'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' to', ' been', ' ('] matches ['continued'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' ('] matches ['created'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' to'] matches ['decided'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' considered', ' been', ' not'] matches ['described'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' considered', ' not'] matches ['developed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' made'] matches ['discovered'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' (', ' not'] matches ['enjoyed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' ('] matches ['ensured'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' (', ' been'] matches ['established'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' not', ' ', ' been', ' to'] matches ['expected'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' (', ' considered'] matches ['followed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' considered'] matches ['heard'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' (', ' not', ' been'] matches ['identified'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' ('] matches ['improved'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' considered'] matches ['included'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' to', ' been'] matches ['introduced'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' (', ' been'] matches ['involved'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' ('] matches ['located'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' ('] matches ['lost'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' considered'] matches ['managed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' made'] matches ['married'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' ('] matches ['performed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' considered'] matches ['provided'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' considered', ' ('] matches ['published'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' ('] matches ['received'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' been', ' ('] matches ['reduced'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' to', ' been', ' not'] matches ['referred'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' been', ' ', ' to', ' not'] matches ['related'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' considered'] matches ['remained'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' (', ' not'] matches ['replaced'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' not', ' considered', ' ('] matches ['required'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' to', ' not', ' been'] matches ['seemed'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' (', ' been', ' not'] matches ['sent'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' not', ' ', ' been', ' ('] matches ['spent'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' considered', ' ('] matches ['told'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' ('] matches ['understood'] is False
2024-06-12 17:55:54 root INFO     ['\n', ' ', ' been', ' not', ' ('] matches ['united'] is False
2024-06-12 17:55:54 root INFO     0.0verb_inf - Ved (50) total: defaultdict(<class 'int'>, {False: 150})
2024-06-12 17:55:54 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-12 17:55:56 root INFO     starting operator prediction
2024-06-12 17:55:56 root INFO     [relation call] using After something is {}, it has
2024-06-12 17:56:05 root INFO     total operator prediction time: 9.004475355148315 seconds
2024-06-12 17:56:08 root INFO     [' been', '\n', ' not', ' ', ' become'] matches ['added'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' not', ' ', ' become'] matches ['agreed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['allowed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['announced'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['appeared'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['applied'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' done'] matches ['appointed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' not', ' ', ' become'] matches ['asked'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['attended'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' done'] matches ['became'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['considered'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['contained'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['continued'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['created'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['decided'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' not', ' ', ' become'] matches ['described'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['developed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' not', ' ', ' become'] matches ['established'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['existed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['expected'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['failed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['followed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['heard'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['improved'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' not', ' '] matches ['included'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['introduced'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['involved'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['located'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['lost'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['managed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' not', ' '] matches ['married'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['operated'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' not', ' '] matches ['performed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['proposed'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['provided'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['published'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['received'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['reduced'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['related'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['remained'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['replaced'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['represented'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['required'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['sent'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' not', ' '] matches ['spent'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['suffered'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' become', ' ', ' not'] matches ['taught'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' not', ' become', ' '] matches ['told'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['understood'] is False
2024-06-12 17:56:08 root INFO     [' been', '\n', ' ', ' not', ' become'] matches ['united'] is False
2024-06-12 17:56:08 root INFO     0.0verb_Ving - Ved (50) total: defaultdict(<class 'int'>, {False: 200})
2024-06-12 17:56:08 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-12 17:56:10 root INFO     starting operator prediction
2024-06-12 17:56:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-12 17:56:10 root INFO     [relation call] using When something is the most {}, it is
2024-06-12 17:56:21 root INFO     total operator prediction time: 11.042688846588135 seconds
2024-06-12 17:56:23 root INFO     [' most', ' least', '\n', ' the', ' greatest'] matches ['ablest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' least', ' ', ' hardest'] matches ['angriest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' least'] matches ['cheapest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' the'] matches ['cleverest'] is False
2024-06-12 17:56:23 root INFO     [' most', ' greatest', '\n', ' least', ' '] matches ['costliest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['cruelest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['cutest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' the'] matches ['densest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['dumbest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' the', ' greatest'] matches ['fiercest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['handiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' hardest', ' least'] matches ['happiest'] is False
2024-06-12 17:56:23 root INFO     [' most', ' greatest', '\n', ' least', ' the'] matches ['hardiest'] is False
2024-06-12 17:56:23 root INFO     [' most', ' greatest', '\n', ' the', ' least'] matches ['harshest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' least', ' greatest'] matches ['healthiest'] is False
2024-06-12 17:56:23 root INFO     [' most', ' greatest', '\n', ' least', ' '] matches ['hottest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['hugest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' least', ' ', ' hardest'] matches ['hungriest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['laziest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' least', ' the'] matches ['lengthiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' least'] matches ['luckiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' least', ' the'] matches ['merriest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['mildest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['nastiest'] is False
2024-06-12 17:56:23 root INFO     [' most', ' greatest', '\n', ' least', ' hardest'] matches ['neatest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' least'] matches ['nicest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' least', ' the'] matches ['noisiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' least', ' greatest', ' hardest'] matches ['politest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' hardest', ' least', ' greatest'] matches ['proudest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' least', ' '] matches ['purest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' least'] matches ['rarest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['riskiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' least'] matches ['rudest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' least', ' hardest', ' '] matches ['saddest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['scariest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' the'] matches ['sexiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['shiniest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' the', ' ', ' greatest'] matches ['strangest'] is False
2024-06-12 17:56:23 root INFO     [' most', ' least', '\n', ' greatest', ' the'] matches ['strictest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' the', ' greatest'] matches ['strongest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' hardest', ' '] matches ['subtlest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' hardest', ' greatest', ' '] matches ['sunniest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['tastiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['tiniest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' the'] matches ['trickiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' least'] matches ['ugliest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['vaguest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' ', ' greatest', ' the'] matches ['weakest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' least'] matches ['wealthiest'] is False
2024-06-12 17:56:23 root INFO     [' most', '\n', ' greatest', ' ', ' the'] matches ['weirdest'] is False
2024-06-12 17:56:23 root INFO     0.0adj - superlative (50) total: defaultdict(<class 'int'>, {False: 250})
2024-06-12 17:56:23 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-12 17:56:26 root INFO     starting operator prediction
2024-06-12 17:56:26 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-12 17:56:26 root INFO     [relation call] using I {}, he
2024-06-12 17:56:33 root INFO     total operator prediction time: 6.925024747848511 seconds
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', ' '] matches ['accepts'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', "'s", ' will'] matches ['achieves'] is False
2024-06-12 17:56:35 root INFO     [' is', ' will', '\n', ' does', ' has'] matches ['adds'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', ' '] matches ['agrees'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', "'s", '\n', ' will'] matches ['allows'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['appears'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', "'s", ' does'] matches ['applies'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', ' has'] matches ['asks'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['avoids'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['becomes'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['believes'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', "'s", ' will'] matches ['considers'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['consists'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', ' will', '\n', "'s"] matches ['contains'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', "'s", ' does'] matches ['continues'] is False
2024-06-12 17:56:35 root INFO     [' is', ' will', '\n', ' does', "'s"] matches ['creates'] is False
2024-06-12 17:56:35 root INFO     [' is', ' will', ' does', '\n', "'s"] matches ['describes'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', ' does', ' has'] matches ['develops'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', "'s", ' will'] matches ['enables'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['enjoys'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' ', ' will'] matches ['ensures'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', "'s", ' does'] matches ['exists'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', ' does', "'s"] matches ['explains'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['follows'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['happens'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', ' '] matches ['hears'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', "'s", ' will'] matches ['identifies'] is False
2024-06-12 17:56:35 root INFO     [' is', ' will', '\n', ' does', "'s"] matches ['improves'] is False
2024-06-12 17:56:35 root INFO     [' is', ' will', '\n', ' does', "'s"] matches ['includes'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', "'s", ' will'] matches ['involves'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', ' does', "'s"] matches ['learns'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['maintains'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', ' does', "'s"] matches ['occurs'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['operates'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['prevents'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['promotes'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['protects'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['provides'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' has', "'s"] matches ['receives'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['reduces'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['refers'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['remains'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['remembers'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['represents'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', "'s", '\n', ' will'] matches ['requires'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' will', "'s"] matches ['seems'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' will', ' does', ' '] matches ['sends'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', '\n', ' has', ' will'] matches ['suggests'] is False
2024-06-12 17:56:35 root INFO     [' is', ' does', ' will', '\n', "'s"] matches ['tells'] is False
2024-06-12 17:56:35 root INFO     [' is', '\n', ' does', ' will', "'s"] matches ['understands'] is False
2024-06-12 17:56:35 root INFO     0.0verb_inf - 3pSg (50) total: defaultdict(<class 'int'>, {False: 300})
2024-06-12 17:56:35 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='Ving - verb_inf', prompt_templates=['{} is the active form of', '{} is to'], prompt_templates_zs=['{} is the active form of', '{} is to'], samples=[RelationSample(subject='achieving', object=['achieve']), RelationSample(subject='adding', object=['add']), RelationSample(subject='allowing', object=['allow']), RelationSample(subject='appearing', object=['appear']), RelationSample(subject='applying', object=['apply']), RelationSample(subject='asking', object=['ask']), RelationSample(subject='attending', object=['attend']), RelationSample(subject='avoiding', object=['avoid']), RelationSample(subject='becoming', object=['become']), RelationSample(subject='believing', object=['believe']), RelationSample(subject='considering', object=['consider']), RelationSample(subject='containing', object=['contain']), RelationSample(subject='continuing', object=['continue']), RelationSample(subject='creating', object=['create']), RelationSample(subject='developing', object=['develop']), RelationSample(subject='encouraging', object=['encourage']), RelationSample(subject='enjoying', object=['enjoy']), RelationSample(subject='ensuring', object=['ensure']), RelationSample(subject='establishing', object=['establish']), RelationSample(subject='existing', object=['exist']), RelationSample(subject='expecting', object=['expect']), RelationSample(subject='following', object=['follow']), RelationSample(subject='happening', object=['happen']), RelationSample(subject='identifying', object=['identify']), RelationSample(subject='improving', object=['improve']), RelationSample(subject='including', object=['include']), RelationSample(subject='involving', object=['involve']), RelationSample(subject='learning', object=['learn']), RelationSample(subject='losing', object=['lose']), RelationSample(subject='maintaining', object=['maintain']), RelationSample(subject='managing', object=['manage']), RelationSample(subject='operating', object=['operate']), RelationSample(subject='performing', object=['perform']), RelationSample(subject='preventing', object=['prevent']), RelationSample(subject='promoting', object=['promote']), RelationSample(subject='protecting', object=['protect']), RelationSample(subject='providing', object=['provide']), RelationSample(subject='receiving', object=['receive']), RelationSample(subject='reducing', object=['reduce']), RelationSample(subject='referring', object=['refer']), RelationSample(subject='remaining', object=['remain']), RelationSample(subject='remembering', object=['remember']), RelationSample(subject='representing', object=['represent']), RelationSample(subject='requiring', object=['require']), RelationSample(subject='seeming', object=['seem']), RelationSample(subject='sitting', object=['sit']), RelationSample(subject='spending', object=['spend']), RelationSample(subject='teaching', object=['teach']), RelationSample(subject='telling', object=['tell']), RelationSample(subject='understanding', object=['understand'])], _domain=None, _range=None)
2024-06-12 17:56:37 root INFO     starting operator prediction
2024-06-12 17:56:37 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} is the active form of)
2024-06-12 17:56:37 root INFO     [relation call] using {} is the active form of
2024-06-12 17:56:46 root INFO     total operator prediction time: 9.036522626876831 seconds
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' achieve'] matches ['achieve'] is True
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['add'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' become'] matches ['allow'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' have', ' make'] matches ['appear'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' have'] matches ['apply'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['ask'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' make', ' the'] matches ['attend'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' make'] matches ['avoid'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' the'] matches ['become'] is True
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' have'] matches ['believe'] is True
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' become', ' the'] matches ['consider'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['contain'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['continue'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['create'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' have'] matches ['develop'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' have', ' make'] matches ['encourage'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' the'] matches ['enjoy'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' ensure'] matches ['ensure'] is True
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' have'] matches ['establish'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['exist'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' become'] matches ['expect'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' make'] matches ['follow'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' have'] matches ['happen'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['identify'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' make'] matches ['improve'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['include'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' become'] matches ['involve'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['learn'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' have'] matches ['lose'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' make'] matches ['maintain'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' have'] matches ['manage'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' the'] matches ['operate'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['perform'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' have'] matches ['prevent'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' make', ' the'] matches ['promote'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' become', ' the'] matches ['protect'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' have', ' the'] matches ['provide'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' have'] matches ['receive'] is False
2024-06-12 17:56:49 root INFO     [' ', '\n', ' be', ' the', ' make'] matches ['reduce'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' to'] matches ['refer'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' make', ' the'] matches ['remain'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' become'] matches ['remember'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' the', ' make'] matches ['represent'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' have', ' the'] matches ['require'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' have', ' do'] matches ['seem'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' make'] matches ['sit'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' become', ' the'] matches ['spend'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' have', ' make'] matches ['teach'] is False
2024-06-12 17:56:49 root INFO     ['\n', '.', ' ', ' the', ','] matches ['tell'] is False
2024-06-12 17:56:49 root INFO     ['\n', ' ', ' be', ' make', ' have'] matches ['understand'] is False
2024-06-12 17:56:49 root INFO     0.0Ving - verb_inf (50) total: defaultdict(<class 'int'>, {False: 346, True: 4})
2024-06-12 17:56:49 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_3pSg - Ved', prompt_templates=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], prompt_templates_zs=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], samples=[RelationSample(subject='adds', object=['added']), RelationSample(subject='agrees', object=['agreed']), RelationSample(subject='allows', object=['allowed']), RelationSample(subject='announces', object=['announced']), RelationSample(subject='appears', object=['appeared']), RelationSample(subject='applies', object=['applied']), RelationSample(subject='appoints', object=['appointed']), RelationSample(subject='asks', object=['asked']), RelationSample(subject='becomes', object=['became']), RelationSample(subject='believes', object=['believed']), RelationSample(subject='considers', object=['considered']), RelationSample(subject='consists', object=['consisted']), RelationSample(subject='contains', object=['contained']), RelationSample(subject='continues', object=['continued']), RelationSample(subject='creates', object=['created']), RelationSample(subject='decides', object=['decided']), RelationSample(subject='describes', object=['described']), RelationSample(subject='develops', object=['developed']), RelationSample(subject='establishes', object=['established']), RelationSample(subject='expects', object=['expected']), RelationSample(subject='fails', object=['failed']), RelationSample(subject='follows', object=['followed']), RelationSample(subject='happens', object=['happened']), RelationSample(subject='hears', object=['heard']), RelationSample(subject='includes', object=['included']), RelationSample(subject='intends', object=['intended']), RelationSample(subject='introduces', object=['introduced']), RelationSample(subject='involves', object=['involved']), RelationSample(subject='locates', object=['located']), RelationSample(subject='loses', object=['lost']), RelationSample(subject='manages', object=['managed']), RelationSample(subject='marries', object=['married']), RelationSample(subject='occurs', object=['occurred']), RelationSample(subject='operates', object=['operated']), RelationSample(subject='performs', object=['performed']), RelationSample(subject='proposes', object=['proposed']), RelationSample(subject='provides', object=['provided']), RelationSample(subject='publishes', object=['published']), RelationSample(subject='receives', object=['received']), RelationSample(subject='refers', object=['referred']), RelationSample(subject='relates', object=['related']), RelationSample(subject='remains', object=['remained']), RelationSample(subject='replaces', object=['replaced']), RelationSample(subject='represents', object=['represented']), RelationSample(subject='requires', object=['required']), RelationSample(subject='seems', object=['seemed']), RelationSample(subject='sends', object=['sent']), RelationSample(subject='spends', object=['spent']), RelationSample(subject='suggests', object=['suggested']), RelationSample(subject='tells', object=['told'])], _domain=None, _range=None)
2024-06-12 17:56:51 root INFO     starting operator prediction
2024-06-12 17:56:51 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When he {} something, something has been)
2024-06-12 17:56:51 root INFO     [relation call] using When he {} something, something has been
2024-06-12 17:57:00 root INFO     total operator prediction time: 9.450170993804932 seconds
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' considered', ' had'] matches ['added'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['agreed'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' considered', ' made'] matches ['allowed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' made', ' had', ' '] matches ['announced'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' had', ' made', ' considered'] matches ['appeared'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' made', ' ', ' considered'] matches ['applied'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' had', ' made'] matches ['appointed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['asked'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' considered'] matches ['became'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' done', ' had'] matches ['believed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['considered'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['consisted'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' had', ' made'] matches ['contained'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' made', ' had'] matches ['continued'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' considered', ' ', ' had'] matches ['created'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['decided'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' made', ' ', ' had'] matches ['described'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' made', ' ', ' had'] matches ['developed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' considered'] matches ['established'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' done', ' had'] matches ['expected'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' had', ' ', ' considered'] matches ['failed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['followed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['happened'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['heard'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' considered', ' had'] matches ['included'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' made', ' had'] matches ['intended'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' had', ' considered', ' '] matches ['introduced'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' considered', ' had'] matches ['involved'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['located'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' considered', ' had'] matches ['lost'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['managed'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' made', ' ', ' had'] matches ['married'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' considered'] matches ['occurred'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' had', ' done'] matches ['operated'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['performed'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' considered', ' had', ' '] matches ['proposed'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' had', ' made'] matches ['provided'] is False
2024-06-12 17:57:03 root INFO     [' been', '\n', ' ', ' considered', ' made'] matches ['published'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['received'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' considered', ' had'] matches ['referred'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' considered', ' had'] matches ['related'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' had', ' ', ' considered'] matches ['remained'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' done'] matches ['replaced'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' done'] matches ['represented'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' had', ' ', ' made'] matches ['required'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' had', ' ', ' considered'] matches ['seemed'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' considered'] matches ['sent'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' made'] matches ['spent'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' considered', ' ', ' had'] matches ['suggested'] is False
2024-06-12 17:57:03 root INFO     ['\n', ' been', ' ', ' had', ' considered'] matches ['told'] is False
2024-06-12 17:57:03 root INFO     0.0verb_3pSg - Ved (50) total: defaultdict(<class 'int'>, {False: 396, True: 4})
2024-06-12 17:57:03 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb_Ving - 3pSg', prompt_templates=['When something is {}, it'], prompt_templates_zs=['When something is {}, it'], samples=[RelationSample(subject='adding', object=['adds']), RelationSample(subject='advertising', object=['advertises']), RelationSample(subject='allowing', object=['allows']), RelationSample(subject='appearing', object=['appears']), RelationSample(subject='applying', object=['applies']), RelationSample(subject='asking', object=['asks']), RelationSample(subject='becoming', object=['becomes']), RelationSample(subject='believing', object=['believes']), RelationSample(subject='considering', object=['considers']), RelationSample(subject='consisting', object=['consists']), RelationSample(subject='containing', object=['contains']), RelationSample(subject='continuing', object=['continues']), RelationSample(subject='creating', object=['creates']), RelationSample(subject='depending', object=['depends']), RelationSample(subject='describing', object=['describes']), RelationSample(subject='developing', object=['develops']), RelationSample(subject='discovering', object=['discovers']), RelationSample(subject='enabling', object=['enables']), RelationSample(subject='existing', object=['exists']), RelationSample(subject='explaining', object=['explains']), RelationSample(subject='following', object=['follows']), RelationSample(subject='happening', object=['happens']), RelationSample(subject='hearing', object=['hears']), RelationSample(subject='improving', object=['improves']), RelationSample(subject='including', object=['includes']), RelationSample(subject='involving', object=['involves']), RelationSample(subject='learning', object=['learns']), RelationSample(subject='losing', object=['loses']), RelationSample(subject='managing', object=['manages']), RelationSample(subject='occurring', object=['occurs']), RelationSample(subject='operating', object=['operates']), RelationSample(subject='performing', object=['performs']), RelationSample(subject='promoting', object=['promotes']), RelationSample(subject='providing', object=['provides']), RelationSample(subject='publishing', object=['publishes']), RelationSample(subject='receiving', object=['receives']), RelationSample(subject='reducing', object=['reduces']), RelationSample(subject='referring', object=['refers']), RelationSample(subject='relating', object=['relates']), RelationSample(subject='remaining', object=['remains']), RelationSample(subject='representing', object=['represents']), RelationSample(subject='requiring', object=['requires']), RelationSample(subject='seeming', object=['seems']), RelationSample(subject='sitting', object=['sits']), RelationSample(subject='spending', object=['spends']), RelationSample(subject='suggesting', object=['suggests']), RelationSample(subject='teaching', object=['teaches']), RelationSample(subject='telling', object=['tells']), RelationSample(subject='thanking', object=['thanks']), RelationSample(subject='understanding', object=['understands'])], _domain=None, _range=None)
2024-06-12 17:57:05 root INFO     starting operator prediction
2024-06-12 17:57:05 root INFO     [relation call] using When something is {}, it
2024-06-12 17:57:14 root INFO     total operator prediction time: 8.5627760887146 seconds
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['adds'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['advertises'] is False
2024-06-12 17:57:16 root INFO     [' is', "'s", '\n', ' does', ' '] matches ['allows'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['appears'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['applies'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['asks'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['becomes'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['believes'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['considers'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['consists'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['contains'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['continues'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['creates'] is False
2024-06-12 17:57:16 root INFO     [' is', "'s", '\n', ' does', ' '] matches ['depends'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['describes'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['develops'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['discovers'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['enables'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['exists'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['explains'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['follows'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['happens'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['hears'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['improves'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' becomes'] matches ['includes'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['involves'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['learns'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['loses'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['manages'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['occurs'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['operates'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['performs'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['promotes'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['provides'] is False
2024-06-12 17:57:16 root INFO     [' is', "'s", '\n', ' ', ' does'] matches ['publishes'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['receives'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['reduces'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['refers'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['relates'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['remains'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['represents'] is False
2024-06-12 17:57:16 root INFO     [' is', "'s", '\n', ' does', ' '] matches ['requires'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['seems'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['sits'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['spends'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['suggests'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['teaches'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['tells'] is False
2024-06-12 17:57:16 root INFO     [' is', '\n', "'s", ' ', ' does'] matches ['thanks'] is False
2024-06-12 17:57:16 root INFO     [' is', "'s", '\n', ' ', ' does'] matches ['understands'] is False
2024-06-12 17:57:16 root INFO     0.0verb_Ving - 3pSg (50) total: defaultdict(<class 'int'>, {False: 446, True: 4})
2024-06-12 17:57:16 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun - plural_irreg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='ability', object=['abilities']), RelationSample(subject='academy', object=['academies']), RelationSample(subject='activity', object=['activities']), RelationSample(subject='agency', object=['agencies']), RelationSample(subject='analysis', object=['analyses']), RelationSample(subject='army', object=['armies']), RelationSample(subject='authority', object=['authorities']), RelationSample(subject='basis', object=['bases']), RelationSample(subject='business', object=['businesses']), RelationSample(subject='category', object=['categories']), RelationSample(subject='century', object=['centuries']), RelationSample(subject='child', object=['children']), RelationSample(subject='city', object=['cities']), RelationSample(subject='community', object=['communities']), RelationSample(subject='country', object=['countries']), RelationSample(subject='county', object=['counties']), RelationSample(subject='datum', object=['data']), RelationSample(subject='duty', object=['duties']), RelationSample(subject='economy', object=['economies']), RelationSample(subject='energy', object=['energies']), RelationSample(subject='entry', object=['entries']), RelationSample(subject='facility', object=['facilities']), RelationSample(subject='family', object=['families']), RelationSample(subject='formula', object=['formulae']), RelationSample(subject='history', object=['histories']), RelationSample(subject='industry', object=['industries']), RelationSample(subject='library', object=['libraries']), RelationSample(subject='life', object=['lives']), RelationSample(subject='loss', object=['losses']), RelationSample(subject='majority', object=['majorities']), RelationSample(subject='memory', object=['memories']), RelationSample(subject='opportunity', object=['opportunities']), RelationSample(subject='policy', object=['policies']), RelationSample(subject='property', object=['properties']), RelationSample(subject='responsibility', object=['responsibilities']), RelationSample(subject='safety', object=['safeties']), RelationSample(subject='secretary', object=['secretaries']), RelationSample(subject='security', object=['securities']), RelationSample(subject='series', object=['series']), RelationSample(subject='society', object=['societies']), RelationSample(subject='species', object=['species']), RelationSample(subject='story', object=['stories']), RelationSample(subject='strategy', object=['strategies']), RelationSample(subject='success', object=['successes']), RelationSample(subject='technology', object=['technologies']), RelationSample(subject='theory', object=['theories']), RelationSample(subject='university', object=['universities']), RelationSample(subject='variety', object=['varieties']), RelationSample(subject='wife', object=['wives']), RelationSample(subject='woman', object=['women'])], _domain=None, _range=None)
2024-06-12 17:57:18 root INFO     starting operator prediction
2024-06-12 17:57:18 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 17:57:18 root INFO     [relation call] using The plural form of {} is
2024-06-12 17:57:27 root INFO     total operator prediction time: 8.642170190811157 seconds
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['abilities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['academies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['activities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['agencies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['analyses'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['armies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['authorities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['bases'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['businesses'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['categories'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['centuries'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['children'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['cities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['communities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['countries'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['counties'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['data'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['duties'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['economies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['energies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ' -'] matches ['entries'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['facilities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['families'] is False
2024-06-12 17:57:30 root INFO     [' ', '\n', ' the', ' (', ','] matches ['formulae'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['histories'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['industries'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['libraries'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['lives'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['losses'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ' -'] matches ['majorities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['memories'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['opportunities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['policies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['properties'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['responsibilities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['safeties'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['secretaries'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['securities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['series'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['societies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['species'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['stories'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['strategies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['successes'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['technologies'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['theories'] is True
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['universities'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' the', ' ', ' (', ','] matches ['varieties'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['wives'] is False
2024-06-12 17:57:30 root INFO     ['\n', ' ', ' the', ' (', ','] matches ['women'] is False
2024-06-12 17:57:30 root INFO     0.0noun - plural_irreg (50) total: defaultdict(<class 'int'>, {False: 495, True: 5})
2024-06-12 17:57:30 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+tion_irreg', prompt_templates=['To {} results in', 'To {} is to form a'], prompt_templates_zs=['To {} results in', 'To {} is to form a'], samples=[RelationSample(subject='accuse', object=['accusation']), RelationSample(subject='admire', object=['admiration']), RelationSample(subject='allege', object=['allegation']), RelationSample(subject='aspire', object=['aspiration']), RelationSample(subject='authorize', object=['authorization', 'authorisation']), RelationSample(subject='characterize', object=['characterization', 'characterisation']), RelationSample(subject='civilize', object=['civilization', 'civilisation']), RelationSample(subject='colonize', object=['colonization']), RelationSample(subject='compile', object=['compilation']), RelationSample(subject='compute', object=['computation']), RelationSample(subject='condense', object=['condensation']), RelationSample(subject='configure', object=['configuration']), RelationSample(subject='consult', object=['consulation']), RelationSample(subject='continue', object=['continuation']), RelationSample(subject='customize', object=['customization']), RelationSample(subject='declare', object=['declaration']), RelationSample(subject='degrade', object=['degradation']), RelationSample(subject='deprive', object=['deprivation']), RelationSample(subject='derive', object=['derivation']), RelationSample(subject='determine', object=['determination']), RelationSample(subject='examine', object=['examination']), RelationSample(subject='expire', object=['expiration']), RelationSample(subject='explore', object=['exploration']), RelationSample(subject='globalize', object=['globalization', 'globalisation']), RelationSample(subject='illumine', object=['illumination']), RelationSample(subject='imagine', object=['imagination']), RelationSample(subject='improvize', object=['improvization', 'improvisation']), RelationSample(subject='inspire', object=['inspiration']), RelationSample(subject='install', object=['installation', 'instalation']), RelationSample(subject='maximize', object=['maximization', 'maximisation']), RelationSample(subject='minimize', object=['minimization', 'minimisation']), RelationSample(subject='modernize', object=['modernization', 'modernisation']), RelationSample(subject='oblige', object=['obligation']), RelationSample(subject='observe', object=['observation']), RelationSample(subject='occupy', object=['occupation']), RelationSample(subject='optimize', object=['optimization', 'optimisation']), RelationSample(subject='organize', object=['organization']), RelationSample(subject='perspire', object=['perspiration']), RelationSample(subject='prepare', object=['preparation']), RelationSample(subject='privatize', object=['privatization', 'privatisation']), RelationSample(subject='randomize', object=['randomization', 'randomisation']), RelationSample(subject='realize', object=['realization', 'realisation']), RelationSample(subject='reorganize', object=['reorganization', 'reorganisation']), RelationSample(subject='restore', object=['restoration']), RelationSample(subject='specialize', object=['specialization', 'specialisation']), RelationSample(subject='stabilize', object=['stabilization']), RelationSample(subject='standardize', object=['standardization', 'standardisation']), RelationSample(subject='starve', object=['starvation']), RelationSample(subject='utilize', object=['utilization', 'utilisation']), RelationSample(subject='visualize', object=['visualization'])], _domain=None, _range=None)
2024-06-12 17:57:32 root INFO     starting operator prediction
2024-06-12 17:57:32 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in)
2024-06-12 17:57:32 root INFO     [relation call] using To {} results in
2024-06-12 17:57:39 root INFO     total operator prediction time: 7.062189817428589 seconds
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['accusation'] is True
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['admiration'] is True
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['allegation'] is True
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['aspiration'] is True
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['authorization', 'authorisation'] is True
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['characterization', 'characterisation'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ','] matches ['civilization', 'civilisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['colonization'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['compilation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['computation'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' re'] matches ['condensation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['configuration'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['continuation'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['customization'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ','] matches ['declaration'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['degradation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['deprivation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' administration'] matches ['derivation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' administration'] matches ['determination'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['examination'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' in', ' a'] matches ['expiration'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' administration'] matches ['exploration'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['globalization', 'globalisation'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ','] matches ['illumination'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ','] matches ['imagination'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['improvization', 'improvisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ','] matches ['inspiration'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['installation', 'instalation'] is True
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['maximization', 'maximisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['minimization', 'minimisation'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' a', ' in'] matches ['modernization', 'modernisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' re'] matches ['obligation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['observation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['occupation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' a', '\n', ' ', ' in'] matches ['optimization', 'optimisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['organization'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['perspiration'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['preparation'] is False
2024-06-12 17:57:41 root INFO     [' the', '\n', ' ', ' in', ' a'] matches ['privatization', 'privatisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['randomization', 'randomisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['realization', 'realisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' in'] matches ['reorganization', 'reorganisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['restoration'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' in', ' a'] matches ['specialization', 'specialisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['stabilization'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' a', ' administration'] matches ['standardization', 'standardisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', '\n', ' re', ','] matches ['starvation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['utilization', 'utilisation'] is False
2024-06-12 17:57:41 root INFO     [' the', ' ', ' a', '\n', ' in'] matches ['visualization'] is False
2024-06-12 17:57:41 root INFO     0.0verb+tion_irreg (50) total: defaultdict(<class 'int'>, {False: 538, True: 11})
2024-06-12 17:57:41 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='re+verb_reg', prompt_templates=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], prompt_templates_zs=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], samples=[RelationSample(subject='acquire', object=['reacquire']), RelationSample(subject='adjust', object=['readjust']), RelationSample(subject='appear', object=['reappear']), RelationSample(subject='apply', object=['reapply']), RelationSample(subject='appoint', object=['reappoint']), RelationSample(subject='arrange', object=['rearrange']), RelationSample(subject='assess', object=['reassess']), RelationSample(subject='assign', object=['reassign']), RelationSample(subject='assure', object=['reassure']), RelationSample(subject='calculate', object=['recalculate']), RelationSample(subject='cognize', object=['recognize']), RelationSample(subject='commend', object=['recommend']), RelationSample(subject='configure', object=['reconfigure']), RelationSample(subject='confirm', object=['reconfirm']), RelationSample(subject='connect', object=['reconnect']), RelationSample(subject='consider', object=['reconsider']), RelationSample(subject='create', object=['recreate']), RelationSample(subject='decorate', object=['redecorate']), RelationSample(subject='deem', object=['redeem']), RelationSample(subject='define', object=['redefine']), RelationSample(subject='develop', object=['redevelop']), RelationSample(subject='discover', object=['rediscover']), RelationSample(subject='distribute', object=['redistribute']), RelationSample(subject='emerge', object=['reemerge']), RelationSample(subject='engage', object=['reengage']), RelationSample(subject='establish', object=['reestablish']), RelationSample(subject='evaluate', object=['reevaluate']), RelationSample(subject='examine', object=['reexamine']), RelationSample(subject='generate', object=['regenerate']), RelationSample(subject='grow', object=['regrow']), RelationSample(subject='install', object=['reinstall']), RelationSample(subject='integrate', object=['reintegrate']), RelationSample(subject='interpret', object=['reinterpret']), RelationSample(subject='introduce', object=['reintroduce']), RelationSample(subject='invest', object=['reinvest']), RelationSample(subject='investigate', object=['reinvestigate']), RelationSample(subject='learn', object=['relearn']), RelationSample(subject='locate', object=['relocate']), RelationSample(subject='marry', object=['remarry']), RelationSample(subject='negotiate', object=['renegotiate']), RelationSample(subject='occur', object=['reoccur']), RelationSample(subject='organize', object=['reorganize', 'reorganise']), RelationSample(subject='publish', object=['republish']), RelationSample(subject='send', object=['resend']), RelationSample(subject='solve', object=['resolve']), RelationSample(subject='submit', object=['resubmit']), RelationSample(subject='tell', object=['retell']), RelationSample(subject='unite', object=['reunite']), RelationSample(subject='upload', object=['reupload']), RelationSample(subject='write', object=['rewrite'])], _domain=None, _range=None)
2024-06-12 17:57:43 root INFO     starting operator prediction
2024-06-12 17:57:43 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} again is to)
2024-06-12 17:57:43 root INFO     [relation call] using To {} again is to
2024-06-12 17:57:52 root INFO     total operator prediction time: 8.559460401535034 seconds
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' red', ' recon', ' res'] matches ['reacquire'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' red', ' recon', ' rec'] matches ['readjust'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' red', ' res'] matches ['reappear'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['reapply'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' red', ' res', ' reass'] matches ['reappoint'] is True
2024-06-12 17:57:55 root INFO     [' re', ' red', ' recon', ' reass', ' rec'] matches ['rearrange'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rec', ' res'] matches ['reassess'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['reassign'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['reassure'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' rec', ' recon', ' red'] matches ['recalculate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' rec', ' red'] matches ['recognize'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' res', ' rec'] matches ['recommend'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' red', ' rec'] matches ['reconfigure'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['reconfirm'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['reconnect'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rein', ' rec'] matches ['reconsider'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['recreate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' red', ' rec'] matches ['redecorate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rec', ' res'] matches ['redeem'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['redefine'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rein', ' red'] matches ['redevelop'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' red', ' rec', ' recon'] matches ['rediscover'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' red', ' rec'] matches ['redistribute'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['reemerge'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['reengage'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rec', ' red'] matches ['reestablish'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' res', ' rein'] matches ['reevaluate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rec', ' red'] matches ['reexamine'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['regenerate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' red', ' reass', ' res'] matches ['regrow'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' red', ' rec'] matches ['reinstall'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' res', ' red'] matches ['reintegrate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['reinterpret'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['reintroduce'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['reinvest'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' rec', ' red'] matches ['reinvestigate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' res', ' recon', ' red'] matches ['relearn'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['relocate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' renew'] matches ['remarry'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['renegotiate'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' renew'] matches ['reoccur'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' red', ' rec', ' reass'] matches ['reorganize', 'reorganise'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['republish'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' rec'] matches ['resend'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' rec', ' red'] matches ['resolve'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['resubmit'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' red', ' recon', ' rec'] matches ['retell'] is True
2024-06-12 17:57:55 root INFO     [' re', ' recon', ' reass', ' red', ' rec'] matches ['reunite'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' recon', ' red', ' res'] matches ['reupload'] is True
2024-06-12 17:57:55 root INFO     [' re', ' reass', ' red', ' recon', ' rec'] matches ['rewrite'] is True
2024-06-12 17:57:55 root INFO     0.0re+verb_reg (50) total: defaultdict(<class 'int'>, {False: 538, True: 61})
2024-06-12 17:57:55 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+ment_irreg', prompt_templates=['To {} results in a', 'To {} brings about a'], prompt_templates_zs=['To {} results in a', 'To {} brings about a'], samples=[RelationSample(subject='accomplish', object=['accomplishment']), RelationSample(subject='achieve', object=['achievement']), RelationSample(subject='acknowledge', object=['acknowledgement']), RelationSample(subject='adjust', object=['adjustment']), RelationSample(subject='advertise', object=['advertisement', 'advertizement']), RelationSample(subject='agree', object=['agreement']), RelationSample(subject='align', object=['alignment']), RelationSample(subject='amend', object=['amendment']), RelationSample(subject='amuse', object=['amusement']), RelationSample(subject='announce', object=['announcement']), RelationSample(subject='appoint', object=['appointment']), RelationSample(subject='arrange', object=['arrangement']), RelationSample(subject='assess', object=['assessment']), RelationSample(subject='assign', object=['assignment']), RelationSample(subject='commit', object=['commitment']), RelationSample(subject='detach', object=['detachment']), RelationSample(subject='develop', object=['development']), RelationSample(subject='disagree', object=['disagreement']), RelationSample(subject='disappoint', object=['disappointment']), RelationSample(subject='displace', object=['displacement']), RelationSample(subject='embarrass', object=['embarrassment']), RelationSample(subject='encourage', object=['encouragement']), RelationSample(subject='endorse', object=['endorsement']), RelationSample(subject='enforce', object=['enforcement']), RelationSample(subject='engage', object=['engagement']), RelationSample(subject='enhance', object=['enhancement']), RelationSample(subject='enjoy', object=['enjoyment']), RelationSample(subject='enlighten', object=['enlightenment']), RelationSample(subject='enroll', object=['enrollment', 'enrolment']), RelationSample(subject='entertain', object=['entertainment']), RelationSample(subject='entitle', object=['entitlement']), RelationSample(subject='equip', object=['equipment']), RelationSample(subject='establish', object=['establishment']), RelationSample(subject='excite', object=['excitement']), RelationSample(subject='fulfil', object=['fulfilment']), RelationSample(subject='fulfill', object=['fulfillment']), RelationSample(subject='harass', object=['harassment']), RelationSample(subject='impair', object=['impairment']), RelationSample(subject='improve', object=['improvement']), RelationSample(subject='infringe', object=['infringement']), RelationSample(subject='invest', object=['investment']), RelationSample(subject='involve', object=['involvement']), RelationSample(subject='manage', object=['management']), RelationSample(subject='punish', object=['punishment']), RelationSample(subject='redevelop', object=['redevelopment']), RelationSample(subject='reimburse', object=['reimbursement']), RelationSample(subject='reinforce', object=['reinforcement']), RelationSample(subject='replace', object=['replacement']), RelationSample(subject='require', object=['requirement']), RelationSample(subject='resent', object=['resentment'])], _domain=None, _range=None)
2024-06-12 17:57:57 root INFO     starting operator prediction
2024-06-12 17:57:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in a)
2024-06-12 17:57:57 root INFO     [relation call] using To {} results in a
2024-06-12 17:58:04 root INFO     total operator prediction time: 7.376571893692017 seconds
2024-06-12 17:58:07 root INFO     [' development', ' a', '\n', ' completion', ' further'] matches ['accomplishment'] is True
2024-06-12 17:58:07 root INFO     [' development', ' completion', '\n', ' a', ' performance'] matches ['achievement'] is True
2024-06-12 17:58:07 root INFO     [' ', ' completion', '\n', ' development', ' promotion'] matches ['acknowledgement'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' ', ' an', ' a'] matches ['adjustment'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' ', '...', ' development', ' re'] matches ['advertisement', 'advertizement'] is False
2024-06-12 17:58:07 root INFO     [' ', ' development', '\n', ' re', ' a'] matches ['agreement'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' re', ' an', ' '] matches ['alignment'] is False
2024-06-12 17:58:07 root INFO     [' ', '\n', ' the', ' promotion', ' re'] matches ['amendment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' a', ' re', ' development'] matches ['amusement'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' development', ' a', ' completion'] matches ['announcement'] is True
2024-06-12 17:58:07 root INFO     [' ', '\n', ' a', ' development', ' an'] matches ['appointment'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' a', ' development', ' an'] matches ['arrangement'] is True
2024-06-12 17:58:07 root INFO     [' development', '\n', ' the', ' ', ' further'] matches ['assessment'] is False
2024-06-12 17:58:07 root INFO     [' a', ' ', ' development', ' re', '\n'] matches ['assignment'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' ', ' promotion', ' re'] matches ['commitment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' development', ' a', ' an'] matches ['detachment'] is False
2024-06-12 17:58:07 root INFO     [' development', ' a', ' further', ' rehabilitation', ' promotion'] matches ['development'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' re', '-', ' development'] matches ['disagreement'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' a', ' promotion', '-'] matches ['disappointment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' promotion', ' re', ' development'] matches ['displacement'] is False
2024-06-12 17:58:07 root INFO     [' ', '\n', '-', ' re', ' development'] matches ['embarrassment'] is False
2024-06-12 17:58:07 root INFO     [' development', ' re', ' ', '\n', ' participation'] matches ['encouragement'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' ', ' promotion', '-'] matches ['endorsement'] is False
2024-06-12 17:58:07 root INFO     [' development', ' ', ' a', '\n', ' re'] matches ['enforcement'] is False
2024-06-12 17:58:07 root INFO     [' ', '\n', ' re', ' development', ' a'] matches ['engagement'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' ', ' performance', ' completion'] matches ['enhancement'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' ', ' re', ' a'] matches ['enjoyment'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' re', ' ', ' further'] matches ['enlightenment'] is False
2024-06-12 17:58:07 root INFO     [' ', '\n', ' development', ' re', ' a'] matches ['enrollment', 'enrolment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' a', ' re', ' an'] matches ['entertainment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' ', ' re', ' further'] matches ['entitlement'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' ', ' a', ' an'] matches ['equipment'] is False
2024-06-12 17:58:07 root INFO     [' development', ' a', ' completion', ' an', ' '] matches ['establishment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' re', ' ', ' a'] matches ['excitement'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' completion', ' a', ' promotion'] matches ['fulfilment'] is False
2024-06-12 17:58:07 root INFO     [' development', ' a', ' an', ' completion', '\n'] matches ['fulfillment'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' ', '-', ' re'] matches ['harassment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' ', ' re', ' performance'] matches ['impairment'] is False
2024-06-12 17:58:07 root INFO     [' performance', ' development', ' completion', ' management', '\n'] matches ['improvement'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' development', ' re', ' promotion'] matches ['infringement'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' promotion', ' development', ' a'] matches ['investment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' re', ' development', ' ', ' a'] matches ['involvement'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' a', ' re', ' '] matches ['management'] is False
2024-06-12 17:58:07 root INFO     [' ', '\n', ' re', ' a', '-'] matches ['punishment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' a', ' development', ' an'] matches ['redevelopment'] is False
2024-06-12 17:58:07 root INFO     ['\n', ' development', ' ', ' re', ' promotion'] matches ['reimbursement'] is True
2024-06-12 17:58:07 root INFO     [' development', '\n', ' the', ' ', ' a'] matches ['reinforcement'] is False
2024-06-12 17:58:07 root INFO     [' development', '\n', ' ', ' re', ' a'] matches ['replacement'] is True
2024-06-12 17:58:07 root INFO     [' re', '\n', ' development', ' ', ' an'] matches ['requirement'] is True
2024-06-12 17:58:07 root INFO     ['\n', ' ', ' promotion', ' development', ' re'] matches ['resentment'] is True
2024-06-12 17:58:07 root INFO     0.0verb+ment_irreg (50) total: defaultdict(<class 'int'>, {False: 574, True: 75})
2024-06-12 17:58:07 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='noun+less_reg', prompt_templates=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], prompt_templates_zs=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], samples=[RelationSample(subject='arm', object=['armless']), RelationSample(subject='art', object=['artless']), RelationSample(subject='bone', object=['boneless']), RelationSample(subject='breath', object=['breathless']), RelationSample(subject='carbon', object=['carbonless']), RelationSample(subject='child', object=['childless']), RelationSample(subject='collar', object=['collarless']), RelationSample(subject='death', object=['deathless']), RelationSample(subject='defence', object=['defenceless', 'defenseless']), RelationSample(subject='effort', object=['effortless']), RelationSample(subject='ego', object=['egoless']), RelationSample(subject='emotion', object=['emotionless']), RelationSample(subject='error', object=['errorless']), RelationSample(subject='expression', object=['expressionless']), RelationSample(subject='faith', object=['faithless']), RelationSample(subject='friction', object=['frictionless']), RelationSample(subject='friend', object=['friendless']), RelationSample(subject='gender', object=['genderless']), RelationSample(subject='goal', object=['goalless']), RelationSample(subject='god', object=['godless']), RelationSample(subject='guile', object=['guileless']), RelationSample(subject='guilt', object=['guiltless']), RelationSample(subject='hair', object=['hairless']), RelationSample(subject='heart', object=['heartless']), RelationSample(subject='heir', object=['heirless']), RelationSample(subject='home', object=['homeless']), RelationSample(subject='law', object=['lawless']), RelationSample(subject='leg', object=['legless']), RelationSample(subject='life', object=['lifeless', 'liveless']), RelationSample(subject='luck', object=['luckless']), RelationSample(subject='meat', object=['meatless']), RelationSample(subject='mirth', object=['mirthless']), RelationSample(subject='money', object=['moneyless']), RelationSample(subject='odor', object=['odorless', 'odourless']), RelationSample(subject='passion', object=['passionless']), RelationSample(subject='path', object=['pathless']), RelationSample(subject='penny', object=['penniless']), RelationSample(subject='remorse', object=['remorseless']), RelationSample(subject='ruth', object=['ruthless']), RelationSample(subject='sensor', object=['sensorless']), RelationSample(subject='sleeve', object=['sleeveless']), RelationSample(subject='soul', object=['soulless']), RelationSample(subject='speech', object=['speechless']), RelationSample(subject='spine', object=['spineless']), RelationSample(subject='tact', object=['tactless']), RelationSample(subject='talent', object=['talentless']), RelationSample(subject='thought', object=['thoughtless']), RelationSample(subject='tooth', object=['toothless']), RelationSample(subject='window', object=['windowless']), RelationSample(subject='wit', object=['witless'])], _domain=None, _range=None)
2024-06-12 17:58:09 root INFO     starting operator prediction
2024-06-12 17:58:09 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Something without {} is)
2024-06-12 17:58:09 root INFO     [relation call] using Something without {} is
2024-06-12 17:58:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 17:58:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 17:58:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 17:58:16 root INFO     total operator prediction time: 7.369328737258911 seconds
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' devoid', ' '] matches ['armless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' not', ' a'] matches ['artless'] is True
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' a'] matches ['boneless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['breathless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' devoid', ' a'] matches ['carbonless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' ', ' a'] matches ['childless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' '] matches ['collarless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' un', ' devoid'] matches ['deathless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' un', ' '] matches ['defenceless', 'defenseless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' '] matches ['effortless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' devoid', ' '] matches ['egoless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' ', ' a'] matches ['emotionless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['errorless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' ', ' a'] matches ['expressionless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' '] matches ['faithless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['frictionless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' devoid', ' not'] matches ['friendless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['genderless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' a', ' devoid'] matches ['goalless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' a', ' devoid'] matches ['godless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' a', ' devoid'] matches ['guileless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' un', ' not'] matches ['guiltless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' '] matches ['hairless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['heartless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' ', ' not', ' a'] matches ['heirless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['homeless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['lawless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' ', ' a'] matches ['legless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['lifeless', 'liveless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' a'] matches ['luckless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' ', ' a'] matches ['meatless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['mirthless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' un'] matches ['moneyless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' ', ' a'] matches ['odorless', 'odourless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' devoid', ' '] matches ['passionless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' '] matches ['pathless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' devoid', ' un'] matches ['penniless'] is False
2024-06-12 17:58:19 root INFO     ['\n', ' without', ' devoid', '...', ' '] matches ['remorseless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' not', ' devoid'] matches ['ruthless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' un', ' devoid', ' '] matches ['sensorless'] is False
2024-06-12 17:58:19 root INFO     ['\n', ' without', ' un', ' devoid', ' a'] matches ['sleeveless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' a', ' '] matches ['soulless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' '] matches ['speechless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' a'] matches ['spineless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' un', ' not'] matches ['tactless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' devoid', ' '] matches ['talentless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' un', ' devoid'] matches ['thoughtless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' devoid', ' ', ' a'] matches ['toothless'] is False
2024-06-12 17:58:19 root INFO     [' without', '\n', ' a', ' un', ' devoid'] matches ['windowless'] is False
2024-06-12 17:58:19 root INFO     ['\n', ' without', ' a', ' devoid', ' un'] matches ['witless'] is False
2024-06-12 17:58:19 root INFO     0.0noun+less_reg (50) total: defaultdict(<class 'int'>, {False: 623, True: 76})
2024-06-12 17:58:19 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='over+adj_reg', prompt_templates=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], prompt_templates_zs=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], samples=[RelationSample(subject='ambitious', object=['overambitious', 'over-ambitious']), RelationSample(subject='arching', object=['overarching', 'over-arching']), RelationSample(subject='booked', object=['overbooked', 'over-booked']), RelationSample(subject='charged', object=['overcharged', 'over-charged']), RelationSample(subject='compensated', object=['overcompensated', 'over-compensated']), RelationSample(subject='confident', object=['overconfident', 'over-confident']), RelationSample(subject='cooked', object=['overcooked', 'over-cooked']), RelationSample(subject='crowded', object=['overcrowded', 'over-crowded']), RelationSample(subject='developed', object=['overdeveloped', 'over-developed']), RelationSample(subject='done', object=['overdone', 'over-done']), RelationSample(subject='dressed', object=['overdressed', 'over-dressed']), RelationSample(subject='enthusiastic', object=['overenthusiastic', 'over-enthusiastic']), RelationSample(subject='excited', object=['overexcited', 'over-excited']), RelationSample(subject='exposed', object=['overexposed', 'over-exposed']), RelationSample(subject='filled', object=['overfilled', 'over-filled']), RelationSample(subject='grown', object=['overgrown', 'over-grown']), RelationSample(subject='heard', object=['overheard', 'over-heard']), RelationSample(subject='heated', object=['overheated', 'over-heated']), RelationSample(subject='inflated', object=['overinflated', 'over-inflated']), RelationSample(subject='laid', object=['overlaid', 'over-laid']), RelationSample(subject='loaded', object=['overloaded', 'over-loaded']), RelationSample(subject='optimistic', object=['overoptimistic', 'over-optimistic']), RelationSample(subject='paid', object=['overpaid', 'over-paid']), RelationSample(subject='painted', object=['overpainted', 'over-painted']), RelationSample(subject='played', object=['overplayed', 'over-played']), RelationSample(subject='populated', object=['overpopulated', 'over-populated']), RelationSample(subject='powered', object=['overpowered', 'over-powered']), RelationSample(subject='protected', object=['overprotected', 'over-protected']), RelationSample(subject='protective', object=['overprotective', 'over-protective']), RelationSample(subject='qualified', object=['overqualified', 'over-qualified']), RelationSample(subject='represented', object=['overrepresented', 'over-represented']), RelationSample(subject='saturated', object=['oversaturated', 'over-saturated']), RelationSample(subject='shadowed', object=['overshadowed', 'over-shadowed']), RelationSample(subject='simplified', object=['oversimplified', 'over-simplified']), RelationSample(subject='sized', object=['oversized', 'over-sized']), RelationSample(subject='sold', object=['oversold', 'over-sold']), RelationSample(subject='spent', object=['overspent', 'over-spent']), RelationSample(subject='stated', object=['overstated', 'over-stated']), RelationSample(subject='stimulated', object=['overstimulated', 'over-stimulated']), RelationSample(subject='stocked', object=['overstocked', 'over-stocked']), RelationSample(subject='strained', object=['overstrained', 'over-strained']), RelationSample(subject='stressed', object=['overstressed', 'over-stressed']), RelationSample(subject='stretched', object=['overstretched', 'over-stretched']), RelationSample(subject='subscribed', object=['oversubscribed', 'over-subscribed']), RelationSample(subject='taken', object=['overtaken', 'over-taken']), RelationSample(subject='thrown', object=['overthrown', 'over-thrown']), RelationSample(subject='turned', object=['overturned', 'over-turned']), RelationSample(subject='used', object=['overused', 'over-used']), RelationSample(subject='written', object=['overwritten', 'over-written']), RelationSample(subject='zealous', object=['overzealous', 'over-zealous'])], _domain=None, _range=None)
2024-06-12 17:58:21 root INFO     starting operator prediction
2024-06-12 17:58:21 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If something is too {}, it is)
2024-06-12 17:58:21 root INFO     [relation call] using If something is too {}, it is
2024-06-12 17:58:32 root INFO     total operator prediction time: 10.721803188323975 seconds
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overc', ' overd', ' overe'] matches ['overambitious', 'over-ambitious'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overarching', 'over-arching'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overs', ' overe', ' overw'] matches ['overbooked', 'over-booked'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overcharged', 'over-charged'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overs', ' overe', ' overw'] matches ['overcompensated', 'over-compensated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overconfident', 'over-confident'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overcooked', 'over-cooked'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overe'] matches ['overcrowded', 'over-crowded'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overdeveloped', 'over-developed'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overdone', 'over-done'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overdressed', 'over-dressed'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overe', ' overc', ' overd'] matches ['overenthusiastic', 'over-enthusiastic'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overw'] matches ['overexcited', 'over-excited'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overexposed', 'over-exposed'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overfilled', 'over-filled'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overgrown', 'over-grown'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overs', ' overc', ' overw'] matches ['overheard', 'over-heard'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overheated', 'over-heated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overinflated', 'over-inflated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overlaid', 'over-laid'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overloaded', 'over-loaded'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overoptimistic', 'over-optimistic'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overw'] matches ['overpaid', 'over-paid'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overpainted', 'over-painted'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overs', ' overc', ' overe'] matches ['overplayed', 'over-played'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overpopulated', 'over-populated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overpowered', 'over-powered'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overprotected', 'over-protected'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overprotective', 'over-protective'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overw'] matches ['overqualified', 'over-qualified'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overrepresented', 'over-represented'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overe', ' overs', ' overd', ' overc'] matches ['oversaturated', 'over-saturated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overc'] matches ['overshadowed', 'over-shadowed'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['oversimplified', 'over-simplified'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overs', ' overe', ' overw'] matches ['oversized', 'over-sized'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overw'] matches ['oversold', 'over-sold'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overspent', 'over-spent'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overw', ' overe'] matches ['overstated', 'over-stated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overstimulated', 'over-stimulated'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overstocked', 'over-stocked'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overc'] matches ['overstrained', 'over-strained'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overstressed', 'over-stressed'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overc', ' overs', ' overw'] matches ['overstretched', 'over-stretched'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['oversubscribed', 'over-subscribed'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overtaken', 'over-taken'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overd', ' overs', ' overc', ' overe'] matches ['overthrown', 'over-thrown'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overe', ' overw'] matches ['overturned', 'over-turned'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overused', 'over-used'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overd', ' overc', ' overe'] matches ['overwritten', 'over-written'] is True
2024-06-12 17:58:34 root INFO     [' over', ' overs', ' overc', ' overd', ' overe'] matches ['overzealous', 'over-zealous'] is True
2024-06-12 17:58:34 root INFO     0.0over+adj_reg (50) total: defaultdict(<class 'int'>, {False: 623, True: 126})
2024-06-12 17:58:34 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj+ness_reg', prompt_templates=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], prompt_templates_zs=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], samples=[RelationSample(subject='amazing', object=['amazingness']), RelationSample(subject='attractive', object=['attractiveness']), RelationSample(subject='aware', object=['awareness']), RelationSample(subject='broken', object=['brokenness']), RelationSample(subject='careful', object=['carefulness']), RelationSample(subject='cheap', object=['cheapness']), RelationSample(subject='competitive', object=['competitiveness']), RelationSample(subject='connected', object=['connectedness']), RelationSample(subject='conscious', object=['consciousness']), RelationSample(subject='creative', object=['creativeness']), RelationSample(subject='dangerous', object=['dangerousness']), RelationSample(subject='devoted', object=['devotedness']), RelationSample(subject='directed', object=['directedness']), RelationSample(subject='distinct', object=['distinctness']), RelationSample(subject='distinctive', object=['distinctiveness']), RelationSample(subject='effective', object=['effectiveness']), RelationSample(subject='extensive', object=['extensiveness']), RelationSample(subject='fixed', object=['fixedness']), RelationSample(subject='foreign', object=['foreignness']), RelationSample(subject='happy', object=['happiness']), RelationSample(subject='helpful', object=['helpfulness']), RelationSample(subject='hidden', object=['hiddenness']), RelationSample(subject='hot', object=['hotness']), RelationSample(subject='huge', object=['hugeness']), RelationSample(subject='impressive', object=['impressiveness']), RelationSample(subject='innovative', object=['innovativeness']), RelationSample(subject='interesting', object=['interestingness']), RelationSample(subject='mad', object=['madness']), RelationSample(subject='marked', object=['markedness']), RelationSample(subject='massive', object=['massiveness']), RelationSample(subject='nice', object=['niceness']), RelationSample(subject='obvious', object=['obviousness']), RelationSample(subject='odd', object=['oddness']), RelationSample(subject='prepared', object=['preparedness']), RelationSample(subject='pure', object=['pureness']), RelationSample(subject='random', object=['randomness']), RelationSample(subject='rare', object=['rareness']), RelationSample(subject='reasonable', object=['reasonableness']), RelationSample(subject='related', object=['relatedness']), RelationSample(subject='righteous', object=['righteousness']), RelationSample(subject='sacred', object=['sacredness']), RelationSample(subject='sad', object=['sadness']), RelationSample(subject='same', object=['sameness']), RelationSample(subject='serious', object=['seriousness']), RelationSample(subject='situated', object=['situatedness']), RelationSample(subject='strange', object=['strangeness']), RelationSample(subject='unique', object=['uniqueness']), RelationSample(subject='useful', object=['usefulness']), RelationSample(subject='vast', object=['vastness']), RelationSample(subject='weak', object=['weakness'])], _domain=None, _range=None)
2024-06-12 17:58:36 root INFO     starting operator prediction
2024-06-12 17:58:36 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The state of being {} is)
2024-06-12 17:58:36 root INFO     [relation call] using The state of being {} is
2024-06-12 17:58:45 root INFO     total operator prediction time: 8.911462306976318 seconds
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['amazingness'] is True
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['attractiveness'] is True
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' ', ' a', ' being'] matches ['awareness'] is True
2024-06-12 17:58:48 root INFO     ['\n', ' a', ' the', ' ', ' being'] matches ['brokenness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['carefulness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['cheapness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['competitiveness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['connectedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' being', ' the', ' a'] matches ['consciousness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' ', ' a', ' being'] matches ['creativeness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' a', ' the', ' being'] matches ['dangerousness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' ('] matches ['devotedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' a', ' ', ' being'] matches ['directedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['distinctness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['distinctiveness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['effectiveness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' a', ' ', ' being'] matches ['extensiveness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['fixedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['foreignness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['happiness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' ('] matches ['helpfulness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['hiddenness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['hotness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['hugeness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['impressiveness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' a', ' the', ' being'] matches ['innovativeness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['interestingness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['madness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['markedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['massiveness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['niceness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['obviousness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' being', ' the', ' ', ' a'] matches ['oddness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['preparedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['pureness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' being', ' the', ' a'] matches ['randomness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['rareness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['reasonableness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' ', ' a', ' being'] matches ['relatedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['righteousness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' ', ' being', ' a'] matches ['sacredness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['sadness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['sameness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['seriousness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['situatedness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' the', ' ', ' being', ' a'] matches ['strangeness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['uniqueness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['usefulness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' a', ' being'] matches ['vastness'] is False
2024-06-12 17:58:48 root INFO     ['\n', ' ', ' the', ' being', ' a'] matches ['weakness'] is False
2024-06-12 17:58:48 root INFO     0.0adj+ness_reg (50) total: defaultdict(<class 'int'>, {False: 670, True: 129})
2024-06-12 17:58:48 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='un+adj_reg', prompt_templates=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], prompt_templates_zs=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], samples=[RelationSample(subject='able', object=['unable']), RelationSample(subject='acceptable', object=['unacceptable']), RelationSample(subject='affected', object=['unaffected']), RelationSample(subject='authorized', object=['unauthorized', 'unauthorised']), RelationSample(subject='available', object=['unavailable']), RelationSample(subject='avoidable', object=['unavoidable']), RelationSample(subject='aware', object=['unaware']), RelationSample(subject='believable', object=['unbelievable']), RelationSample(subject='biased', object=['unbiased']), RelationSample(subject='certain', object=['uncertain']), RelationSample(subject='changed', object=['unchanged']), RelationSample(subject='comfortable', object=['uncomfortable']), RelationSample(subject='conditional', object=['unconditional']), RelationSample(subject='conscious', object=['unconscious']), RelationSample(subject='controlled', object=['uncontrolled']), RelationSample(subject='desirable', object=['undesirable']), RelationSample(subject='employed', object=['unemployed']), RelationSample(subject='expected', object=['unexpected']), RelationSample(subject='finished', object=['unfinished']), RelationSample(subject='forgettable', object=['unforgettable']), RelationSample(subject='fortunate', object=['unfortunate']), RelationSample(subject='happy', object=['unhappy']), RelationSample(subject='healthy', object=['unhealthy']), RelationSample(subject='identified', object=['unidentified']), RelationSample(subject='intended', object=['unintended']), RelationSample(subject='interrupted', object=['uninterrupted']), RelationSample(subject='known', object=['unknown']), RelationSample(subject='lawful', object=['unlawful']), RelationSample(subject='lucky', object=['unlucky']), RelationSample(subject='noticed', object=['unnoticed']), RelationSample(subject='paid', object=['unpaid']), RelationSample(subject='pleasant', object=['unpleasant']), RelationSample(subject='popular', object=['unpopular']), RelationSample(subject='predictable', object=['unpredictable']), RelationSample(subject='published', object=['unpublished']), RelationSample(subject='realistic', object=['unrealistic']), RelationSample(subject='reasonable', object=['unreasonable']), RelationSample(subject='related', object=['unrelated']), RelationSample(subject='reliable', object=['unreliable']), RelationSample(subject='resolved', object=['unresolved']), RelationSample(subject='restricted', object=['unrestricted']), RelationSample(subject='satisfactory', object=['unsatisfactory']), RelationSample(subject='specified', object=['unspecified']), RelationSample(subject='successful', object=['unsuccessful']), RelationSample(subject='suitable', object=['unsuitable']), RelationSample(subject='sustainable', object=['unsustainable']), RelationSample(subject='used', object=['unused']), RelationSample(subject='usual', object=['unusual']), RelationSample(subject='veiled', object=['unveiled']), RelationSample(subject='wanted', object=['unwanted'])], _domain=None, _range=None)
2024-06-12 17:58:50 root INFO     starting operator prediction
2024-06-12 17:58:50 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-12 17:58:50 root INFO     [relation call] using The opposite of {} is
2024-06-12 17:58:57 root INFO     total operator prediction time: 7.189359903335571 seconds
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' unre'] matches ['unable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unc'] matches ['unacceptable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' unre'] matches ['unaffected'] is True
2024-06-12 17:59:00 root INFO     [' not', ' un', ' non', ' unt', ' unc'] matches ['unauthorized', 'unauthorised'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unavailable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' uns', ' non', '\n'] matches ['unavoidable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', '\n', ' non', ' unc'] matches ['unaware'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' uns'] matches ['unbelievable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', '\n', ' non'] matches ['unbiased'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' unre'] matches ['uncertain'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', '\n', ' in', ' non'] matches ['unchanged'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' in'] matches ['uncomfortable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' non', '\n'] matches ['unconditional'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' non', '\n'] matches ['unconscious'] is True
2024-06-12 17:59:00 root INFO     [' not', ' un', ' non', ' unc', ' unw'] matches ['uncontrolled'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unc'] matches ['undesirable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unemployed'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', '\n', ' non', ' unc'] matches ['unexpected'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', '\n', ' unre'] matches ['unfinished'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' in'] matches ['unforgettable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', '\n', ' non', ' unc'] matches ['unfortunate'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' non', ' uns'] matches ['unhappy'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' uns'] matches ['unhealthy'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' in', ' non', '\n'] matches ['unidentified'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' non', ' unre'] matches ['unintended'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', '\n', ' non', ' unw'] matches ['uninterrupted'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' unt', ' non'] matches ['unknown'] is True
2024-06-12 17:59:00 root INFO     [' not', ' un', ' non', ' unc', ' unt'] matches ['unlawful'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', '\n', ' non', ' in'] matches ['unlucky'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' in'] matches ['unnoticed'] is True
2024-06-12 17:59:00 root INFO     [' not', ' un', '\n', ' unc', ' non'] matches ['unpaid'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' non', ' unre'] matches ['unpleasant'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' unt'] matches ['unpopular'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unt'] matches ['unpredictable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' unc', ' non', '\n'] matches ['unpublished'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unf'] matches ['unrealistic'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unc'] matches ['unreasonable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unw'] matches ['unrelated'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' uns'] matches ['unreliable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unresolved'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unrestricted'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unsatisfactory'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', ' unre'] matches ['unspecified'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unt'] matches ['unsuccessful'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unsuitable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unf'] matches ['unsustainable'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unused'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unc'] matches ['unusual'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', '\n', ' unf'] matches ['unveiled'] is True
2024-06-12 17:59:00 root INFO     [' un', ' not', ' non', ' unc', '\n'] matches ['unwanted'] is True
2024-06-12 17:59:00 root INFO     0.0un+adj_reg (50) total: defaultdict(<class 'int'>, {False: 670, True: 179})
2024-06-12 17:59:00 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='adj+ly_reg', prompt_templates=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], prompt_templates_zs=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], samples=[RelationSample(subject='according', object=['accordingly']), RelationSample(subject='actual', object=['actually']), RelationSample(subject='additional', object=['additionally']), RelationSample(subject='apparent', object=['apparently']), RelationSample(subject='beautiful', object=['beautifully']), RelationSample(subject='clinical', object=['clinically']), RelationSample(subject='creative', object=['creatively']), RelationSample(subject='critical', object=['critically']), RelationSample(subject='cultural', object=['culturally']), RelationSample(subject='decided', object=['decidedly']), RelationSample(subject='different', object=['differently']), RelationSample(subject='digital', object=['digitally']), RelationSample(subject='effective', object=['effectively']), RelationSample(subject='environmental', object=['environmentally']), RelationSample(subject='extensive', object=['extensively']), RelationSample(subject='famous', object=['famously']), RelationSample(subject='federal', object=['federally']), RelationSample(subject='financial', object=['financially']), RelationSample(subject='global', object=['globally']), RelationSample(subject='historical', object=['historically']), RelationSample(subject='huge', object=['hugely']), RelationSample(subject='immediate', object=['immediately']), RelationSample(subject='important', object=['importantly']), RelationSample(subject='increasing', object=['increasingly']), RelationSample(subject='interesting', object=['interestingly']), RelationSample(subject='internal', object=['internally']), RelationSample(subject='international', object=['internationally']), RelationSample(subject='legal', object=['legally']), RelationSample(subject='mental', object=['mentally']), RelationSample(subject='nice', object=['nicely']), RelationSample(subject='obvious', object=['obviously']), RelationSample(subject='physical', object=['physically']), RelationSample(subject='political', object=['politically']), RelationSample(subject='popular', object=['popularly']), RelationSample(subject='practical', object=['practically']), RelationSample(subject='previous', object=['previously']), RelationSample(subject='rare', object=['rarely']), RelationSample(subject='regional', object=['regionally']), RelationSample(subject='serious', object=['seriously']), RelationSample(subject='sexual', object=['sexually']), RelationSample(subject='significant', object=['significantly']), RelationSample(subject='similar', object=['similarly']), RelationSample(subject='strong', object=['strongly']), RelationSample(subject='subsequent', object=['subsequently']), RelationSample(subject='successful', object=['successfully']), RelationSample(subject='traditional', object=['traditionally']), RelationSample(subject='typical', object=['typically']), RelationSample(subject='unique', object=['uniquely']), RelationSample(subject='virtual', object=['virtually']), RelationSample(subject='visual', object=['visually'])], _domain=None, _range=None)
2024-06-12 17:59:02 root INFO     starting operator prediction
2024-06-12 17:59:02 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The adjective form of {} is)
2024-06-12 17:59:02 root INFO     [relation call] using The adjective form of {} is
2024-06-12 17:59:11 root INFO     total operator prediction time: 8.647917985916138 seconds
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' generally'] matches ['accordingly'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' generally', ' actually', '\n'] matches ['actually'] is True
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', '\n'] matches ['additionally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' generally', ' typically', '\n'] matches ['apparently'] is False
2024-06-12 17:59:13 root INFO     [' significantly', '\n', ' typically', ' actually', ' generally'] matches ['beautifully'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' generally', '\n'] matches ['clinically'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', '\n', ' generally'] matches ['creatively'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' generally', ' effectively'] matches ['critically'] is False
2024-06-12 17:59:13 root INFO     [' actually', ' significantly', ' typically', ' generally', '\n'] matches ['culturally'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', '\n', ' generally'] matches ['decidedly'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' generally', '\n'] matches ['differently'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' generally'] matches ['digitally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', '\n'] matches ['effectively'] is False
2024-06-12 17:59:13 root INFO     [' actually', ' typically', ' significantly', ' generally', '\n'] matches ['environmentally'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', ' generally', '\n'] matches ['extensively'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', ' generally', '\n'] matches ['famously'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', '\n', ' generally'] matches ['federally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' generally', '\n'] matches ['financially'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' generally'] matches ['globally'] is False
2024-06-12 17:59:13 root INFO     [' actually', ' typically', ' significantly', ' generally', '\n'] matches ['historically'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', '\n'] matches ['hugely'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', ' effectively', '\n'] matches ['immediately'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', ' generally', '\n'] matches ['importantly'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' generally', ' effectively'] matches ['increasingly'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', '\n'] matches ['interestingly'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', ' effectively'] matches ['internally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' effectively', '\n'] matches ['internationally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', '\n'] matches ['legally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', '\n'] matches ['mentally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' generally', ' effectively'] matches ['nicely'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' generally'] matches ['obviously'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', ' generally', '\n'] matches ['physically'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' significantly', ' actually', ' generally', '\n'] matches ['politically'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' essentially', ' generally'] matches ['popularly'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' actually', ' significantly', ' generally', '\n'] matches ['practically'] is False
2024-06-12 17:59:13 root INFO     [' actually', ' significantly', ' typically', ' generally', ' effectively'] matches ['previously'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' generally'] matches ['rarely'] is False
2024-06-12 17:59:13 root INFO     [' actually', ' significantly', ' typically', ' generally', '\n'] matches ['regionally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', '\n', ' generally'] matches ['seriously'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' generally', ' effectively'] matches ['sexually'] is False
2024-06-12 17:59:13 root INFO     [' typically', ' actually', ' significantly', ' generally', ' effectively'] matches ['significantly'] is True
2024-06-12 17:59:13 root INFO     [' typically', ' actually', ' significantly', ' generally', '\n'] matches ['similarly'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' effectively'] matches ['strongly'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', '\n', ' generally'] matches ['subsequently'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', '\n', ' generally'] matches ['successfully'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', '\n', ' generally'] matches ['traditionally'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', '\n', ' generally'] matches ['typically'] is True
2024-06-12 17:59:13 root INFO     [' significantly', ' actually', ' typically', ' effectively', '\n'] matches ['uniquely'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' actually', ' effectively', '\n'] matches ['virtually'] is False
2024-06-12 17:59:13 root INFO     [' significantly', ' typically', ' generally', ' actually', '\n'] matches ['visually'] is False
2024-06-12 17:59:13 root INFO     0.0adj+ly_reg (50) total: defaultdict(<class 'int'>, {False: 717, True: 182})
2024-06-12 17:59:13 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+er_irreg', prompt_templates=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], prompt_templates_zs=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], samples=[RelationSample(subject='achieve', object=['achiever']), RelationSample(subject='advertise', object=['advertiser']), RelationSample(subject='announce', object=['announcer']), RelationSample(subject='bake', object=['baker']), RelationSample(subject='begin', object=['beginner']), RelationSample(subject='believe', object=['believer']), RelationSample(subject='borrow', object=['borrower']), RelationSample(subject='choreograph', object=['choreographer']), RelationSample(subject='compose', object=['composer']), RelationSample(subject='consume', object=['consumer']), RelationSample(subject='contend', object=['contender']), RelationSample(subject='defend', object=['defender']), RelationSample(subject='deliver', object=['deliverer']), RelationSample(subject='destroy', object=['destroyer']), RelationSample(subject='determine', object=['determiner']), RelationSample(subject='develop', object=['developer']), RelationSample(subject='discover', object=['discoverer']), RelationSample(subject='eat', object=['eater']), RelationSample(subject='entertain', object=['entertainer']), RelationSample(subject='examine', object=['examiner']), RelationSample(subject='explore', object=['explorer']), RelationSample(subject='follow', object=['follower']), RelationSample(subject='interpret', object=['interpreter']), RelationSample(subject='intrude', object=['intruder']), RelationSample(subject='learn', object=['learner']), RelationSample(subject='listen', object=['listener']), RelationSample(subject='lose', object=['loser']), RelationSample(subject='manage', object=['manager']), RelationSample(subject='molest', object=['molester']), RelationSample(subject='mourn', object=['mourner']), RelationSample(subject='observe', object=['observer']), RelationSample(subject='offend', object=['offender']), RelationSample(subject='organise', object=['organiser']), RelationSample(subject='organize', object=['organizer']), RelationSample(subject='perform', object=['performer']), RelationSample(subject='preach', object=['preacher']), RelationSample(subject='promote', object=['promoter']), RelationSample(subject='provide', object=['provider']), RelationSample(subject='publish', object=['publisher']), RelationSample(subject='receive', object=['receiver']), RelationSample(subject='recommend', object=['recommender']), RelationSample(subject='send', object=['sender']), RelationSample(subject='skydive', object=['skydiver']), RelationSample(subject='slay', object=['slayer']), RelationSample(subject='speak', object=['speaker']), RelationSample(subject='subscribe', object=['subscriber']), RelationSample(subject='suffer', object=['sufferer']), RelationSample(subject='teach', object=['teacher']), RelationSample(subject='tell', object=['teller']), RelationSample(subject='write', object=['writer'])], _domain=None, _range=None)
2024-06-12 17:59:15 root INFO     starting operator prediction
2024-06-12 17:59:15 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you {} something, you are a)
2024-06-12 17:59:15 root INFO     [relation call] using If you {} something, you are a
2024-06-12 17:59:26 root INFO     total operator prediction time: 10.410655736923218 seconds
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' del'] matches ['achiever'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' del'] matches ['advertiser'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' del'] matches ['announcer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' do', ' m', ' person'] matches ['baker'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' del', ' do'] matches ['beginner'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['believer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['borrower'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['choreographer'] is False
2024-06-12 17:59:28 root INFO     ['\n', ' ', ' m', ' person', ' user'] matches ['composer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' user'] matches ['consumer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['contender'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' user'] matches ['defender'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' provider'] matches ['deliverer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['destroyer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' user'] matches ['determiner'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' person', ' m', ' del'] matches ['developer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' del', ' do'] matches ['discoverer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['eater'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' del', ' person'] matches ['entertainer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['examiner'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' del', ' user'] matches ['explorer'] is False
2024-06-12 17:59:28 root INFO     ['\n', ' ', ' m', ' former', ' do'] matches ['follower'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['interpreter'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['intruder'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' del', ' do'] matches ['learner'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['listener'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' provider'] matches ['loser'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' user'] matches ['manager'] is True
2024-06-12 17:59:28 root INFO     [' ', '\n', ' do', ' m', ' person'] matches ['molester'] is True
2024-06-12 17:59:28 root INFO     [' ', '\n', ' del', ' m', ' do'] matches ['mourner'] is True
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' del'] matches ['observer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['offender'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' person', ' provider', ' m'] matches ['organiser'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' person', ' provider', ' m'] matches ['organizer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' provider'] matches ['performer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['preacher'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['promoter'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['provider'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['publisher'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' user'] matches ['receiver'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['recommender'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['sender'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' provider', ' m', ' performer'] matches ['skydiver'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' del'] matches ['slayer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' del'] matches ['speaker'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' person', ' m', ' do'] matches ['subscriber'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' del', ' person'] matches ['sufferer'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' person', ' do'] matches ['teacher'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['teller'] is False
2024-06-12 17:59:28 root INFO     [' ', '\n', ' m', ' do', ' person'] matches ['writer'] is False
2024-06-12 17:59:28 root INFO     0.0verb+er_irreg (50) total: defaultdict(<class 'int'>, {False: 764, True: 185})
2024-06-12 17:59:28 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='verb+able_reg', prompt_templates=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], prompt_templates_zs=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], samples=[RelationSample(subject='accept', object=['acceptable']), RelationSample(subject='achieve', object=['achieveable']), RelationSample(subject='adapt', object=['adaptable']), RelationSample(subject='adjust', object=['adjustable']), RelationSample(subject='admire', object=['admirable']), RelationSample(subject='adore', object=['adorable']), RelationSample(subject='advise', object=['advisable']), RelationSample(subject='afford', object=['affordable']), RelationSample(subject='avoid', object=['avoidable']), RelationSample(subject='believe', object=['believeable', 'believable']), RelationSample(subject='consider', object=['considerable']), RelationSample(subject='contain', object=['containable']), RelationSample(subject='define', object=['definable']), RelationSample(subject='deliver', object=['deliverable']), RelationSample(subject='discover', object=['discoverable']), RelationSample(subject='dispose', object=['disposable']), RelationSample(subject='download', object=['downloadable']), RelationSample(subject='edit', object=['editable']), RelationSample(subject='enjoy', object=['enjoyable']), RelationSample(subject='execute', object=['executable']), RelationSample(subject='expand', object=['expandable']), RelationSample(subject='expect', object=['expectable']), RelationSample(subject='explain', object=['explainable']), RelationSample(subject='extend', object=['extendable']), RelationSample(subject='foresee', object=['foreseeable']), RelationSample(subject='identify', object=['identifiable']), RelationSample(subject='imagine', object=['imaginable']), RelationSample(subject='improve', object=['improvable']), RelationSample(subject='inflate', object=['inflatable']), RelationSample(subject='learn', object=['learnable']), RelationSample(subject='maintain', object=['maintainable']), RelationSample(subject='manage', object=['manageable']), RelationSample(subject='observe', object=['observable']), RelationSample(subject='perform', object=['performable']), RelationSample(subject='predict', object=['predictable']), RelationSample(subject='prefer', object=['preferable']), RelationSample(subject='prevent', object=['preventable']), RelationSample(subject='protect', object=['protectable']), RelationSample(subject='publish', object=['publishable']), RelationSample(subject='recognize', object=['recognizable', 'recognisable']), RelationSample(subject='recommend', object=['recommendable']), RelationSample(subject='rely', object=['reliable']), RelationSample(subject='renew', object=['renewable']), RelationSample(subject='replace', object=['replaceable']), RelationSample(subject='represent', object=['representable']), RelationSample(subject='survive', object=['survivable']), RelationSample(subject='sustain', object=['sustainable']), RelationSample(subject='understand', object=['understandable']), RelationSample(subject='vary', object=['variable']), RelationSample(subject='write', object=['writeable', 'writable'])], _domain=None, _range=None)
2024-06-12 17:59:30 root INFO     starting operator prediction
2024-06-12 17:59:30 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you can {} something, that thing is)
2024-06-12 17:59:30 root INFO     [relation call] using If you can {} something, that thing is
2024-06-12 17:59:41 root INFO     total operator prediction time: 10.808991193771362 seconds
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' able'] matches ['acceptable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' acceptable', ' '] matches ['achieveable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' feasible', ' '] matches ['adaptable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' able'] matches ['adjustable'] is True
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' ', ' a', '\n'] matches ['admirable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' a', '\n'] matches ['adorable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' suitable'] matches ['advisable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' acceptable'] matches ['affordable'] is True
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' ', ' possible'] matches ['avoidable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' a', ' ', ' manageable', '\n'] matches ['believeable', 'believable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' feasible'] matches ['considerable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' acceptable', ' a', ' '] matches ['containable'] is False
2024-06-12 17:59:44 root INFO     [' a', ' manageable', ' capable', ' ', ' acceptable'] matches ['definable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' feasible', ' '] matches ['deliverable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' possible'] matches ['discoverable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' able', ' a'] matches ['disposable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', '\n'] matches ['downloadable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' able', ' possible'] matches ['editable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' ', ' acceptable'] matches ['enjoyable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' able'] matches ['executable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' ', ' acceptable'] matches ['expandable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' a', ' manageable', ' ', ' to'] matches ['expectable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' a', ' feasible'] matches ['explainable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' possible'] matches ['extendable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' a', ' ', ' manageable', ' able'] matches ['foreseeable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' suitable'] matches ['identifiable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' a', ' ', ' manageable', ' possible'] matches ['imaginable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' ', ' a', ' acceptable'] matches ['improvable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' a', ' able'] matches ['inflatable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' ', ' acceptable'] matches ['learnable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' acceptable', ' '] matches ['maintainable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' acceptable', ' '] matches ['manageable'] is True
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' feasible'] matches ['observable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' acceptable', ' '] matches ['performable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' a', ' possible'] matches ['predictable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' ', ' acceptable'] matches ['preferable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' possible', ' a'] matches ['preventable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' a', ' possible'] matches ['protectable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' able'] matches ['publishable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' acceptable'] matches ['recognizable', 'recognisable'] is False
2024-06-12 17:59:44 root INFO     [' manageable', ' capable', ' a', ' ', ' suitable'] matches ['recommendable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' feasible'] matches ['reliable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' a', ' manageable', ' ', ' able'] matches ['renewable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' ', ' a', ' able'] matches ['replaceable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' feasible'] matches ['representable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' possible'] matches ['survivable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' acceptable'] matches ['sustainable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' feasible'] matches ['understandable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' acceptable'] matches ['variable'] is False
2024-06-12 17:59:44 root INFO     [' capable', ' manageable', ' a', ' ', ' acceptable'] matches ['writeable', 'writable'] is False
2024-06-12 17:59:44 root INFO     0.0verb+able_reg (50) total: defaultdict(<class 'int'>, {False: 804, True: 195})
2024-06-12 17:59:44 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - part', prompt_templates=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], prompt_templates_zs=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], samples=[RelationSample(subject='academia', object=['college', 'university', 'institute']), RelationSample(subject='apartment', object=['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room']), RelationSample(subject='bird', object=['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat']), RelationSample(subject='brush', object=['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem']), RelationSample(subject='bus', object=['seats', 'conductor', 'window', 'driver', 'roof']), RelationSample(subject='byte', object=['bit']), RelationSample(subject='car', object=['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system']), RelationSample(subject='castle', object=['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall']), RelationSample(subject='cat', object=['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth']), RelationSample(subject='chair', object=['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs']), RelationSample(subject='church', object=['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner']), RelationSample(subject='comb', object=['teeth', 'shaft', 'grip', 'tooth', 'handle']), RelationSample(subject='day', object=['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour']), RelationSample(subject='deer', object=['antler', 'antlers', 'withers', 'flag', 'scut']), RelationSample(subject='dollar', object=['cent']), RelationSample(subject='door', object=['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill']), RelationSample(subject='dress', object=['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener']), RelationSample(subject='filename', object=['extension', 'name']), RelationSample(subject='flower', object=['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium']), RelationSample(subject='gigabit', object=['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit']), RelationSample(subject='gramm', object=['milligram', 'mg', 'grain', 'milligram', 'mcg', 'carat', 'microgram', 'ng', 'dg', 'decigram', 'nanogram', 'metric_grain', 'obolus']), RelationSample(subject='guitar', object=['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard']), RelationSample(subject='gun', object=['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover']), RelationSample(subject='harbor', object=['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='jail', object=['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell']), RelationSample(subject='jewellery', object=['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel']), RelationSample(subject='litre', object=['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre']), RelationSample(subject='movie', object=['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption']), RelationSample(subject='orthography', object=['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling']), RelationSample(subject='piano', object=['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal']), RelationSample(subject='pie', object=['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing']), RelationSample(subject='poem', object=['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry']), RelationSample(subject='pub', object=['bar', 'barroom', 'taproom', 'saloon', 'ginmill']), RelationSample(subject='radio', object=['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set']), RelationSample(subject='railcar', object=['suspension', 'cushion', 'shock', 'shock_absorber', 'suspension_system']), RelationSample(subject='seafront', object=['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='shilling', object=['pence']), RelationSample(subject='shirt', object=['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button']), RelationSample(subject='sonata', object=['movement', 'part']), RelationSample(subject='staircase', object=['step', 'riser', 'landing', 'tread', 'stair', 'stairhead']), RelationSample(subject='sword', object=['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge']), RelationSample(subject='table', object=['tabletop', 'tableware', 'leg', 'legs']), RelationSample(subject='teapot', object=['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter']), RelationSample(subject='telephone', object=['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver']), RelationSample(subject='tonne', object=['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg']), RelationSample(subject='torso', object=['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end']), RelationSample(subject='tripod', object=['leg', 'stand']), RelationSample(subject='typewriter', object=['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer']), RelationSample(subject='window', object=['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame']), RelationSample(subject='womb', object=['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'])], _domain=None, _range=None)
2024-06-12 17:59:46 root INFO     starting operator prediction
2024-06-12 17:59:46 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A part of a {} is a)
2024-06-12 17:59:46 root INFO     [relation call] using A part of a {} is a
2024-06-12 17:59:55 root INFO     total operator prediction time: 9.281527757644653 seconds
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' part', ' a'] matches ['college', 'university', 'institute'] is False
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' c', ' a'] matches ['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' ch', ' t', ' fl'] matches ['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat'] is True
2024-06-12 17:59:58 root INFO     [' p', ' head', ' t', ' body', ' f'] matches ['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem'] is True
2024-06-12 17:59:58 root INFO     [' body', ' p', ' t', ' a', ' m'] matches ['seats', 'conductor', 'window', 'driver', 'roof'] is False
2024-06-12 17:59:58 root INFO     [' body', ' frame', ' t', ' p', ' d'] matches ['bit'] is False
2024-06-12 17:59:58 root INFO     [' body', ' p', ' t', ' frame', ' seat'] matches ['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' foot', ' a'] matches ['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' m', ' c'] matches ['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' frame', ' foot'] matches ['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' frame', ' a'] matches ['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner'] is True
2024-06-12 17:59:58 root INFO     [' t', ' a', ' part', ' head', ' set'] matches ['teeth', 'shaft', 'grip', 'tooth', 'handle'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' frame', ' t', ' ch'] matches ['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour'] is True
2024-06-12 17:59:58 root INFO     [' p', ' t', ' frame', ' body', ' a'] matches ['cent'] is False
2024-06-12 17:59:58 root INFO     [' body', ' frame', ' p', ' t', ' handle'] matches ['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill'] is True
2024-06-12 17:59:58 root INFO     [' t', ' body', ' p', ' head', ' c'] matches ['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener'] is True
2024-06-12 17:59:58 root INFO     [' t', ' d', ' p', ' body', ' a'] matches ['extension', 'name'] is False
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' m', ' c'] matches ['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium'] is True
2024-06-12 17:59:58 root INFO     [' p', ' t', ' body', ' c', ' head'] matches ['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' a', ' head'] matches ['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover'] is True
2024-06-12 17:59:58 root INFO     [' p', ' t', ' body', ' m', ' a'] matches ['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' f', ' head'] matches ['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell'] is True
2024-06-12 17:59:58 root INFO     [' t', ' p', ' piece', ' body', ' a'] matches ['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' c', ' f'] matches ['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre'] is True
2024-06-12 17:59:58 root INFO     [' body', ' frame', ' p', ' t', ' m'] matches ['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption'] is False
2024-06-12 17:59:58 root INFO     [' p', ' c', ' t', ' frame', ' body'] matches ['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' frame', ' part'] matches ['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' a', ' c'] matches ['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' c', ' m'] matches ['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry'] is True
2024-06-12 17:59:58 root INFO     [' a', ' t', ' p', ' body', ' c'] matches ['bar', 'barroom', 'taproom', 'saloon', 'ginmill'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' head', ' m'] matches ['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set'] is True
2024-06-12 17:59:58 root INFO     [' p', ' t', ' ch', ' body', ' m'] matches ['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is False
2024-06-12 17:59:58 root INFO     [' p', ' t', ' a', ' piece', ' body'] matches ['pence'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' c', ' frame'] matches ['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' m', ' piece'] matches ['movement', 'part'] is True
2024-06-12 17:59:58 root INFO     [' p', ' t', ' c', ' body', ' m'] matches ['step', 'riser', 'landing', 'tread', 'stair', 'stairhead'] is True
2024-06-12 17:59:58 root INFO     [' body', ' p', ' t', ' f', ' c'] matches ['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' head', ' p', ' foot'] matches ['tabletop', 'tableware', 'leg', 'legs'] is True
2024-06-12 17:59:58 root INFO     [' p', ' t', ' body', ' part', ' ch'] matches ['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter'] is True
2024-06-12 17:59:58 root INFO     [' p', ' body', ' t', ' frame', ' a'] matches ['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver'] is True
2024-06-12 17:59:58 root INFO     [' body', ' t', ' p', ' head', ' m'] matches ['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg'] is True
2024-06-12 17:59:58 root INFO     [' body', ' p', ' t', ' piece', ' frame'] matches ['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end'] is True
2024-06-12 17:59:58 root INFO     [' t', ' foot', ' head', ' p', ' frame'] matches ['leg', 'stand'] is False
2024-06-12 17:59:58 root INFO     [' t', ' p', ' body', ' part', ' a'] matches ['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer'] is True
2024-06-12 17:59:58 root INFO     [' body', ' p', ' frame', ' t', ' m'] matches ['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame'] is True
2024-06-12 17:59:58 root INFO     [' body', ' p', ' t', ' a', ' st'] matches ['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'] is True
2024-06-12 17:59:58 root INFO     0.0meronyms - part (50) total: defaultdict(<class 'int'>, {False: 812, True: 233})
2024-06-12 17:59:58 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='synonyms - exact', prompt_templates=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], prompt_templates_zs=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], samples=[RelationSample(subject='airplane', object=['aeroplane', 'plane']), RelationSample(subject='auto', object=['car', 'automobile', 'motorcar']), RelationSample(subject='baby', object=['infant', 'babe']), RelationSample(subject='bicycle', object=['bike', 'wheel', 'cycle']), RelationSample(subject='child', object=['kid', 'youngster', 'minor', 'shaver', 'nipper', 'small_fry', 'tiddler', 'tike', 'tyke', 'fry', 'nestling']), RelationSample(subject='cloth', object=['fabric', 'material', 'textile']), RelationSample(subject='clothes', object=['clothing', 'apparel', 'dress']), RelationSample(subject='confused', object=['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up']), RelationSample(subject='dollars', object=['bucks']), RelationSample(subject='emphasis', object=['accent', 'accentuaion', 'importance', 'stress', 'significance']), RelationSample(subject='father', object=['dad', 'daddy']), RelationSample(subject='flower', object=['blossom', 'bloom']), RelationSample(subject='harbor', object=['seaport', 'haven', 'harbour']), RelationSample(subject='help', object=['aid', 'assist']), RelationSample(subject='hieroglyph', object=['hieroglyphic', 'pictogram']), RelationSample(subject='homogeneous', object=['uniform', 'unvarying']), RelationSample(subject='honest', object=['sincere', 'ingenuous', 'true', 'direct', 'truthful']), RelationSample(subject='identical', object=['same', 'indistinguishable']), RelationSample(subject='incorrect', object=['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false']), RelationSample(subject='intelligent', object=['clever', 'smart']), RelationSample(subject='jewel', object=['gem', 'stone']), RelationSample(subject='lad', object=['chap', 'fellow', 'feller', 'fella', 'gent', 'blighter', 'cuss', 'bloke']), RelationSample(subject='lady', object=['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman']), RelationSample(subject='lazy', object=['indolent', 'faineant', 'otiose', 'slothful', 'work-shy']), RelationSample(subject='list', object=['listing', 'enumeration']), RelationSample(subject='loyal', object=['faithful', 'true', 'dependable', 'devoted', 'reliable']), RelationSample(subject='market', object=['marketplace', 'mart', 'bazaar']), RelationSample(subject='mend', object=['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning']), RelationSample(subject='mesh', object=['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork']), RelationSample(subject='monument', object=['memorial']), RelationSample(subject='mother', object=['mom', 'mommy', 'mum']), RelationSample(subject='murder', object=['slaying', 'slay', 'execution']), RelationSample(subject='new', object=['modern', 'recent']), RelationSample(subject='obsolete', object=['outdated', 'out-of-date', 'superannuated']), RelationSample(subject='organized', object=['arranged', 'configured', 'corporate', 'incorporated', 're-formed', 'reorganized', 'reorganised']), RelationSample(subject='package', object=['parcel', 'pack', 'packet', 'bundle']), RelationSample(subject='phone', object=['telephone', 'cell', 'cellphone', 'smartphone']), RelationSample(subject='portion', object=['part', 'component_part', 'component', 'constituent']), RelationSample(subject='railway', object=['railroad']), RelationSample(subject='rational', object=['logical', 'coherent', 'reasonable', 'sane']), RelationSample(subject='reasonable', object=['sensible']), RelationSample(subject='rock', object=['stone']), RelationSample(subject='shore', object=['coast', 'strand', 'bank', 'beach', '']), RelationSample(subject='snake', object=['serpent', 'ophidian']), RelationSample(subject='sofa', object=['couch', 'lounge']), RelationSample(subject='spouse', object=['partner', 'mate', 'better_half']), RelationSample(subject='style', object=['manner', 'mode', 'fashion', 'way']), RelationSample(subject='sweets', object=['confectionery', 'dessert', 'confection']), RelationSample(subject='villain', object=['scoundrel', 'rascal']), RelationSample(subject='vocabulary', object=['lexicon', 'wordbook', 'dictionary', 'glossary'])], _domain=None, _range=None)
2024-06-12 18:00:00 root INFO     starting operator prediction
2024-06-12 18:00:00 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Another word for {} is )
2024-06-12 18:00:00 root INFO     [relation call] using Another word for {} is 
2024-06-12 18:00:09 root INFO     total operator prediction time: 8.758907794952393 seconds
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' g'] matches ['aeroplane', 'plane'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' c'] matches ['car', 'automobile', 'motorcar'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' g', ' p'] matches ['infant', 'babe'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' g', ' p'] matches ['bike', 'wheel', 'cycle'] is False
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' c', ' l'] matches ['fabric', 'material', 'textile'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' c'] matches ['clothing', 'apparel', 'dress'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' g'] matches ['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' g', ' in'] matches ['accent', 'accentuaion', 'importance', 'stress', 'significance'] is False
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' l', ' p'] matches ['dad', 'daddy'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' p', ' g'] matches ['blossom', 'bloom'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' a', ' p'] matches ['seaport', 'haven', 'harbour'] is False
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' g', ' in'] matches ['aid', 'assist'] is False
2024-06-12 18:00:11 root INFO     [' m', ' ', ' g', ' d', ' c'] matches ['hieroglyphic', 'pictogram'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' p', ' c'] matches ['uniform', 'unvarying'] is False
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' ch', ' f'] matches ['sincere', 'ingenuous', 'true', 'direct', 'truthful'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' l'] matches ['same', 'indistinguishable'] is False
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' c', ' l'] matches ['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false'] is True
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' p', ' g'] matches ['clever', 'smart'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' g', ' p'] matches ['gem', 'stone'] is True
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' p', ' g'] matches ['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman'] is True
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' g', ' in'] matches ['indolent', 'faineant', 'otiose', 'slothful', 'work-shy'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' a'] matches ['listing', 'enumeration'] is False
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' p', ' f'] matches ['faithful', 'true', 'dependable', 'devoted', 'reliable'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' l', ' a'] matches ['marketplace', 'mart', 'bazaar'] is True
2024-06-12 18:00:11 root INFO     [' d', ' ', ' m', ' g', ' l'] matches ['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning'] is True
2024-06-12 18:00:11 root INFO     [' ', ' m', ' d', ' g', ' p'] matches ['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' in', ' a'] matches ['memorial'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' l', ' p'] matches ['mom', 'mommy', 'mum'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' p', ' c'] matches ['modern', 'recent'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' l', ' c'] matches ['outdated', 'out-of-date', 'superannuated'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' g', ' a'] matches ['arranged', 'configured', 'corporate', 'incorporated', 're-formed', 'reorganized', 'reorganised'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' l'] matches ['parcel', 'pack', 'packet', 'bundle'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' p', ' l'] matches ['telephone', 'cell', 'cellphone', 'smartphone'] is False
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' p', ' g'] matches ['railroad'] is False
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' p', ' t'] matches ['logical', 'coherent', 'reasonable', 'sane'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' f', ' a'] matches ['stone'] is False
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' l', ' g'] matches ['coast', 'strand', 'bank', 'beach', ''] is False
2024-06-12 18:00:11 root INFO     [' d', ' m', ' ', ' c', ' g'] matches ['serpent', 'ophidian'] is False
2024-06-12 18:00:11 root INFO     [' ', ' d', ' m', ' c', ' a'] matches ['couch', 'lounge'] is True
2024-06-12 18:00:11 root INFO     [' m', ' ', ' d', ' l', ' c'] matches ['partner', 'mate', 'better_half'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' p', ' g'] matches ['manner', 'mode', 'fashion', 'way'] is True
2024-06-12 18:00:11 root INFO     [' ', ' d', ' m', ' p', ' c'] matches ['confectionery', 'dessert', 'confection'] is True
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' p', ' g'] matches ['scoundrel', 'rascal'] is False
2024-06-12 18:00:11 root INFO     [' m', ' d', ' ', ' l', ' p'] matches ['lexicon', 'wordbook', 'dictionary', 'glossary'] is True
2024-06-12 18:00:11 root INFO     0.0synonyms - exact (50) total: defaultdict(<class 'int'>, {False: 831, True: 258})
2024-06-12 18:00:11 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='synonyms - intensity', prompt_templates=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], prompt_templates_zs=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], samples=[RelationSample(subject='afraid', object=['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky']), RelationSample(subject='angry', object=['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething']), RelationSample(subject='ask', object=['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist']), RelationSample(subject='bad', object=['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable']), RelationSample(subject='boring', object=['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome']), RelationSample(subject='cat', object=['lion', 'tiger', 'leopard', 'panther', 'jaguar']), RelationSample(subject='chuckle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='confused', object=['lost', 'bewildered', 'trapped', 'desperate']), RelationSample(subject='creative', object=['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative']), RelationSample(subject='cry', object=['scream', 'shriek', 'screech', 'screeching']), RelationSample(subject='damp', object=['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet']), RelationSample(subject='dinner', object=['feast', 'banquet', 'fiesta']), RelationSample(subject='dislike', object=['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain']), RelationSample(subject='doze', object=['sleep', 'slumber']), RelationSample(subject='drizzle', object=['rain', 'shower', 'raifall', 'deluge']), RelationSample(subject='excited', object=['agitated', 'nervous']), RelationSample(subject='faith', object=['fanatism', 'fanaticism', 'zealotry']), RelationSample(subject='giggle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='guilty', object=['remorseful', 'sorrowful', 'unworthy']), RelationSample(subject='happy', object=['ecstatic', 'enraptured', 'rapturous', 'rapt', 'rhapsodic']), RelationSample(subject='house', object=['palace', 'castle']), RelationSample(subject='hungry', object=['starving', 'famished', 'peckish', 'ravenous', 'starved']), RelationSample(subject='indulge', object=['pamper', 'spoil', 'coddle']), RelationSample(subject='interesting', object=['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling']), RelationSample(subject='irritate', object=['enrage', 'incense', 'infuriate', 'ire', 'mad', 'madden', 'steam', 'umbrage']), RelationSample(subject='jog', object=['run', 'scarper', 'flee', 'fly']), RelationSample(subject='lake', object=['sea', 'ocean']), RelationSample(subject='like', object=['love', 'care', 'fond', 'crush', 'infatuate']), RelationSample(subject='love', object=['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere']), RelationSample(subject='monkey', object=['gorilla']), RelationSample(subject='nap', object=['sleep', 'slumber']), RelationSample(subject='necessary', object=['essential', 'indispensable', 'vital', 'required']), RelationSample(subject='opposed', object=['averse', 'antipathetic', 'antipathetical', 'indisposed', 'loath', 'loth']), RelationSample(subject='pain', object=['torment', 'torture', 'agony']), RelationSample(subject='pony', object=['horse']), RelationSample(subject='poorly', object=['afflicted', 'sick', 'ill', 'stricken']), RelationSample(subject='rain', object=['deluge', 'shower']), RelationSample(subject='sad', object=['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy']), RelationSample(subject='sea', object=['ocean']), RelationSample(subject='snack', object=['meal', 'eat']), RelationSample(subject='sniffles', object=['pneumonia']), RelationSample(subject='soon', object=['immediately', 'promptly', 'straightaway']), RelationSample(subject='strong', object=['powerful', 'forceful', 'super', 'potent']), RelationSample(subject='tasty', object=['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly']), RelationSample(subject='tired', object=['exhausted', 'drained']), RelationSample(subject='unfortunate', object=['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous']), RelationSample(subject='unhappy', object=['miserable', 'suffering', 'wretched']), RelationSample(subject='want', object=['crave', 'hunger', 'thirst', 'starve', 'lust']), RelationSample(subject='warm', object=['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot']), RelationSample(subject='well', object=['flourishing', 'robust', 'booming', 'prospering', 'prosperous', 'thriving'])], _domain=None, _range=None)
2024-06-12 18:00:13 root INFO     starting operator prediction
2024-06-12 18:00:13 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more intense word for {} is )
2024-06-12 18:00:13 root INFO     [relation call] using A more intense word for {} is 
2024-06-12 18:00:24 root INFO     total operator prediction time: 10.137354373931885 seconds
2024-06-12 18:00:26 root INFO     [' m', ' ', ' d', ' g', ' p'] matches ['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky'] is True
2024-06-12 18:00:26 root INFO     [' m', ' d', ' g', ' ', ' p'] matches ['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething'] is False
2024-06-12 18:00:26 root INFO     [' a', ' m', ' ', ' d', ' g'] matches ['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable'] is True
2024-06-12 18:00:26 root INFO     [' a', ' d', ' m', ' ', ' g'] matches ['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' d', ' a', ' g'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' g', ' d', ' a'] matches ['lost', 'bewildered', 'trapped', 'desperate'] is True
2024-06-12 18:00:26 root INFO     [' a', ' d', ' m', ' ', ' g'] matches ['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative'] is True
2024-06-12 18:00:26 root INFO     [' m', ' g', ' a', ' ', ' d'] matches ['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' p', ' d', ' a'] matches ['feast', 'banquet', 'fiesta'] is False
2024-06-12 18:00:26 root INFO     [' m', ' ', ' a', ' g', ' d'] matches ['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain'] is True
2024-06-12 18:00:26 root INFO     [' ', ' m', ' d', ' a', ' l'] matches ['sleep', 'slumber'] is False
2024-06-12 18:00:26 root INFO     [' m', ' a', ' ', ' d', ' f'] matches ['rain', 'shower', 'raifall', 'deluge'] is True
2024-06-12 18:00:26 root INFO     [' d', ' ', ' g', ' m', ' a'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is True
2024-06-12 18:00:26 root INFO     [' d', ' ', ' a', ' m', ' p'] matches ['remorseful', 'sorrowful', 'unworthy'] is False
2024-06-12 18:00:26 root INFO     [' d', ' m', ' ', ' p', ' g'] matches ['starving', 'famished', 'peckish', 'ravenous', 'starved'] is True
2024-06-12 18:00:26 root INFO     [' a', ' m', ' ', ' d', ' g'] matches ['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling'] is True
2024-06-12 18:00:26 root INFO     [' a', ' d', ' ', ' g', ' m'] matches ['run', 'scarper', 'flee', 'fly'] is False
2024-06-12 18:00:26 root INFO     [' m', ' a', ' ', ' d', ' g'] matches ['sea', 'ocean'] is False
2024-06-12 18:00:26 root INFO     [' a', ' m', ' ', ' d', ' g'] matches ['love', 'care', 'fond', 'crush', 'infatuate'] is False
2024-06-12 18:00:26 root INFO     [' ', ' a', ' m', ' d', ' g'] matches ['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' a', ' g', ' d'] matches ['sleep', 'slumber'] is False
2024-06-12 18:00:26 root INFO     [' ', ' a', ' m', ' d', ' g'] matches ['essential', 'indispensable', 'vital', 'required'] is False
2024-06-12 18:00:26 root INFO     [' ', ' a', ' g', ' m', ' p'] matches ['torment', 'torture', 'agony'] is True
2024-06-12 18:00:26 root INFO     [' m', ' d', ' ', ' a', ' g'] matches ['horse'] is False
2024-06-12 18:00:26 root INFO     [' m', ' a', ' d', ' ', ' g'] matches ['afflicted', 'sick', 'ill', 'stricken'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' p', ' g', ' a'] matches ['deluge', 'shower'] is False
2024-06-12 18:00:26 root INFO     [' m', ' a', ' p', ' ', ' g'] matches ['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy'] is True
2024-06-12 18:00:26 root INFO     [' ', ' m', ' a', ' l', ' d'] matches ['ocean'] is False
2024-06-12 18:00:26 root INFO     [' m', ' ', ' a', ' d', ' p'] matches ['immediately', 'promptly', 'straightaway'] is True
2024-06-12 18:00:26 root INFO     [' d', ' a', ' g', ' m', ' p'] matches ['powerful', 'forceful', 'super', 'potent'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' a', ' d', ' p'] matches ['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly'] is True
2024-06-12 18:00:26 root INFO     [' g', ' d', ' m', ' ', ' a'] matches ['exhausted', 'drained'] is True
2024-06-12 18:00:26 root INFO     [' ', ' m', ' g', ' a', ' d'] matches ['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous'] is True
2024-06-12 18:00:26 root INFO     [' m', ' ', ' d', ' a', ' g'] matches ['miserable', 'suffering', 'wretched'] is True
2024-06-12 18:00:26 root INFO     [' a', ' m', ' ', ' p', ' d'] matches ['crave', 'hunger', 'thirst', 'starve', 'lust'] is False
2024-06-12 18:00:26 root INFO     [' ', ' a', ' p', ' g', ' d'] matches ['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot'] is False
2024-06-12 18:00:26 root INFO     0.0synonyms - intensity (50) total: defaultdict(<class 'int'>, {False: 845, True: 280})
2024-06-12 18:00:26 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hypernyms - misc', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='armchair', object=['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='blender', object=['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='bracelet', object=['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='brooch', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', '']), RelationSample(subject='cake', object=['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity']), RelationSample(subject='computer', object=['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', '']), RelationSample(subject='croissant', object=['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity']), RelationSample(subject='cup', object=['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container']), RelationSample(subject='denim', object=['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='deodorant', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='desk', object=['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='diary', object=['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dishwasher', object=['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dress', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='fridge', object=['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='gasoline', object=['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity']), RelationSample(subject='grapefruit', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='hairnet', object=['net', 'network', 'mesh', 'meshing', 'meshwork', 'fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hairpin', object=['pin', 'fastener', 'fastening', 'holdfast', 'fixing', 'restraint', 'constraint', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hamburger', object=['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='jacket', object=['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='jeans', object=['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='juicer', object=['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='lemon', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='lotion', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='mascara', object=['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='necklace', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notebook', object=['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notepad', object=['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity']), RelationSample(subject='pastry', object=['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='peach', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='perfume', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='photo', object=['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='pie', object=['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='plum', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='postcard', object=['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='shelf', object=['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='shirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sidewalk', object=['walk', 'walkway', 'paseo', 'path', 'way', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='skirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sofa', object=['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='stapler', object=['device', 'machine', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sunscreen', object=['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sweater', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='toaster', object=['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='toothbrush', object=['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tub', object=['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tv', object=['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='vase', object=['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='wristband', object=['band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'])], _domain=None, _range=None)
2024-06-12 18:00:28 root INFO     starting operator prediction
2024-06-12 18:00:28 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-12 18:00:28 root INFO     [relation call] using The {} falls into the category of
2024-06-12 18:00:38 root INFO     total operator prediction time: 9.254398584365845 seconds
2024-06-12 18:00:40 root INFO     [' furniture', '\n', ' item', ' appliance', ' clothing'] matches ['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     ['\n', ' food', ' device', ' appliance', ' furniture'] matches ['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' device', '\n', ' item', ' article', ' appliance'] matches ['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' clothes', ' device', ' appliance', ' item', ' article'] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', ''] is False
2024-06-12 18:00:40 root INFO     ['\n', ' device', ' food', ' appliance', ' item'] matches ['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' device', ' appliance', ' equipment', ' item', '\n'] matches ['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', ''] is True
2024-06-12 18:00:40 root INFO     ['\n', ' food', ' item', ' device', ' '] matches ['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' item', ' article', ' appliance', ' device', '\n'] matches ['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container'] is True
2024-06-12 18:00:40 root INFO     [' item', ' clothes', '\n', ' ', ' clothing'] matches ['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' appliance', ' device', ' food', ' clothes'] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' item', '\n', ' appliance', ' article', ' accessory'] matches ['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' item', '\n', ' device', ' food', ' article'] matches ['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     ['\n', ' food', ' appliance', ' device', ' clothes'] matches ['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' clothes', ' item', '\n', ' clothing', ' appliance'] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 18:00:40 root INFO     ['\n', ' food', ' item', ' appliance', ' device'] matches ['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' appliance', ' item', ' device', ' accessory'] matches ['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity'] is False
2024-06-12 18:00:40 root INFO     [' appliance', '\n', ' item', ' device', ' clothing'] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-12 18:00:40 root INFO     [' item', ' appliance', ' device', '\n', ' clothes'] matches ['pin', 'fastener', 'fastening', 'holdfast', 'fixing', 'restraint', 'constraint', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' device', ' item', '\n', ' food', ' appliance'] matches ['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' item', '\n', ' clothes', ' appliance', ' accessory'] matches ['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 18:00:40 root INFO     [' item', '\n', ' clothes', ' ', ' appliance'] matches ['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 18:00:40 root INFO     ['\n', ' device', ' appliance', ' food', ' equipment'] matches ['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' appliance', ' food', '\n', ' item', ' device'] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' item', ' device', ' ', ' appliance'] matches ['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     ['\n', ' device', ' appliance', ' item', ' article'] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' device', ' item', ' appliance', ' accessory', '\n'] matches ['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' item', ' food', ' device', '\n', ' appliance'] matches ['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity'] is False
2024-06-12 18:00:40 root INFO     [' item', ' food', '\n', ' device', ' goods'] matches ['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' item', ' food', ' appliance', ' device'] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' device', ' item', ' article', ' appliance'] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' item', ' device', ' article', '\n', ' appliance'] matches ['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' item', ' article', '\n', ' appliance', ' food'] matches ['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' food', ' device', ' item', ' article', '\n'] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is True
2024-06-12 18:00:40 root INFO     [' appliance', ' device', '\n', ' furniture', ' item'] matches ['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' item', ' food', ' appliance', '\n', ' device'] matches ['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     ['\n', ' device', ' item', ' appliance', ' '] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is False
2024-06-12 18:00:40 root INFO     [' clothes', '\n', ' device', ' item', ' food'] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 18:00:40 root INFO     [' appliance', '\n', ' item', ' device', ' furniture'] matches ['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' device', ' item', ' clothes', ' '] matches ['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     ['\n', ' appliance', ' item', ' device', ' clothes'] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-12 18:00:40 root INFO     [' appliance', ' device', '\n', ' food', ' item'] matches ['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     [' item', ' appliance', '\n', ' device', ' furniture'] matches ['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     [' device', ' item', ' appliance', '\n', ' food'] matches ['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-12 18:00:40 root INFO     ['\n', ' item', ' device', ' appliance', ' furniture'] matches ['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-12 18:00:40 root INFO     0.0hypernyms - misc (50) total: defaultdict(<class 'int'>, {False: 864, True: 305})
2024-06-12 18:00:40 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hyponyms - misc', prompt_templates=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], prompt_templates_zs=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], samples=[RelationSample(subject='backpack', object=['daypack', 'kitbag', 'kit_bag']), RelationSample(subject='bag', object=['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag']), RelationSample(subject='bed', object=['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble']), RelationSample(subject='boat', object=['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat']), RelationSample(subject='book', object=['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook']), RelationSample(subject='brush', object=['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush']), RelationSample(subject='burger', object=['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger']), RelationSample(subject='camera', object=['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera']), RelationSample(subject='candy', object=['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg']), RelationSample(subject='car', object=['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand']), RelationSample(subject='church', object=['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk']), RelationSample(subject='citrus', object=['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu']), RelationSample(subject='cloud', object=['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke']), RelationSample(subject='collar', object=['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece']), RelationSample(subject='color', object=['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown']), RelationSample(subject='computer', object=['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad']), RelationSample(subject='container', object=['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag']), RelationSample(subject='cookware', object=['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner']), RelationSample(subject='cup', object=['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail']), RelationSample(subject='cushion', object=['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat']), RelationSample(subject='cutlery', object=['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork']), RelationSample(subject='dessert', object=['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice']), RelationSample(subject='dress', object=['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress']), RelationSample(subject='drum', object=['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka']), RelationSample(subject='emotion', object=['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy']), RelationSample(subject='flask', object=['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask']), RelationSample(subject='guitar', object=['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke']), RelationSample(subject='gun', object=['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling']), RelationSample(subject='jewel', object=['diamond', 'ruby', 'pearl', 'emerald', 'sapphire']), RelationSample(subject='jewelry', object=['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst']), RelationSample(subject='mixer', object=['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk']), RelationSample(subject='month', object=['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']), RelationSample(subject='oven', object=['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor']), RelationSample(subject='painting', object=['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti']), RelationSample(subject='poem', object=['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle']), RelationSample(subject='railway', object=['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail']), RelationSample(subject='season', object=['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek']), RelationSample(subject='seat', object=['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet']), RelationSample(subject='shelf', object=['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm']), RelationSample(subject='shirt', object=['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt']), RelationSample(subject='shoes', object=['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled']), RelationSample(subject='sofa', object=['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab']), RelationSample(subject='song', object=['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song']), RelationSample(subject='spice', object=['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed']), RelationSample(subject='sweater', object=['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck']), RelationSample(subject='tool', object=['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage']), RelationSample(subject='toy', object=['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo']), RelationSample(subject='trousers', object=['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen']), RelationSample(subject='weapon', object=['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire']), RelationSample(subject='weekday', object=['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'])], _domain=None, _range=None)
2024-06-12 18:00:42 root INFO     starting operator prediction
2024-06-12 18:00:42 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more specific term for a {} is)
2024-06-12 18:00:42 root INFO     [relation call] using A more specific term for a {} is
2024-06-12 18:00:53 root INFO     total operator prediction time: 10.448748111724854 seconds
2024-06-12 18:00:55 root INFO     [' t', ' p', ' a', ' d', ' m'] matches ['daypack', 'kitbag', 'kit_bag'] is True
2024-06-12 18:00:55 root INFO     [' t', ' p', ' d', ' a', ' b'] matches ['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' c', ' d', ' p'] matches ['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble'] is True
2024-06-12 18:00:55 root INFO     [' m', ' t', ' p', ' c', ' a'] matches ['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' m', ' k', ' p'] matches ['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook'] is True
2024-06-12 18:00:55 root INFO     [' t', ' d', ' p', ' a', ' c'] matches ['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush'] is True
2024-06-12 18:00:55 root INFO     [' p', ' d', ' t', ' m', ' a'] matches ['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger'] is True
2024-06-12 18:00:55 root INFO     [' t', ' d', ' p', ' m', ' a'] matches ['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera'] is True
2024-06-12 18:00:55 root INFO     [' p', ' m', ' d', ' t', ' a'] matches ['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' p', ' m', ' d'] matches ['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' m', ' p', ' d'] matches ['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' d', ' m', ' j'] matches ['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' p', ' b', ' m'] matches ['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke'] is True
2024-06-12 18:00:55 root INFO     [' t', ' m', ' a', ' p', ' ch'] matches ['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece'] is True
2024-06-12 18:00:55 root INFO     [' t', ' d', ' c', ' j', ' a'] matches ['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown'] is True
2024-06-12 18:00:55 root INFO     [' a', ' t', ' d', ' j', ' p'] matches ['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad'] is True
2024-06-12 18:00:55 root INFO     [' t', ' d', ' a', ' p', ' j'] matches ['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag'] is True
2024-06-12 18:00:55 root INFO     [' a', ' t', ' d', ' m', ' p'] matches ['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner'] is True
2024-06-12 18:00:55 root INFO     [' t', ' d', ' a', ' b', ' j'] matches ['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' p', ' b', ' m'] matches ['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' d', ' p', ' k'] matches ['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork'] is True
2024-06-12 18:00:55 root INFO     [' t', ' p', ' c', ' a', ' d'] matches ['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' m', ' p', ' b'] matches ['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' d', ' m', ' b'] matches ['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy'] is True
2024-06-12 18:00:55 root INFO     [' t', ' d', ' a', ' m', ' ch'] matches ['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask'] is True
2024-06-12 18:00:55 root INFO     [' t', ' p', ' k', ' a', ' c'] matches ['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' p', ' k', ' m'] matches ['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' p', ' m', ' c'] matches ['diamond', 'ruby', 'pearl', 'emerald', 'sapphire'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' p', ' c', ' d'] matches ['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' d', ' p', ' k'] matches ['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk'] is False
2024-06-12 18:00:55 root INFO     [' t', ' p', ' a', ' m', ' k'] matches ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' m', ' k', ' d'] matches ['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' k', ' m', ' c'] matches ['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle'] is True
2024-06-12 18:00:55 root INFO     [' t', ' m', ' p', ' a', ' c'] matches ['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' c', ' b', ' k'] matches ['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' c', ' k', ' d'] matches ['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm'] is True
2024-06-12 18:00:55 root INFO     [' t', ' p', ' d', ' k', ' c'] matches ['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt'] is True
2024-06-12 18:00:55 root INFO     [' t', ' p', ' a', ' d', ' b'] matches ['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' c', ' b', ' d'] matches ['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab'] is True
2024-06-12 18:00:55 root INFO     [' t', ' m', ' k', ' j', ' p'] matches ['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song'] is True
2024-06-12 18:00:55 root INFO     [' t', ' m', ' c', ' p', ' a'] matches ['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' d', ' p', ' k'] matches ['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck'] is True
2024-06-12 18:00:55 root INFO     [' p', ' d', ' a', ' t', ' k'] matches ['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage'] is True
2024-06-12 18:00:55 root INFO     [' d', ' p', ' a', ' t', ' m'] matches ['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo'] is True
2024-06-12 18:00:55 root INFO     [' a', ' t', ' p', ' d', ' m'] matches ['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' m', ' p', ' k'] matches ['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire'] is True
2024-06-12 18:00:55 root INFO     [' t', ' a', ' m', ' k', ' d'] matches ['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'] is True
2024-06-12 18:00:55 root INFO     0.0hyponyms - misc (50) total: defaultdict(<class 'int'>, {False: 865, True: 351})
2024-06-12 18:00:55 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='hypernyms - animals', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='allosaurus', object=['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='anaconda', object=['snake', 'reptile', 'boa', 'serpent', 'ophidian']), RelationSample(subject='ant', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing']), RelationSample(subject='beaver', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='bee', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing']), RelationSample(subject='beetle', object=['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing']), RelationSample(subject='buffalo', object=['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='butterfly', object=['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing']), RelationSample(subject='cat', object=['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', '']), RelationSample(subject='chicken', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='chimpanzee', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='chinchilla', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='cobra', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='cockroach', object=['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing']), RelationSample(subject='cow', object=['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='coyote', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='deer', object=['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='dog', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='duck', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='eagle', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='falcon', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='fox', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='gibbon', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='goat', object=['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='goose', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='gorilla', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='hawk', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='human', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='jackal', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='jaguar', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='leopard', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='lion', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='mamba', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='mouse', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='orangutan', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='owl', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='pony', object=['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus']), RelationSample(subject='porcupine', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='quail', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='rattlesnake', object=['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian']), RelationSample(subject='squirrel', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='stegosaurus', object=['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='tiger', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='triceratops', object=['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='turkey', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='tyrannosaurus', object=['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='velociraptor', object=['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='viper', object=['snake', 'reptile', 'snake', 'serpent', 'ophidian']), RelationSample(subject='vulture', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='wolf', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'])], _domain=None, _range=None)
2024-06-12 18:00:57 root INFO     starting operator prediction
2024-06-12 18:00:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-12 18:00:57 root INFO     [relation call] using The {} falls into the category of
2024-06-12 18:01:08 root INFO     total operator prediction time: 10.25014042854309 seconds
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' rept', '\n', ' animal'] matches ['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' predator', '\n', ' insect'] matches ['snake', 'reptile', 'boa', 'serpent', 'ophidian'] is False
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' insect', ' mammal', ' carniv'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' insect'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' mammal', '\n'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', ' insect', '\n'] matches ['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' rept'] matches ['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' animal', ' mammal', ' carniv'] matches ['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' animal', ' ', ' carniv'] matches ['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' ', '\n', ' pr'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' mammal', '\n'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' mammal', '\n'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', ' insect', '\n'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is False
2024-06-12 18:01:10 root INFO     [' f', '\n', ' animal', ' carniv', ' insect'] matches ['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', '\n', ' mammalian', ' mammal'] matches ['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' animal', ' carniv', ' predator'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' mammal'] matches ['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', ' mammal', '\n'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' mammal'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', '\n', ' pr', ' '] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' insect', '\n'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' predator', '\n'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' animal', ' mammal', ' carniv'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', ' mammal', '\n'] matches ['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', '\n', ' carniv', ' '] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', '\n', ' animal', ' mammal'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' insect', ' carniv', ' animal', '\n'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' insect', ' rept'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' pr', ' carniv', '\n'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', '\n', ' predator', ' rept'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' insect', ' mammal', ' carniv'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', '\n', ' predator'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' insect', ' ', ' predator'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is False
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' rept', ' mammalian'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', '\n', ' mammal'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' insect', ' rept', '\n'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', ' mammal', ' mammalian'] matches ['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus'] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' pr'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', ' pr', '\n'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' insect', ' animal', ' carniv', '\n'] matches ['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian'] is False
2024-06-12 18:01:10 root INFO     [' f', ' carniv', ' animal', '\n', ' insect'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', '\n', ' rept', ' animal'] matches ['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' animal', ' carniv', ' '] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-12 18:01:10 root INFO     [' f', '\n', ' ', ' pr', ' animal'] matches ['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is False
2024-06-12 18:01:10 root INFO     [' f', ' animal', '\n', ' ', ' carniv'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     [' f', ' carniv', '\n', ' animal', ' predator'] matches ['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is False
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' rept'] matches ['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' predator', ' carniv', ' pr'] matches ['snake', 'reptile', 'snake', 'serpent', 'ophidian'] is False
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' insect', '\n', ' carniv'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-12 18:01:10 root INFO     [' f', ' animal', ' carniv', '\n', ' rept'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-12 18:01:10 root INFO     0.0hypernyms - animals (50) total: defaultdict(<class 'int'>, {False: 872, True: 394})
2024-06-12 18:01:10 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='antonyms - binary', prompt_templates=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], prompt_templates_zs=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], samples=[RelationSample(subject='after', object=['before', 'earlier', 'previously']), RelationSample(subject='ahead', object=['behind', 'rear', 'after', 'tail', 'beforehand']), RelationSample(subject='anterior', object=['posterior']), RelationSample(subject='backward', object=['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward']), RelationSample(subject='before', object=['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead']), RelationSample(subject='beginning', object=['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='below', object=['above', 'higher', 'up']), RelationSample(subject='climb', object=['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining']), RelationSample(subject='dead', object=['alive', 'living', 'live']), RelationSample(subject='decrement', object=['increment']), RelationSample(subject='descend', object=['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant']), RelationSample(subject='dive', object=['emerge']), RelationSample(subject='down', object=['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward']), RelationSample(subject='downslope', object=['upslope', 'ascent']), RelationSample(subject='drop', object=['lift', 'pick_up']), RelationSample(subject='dynamic', object=['static', 'still', 'unmoving', 'unchanging']), RelationSample(subject='employ', object=['dismiss', 'fire', 'sack', 'displace', 'terminate']), RelationSample(subject='exit', object=['entrance', 'entranceway', 'entryway', 'entry', 'entree']), RelationSample(subject='fall', object=['rise', 'upward', 'climb']), RelationSample(subject='first', object=['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='forget', object=['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect']), RelationSample(subject='forward', object=['backward', 'back', 'backwards', 'rearward', 'rearwards']), RelationSample(subject='front', object=['back', 'rear', 'forepart']), RelationSample(subject='in', object=['out', 'outer', 'exterior', 'outside']), RelationSample(subject='inbound', object=['outbound']), RelationSample(subject='inhale', object=['exhale']), RelationSample(subject='input', object=['output']), RelationSample(subject='inside', object=['outside', 'exterior', 'out']), RelationSample(subject='interior', object=['exterior', 'outdoor', 'out-of-door', 'outside']), RelationSample(subject='internal', object=['external', 'outer', 'outside']), RelationSample(subject='inverse', object=['reverse', 'reversion', 'reversal', 'turnabout', 'turnaround']), RelationSample(subject='mortal', object=['immortal']), RelationSample(subject='occupied', object=['vacant', 'free']), RelationSample(subject='off', object=['on']), RelationSample(subject='out', object=['in', 'inside']), RelationSample(subject='outward', object=['upward', 'up', 'upwards']), RelationSample(subject='over', object=['under', 'below', 'beneath']), RelationSample(subject='previously', object=['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent']), RelationSample(subject='proceed', object=['retreat', 'return']), RelationSample(subject='rise', object=['sink', 'drop', 'fall']), RelationSample(subject='south', object=['north']), RelationSample(subject='southeast', object=['southwest', 'northeast']), RelationSample(subject='submerge', object=['emerge']), RelationSample(subject='top', object=['bottom', 'underside', 'undersurface']), RelationSample(subject='toward', object=['away', 'off', 'forth', 'aside']), RelationSample(subject='true', object=['false', 'incorrect', 'wrong', 'mistaken']), RelationSample(subject='under', object=['over', 'above', 'up']), RelationSample(subject='up', object=['down', 'downwards', 'downward', 'downwardly']), RelationSample(subject='uphill', object=['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping']), RelationSample(subject='west', object=['east'])], _domain=None, _range=None)
2024-06-12 18:01:12 root INFO     starting operator prediction
2024-06-12 18:01:12 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-12 18:01:12 root INFO     [relation call] using The opposite of {} is
2024-06-12 18:01:20 root INFO     total operator prediction time: 7.4279115200042725 seconds
2024-06-12 18:01:22 root INFO     ['\n', ' not', ' the', ' in', ' to'] matches ['before', 'earlier', 'previously'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' not', ' the'] matches ['behind', 'rear', 'after', 'tail', 'beforehand'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' the', ' in', ' '] matches ['posterior'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' not', ' '] matches ['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' ', ' in'] matches ['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' the', ' in', ' not'] matches ['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' the', ' '] matches ['above', 'higher', 'up'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' the'] matches ['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' not', ' the'] matches ['alive', 'living', 'live'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' the', ' to', ' not'] matches ['increment'] is True
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' not', ' in', ' the'] matches ['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' the', ' in', ' not'] matches ['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' the', ' in', ' not'] matches ['upslope', 'ascent'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' the', ' not'] matches ['lift', 'pick_up'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' not', ' to', ' the'] matches ['static', 'still', 'unmoving', 'unchanging'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' in', ' to'] matches ['dismiss', 'fire', 'sack', 'displace', 'terminate'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' not', ' the'] matches ['entrance', 'entranceway', 'entryway', 'entry', 'entree'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' the', ' not'] matches ['rise', 'upward', 'climb'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' in', ' to'] matches ['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' the', ' ', ' not'] matches ['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' the'] matches ['backward', 'back', 'backwards', 'rearward', 'rearwards'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' the'] matches ['back', 'rear', 'forepart'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' in', ' to'] matches ['out', 'outer', 'exterior', 'outside'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' not', ' the', ' in'] matches ['outbound'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' to', ' in'] matches ['exhale'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' not', ' to', ' in', ' the'] matches ['output'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' in', ' to'] matches ['outside', 'exterior', 'out'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' not', ' in', ' the'] matches ['exterior', 'outdoor', 'out-of-door', 'outside'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' not', ' to', ' in'] matches ['external', 'outer', 'outside'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' ', ' not'] matches ['immortal'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' in', ' not', ' to'] matches ['vacant', 'free'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' in', ' to', ' not'] matches ['on'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' the', ' not'] matches ['in', 'inside'] is True
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' to', ' in', ' not'] matches ['under', 'below', 'beneath'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' in', ' not', ' '] matches ['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' the'] matches ['retreat', 'return'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' to', ' not', ' the'] matches ['sink', 'drop', 'fall'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' the', ' '] matches ['north'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' ', ' the'] matches ['southwest', 'northeast'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' not', ' the', ' to'] matches ['emerge'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' '] matches ['bottom', 'underside', 'undersurface'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' to', ' in', ' '] matches ['away', 'off', 'forth', 'aside'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' in', ' not', ' to', ' the'] matches ['false', 'incorrect', 'wrong', 'mistaken'] is True
2024-06-12 18:01:22 root INFO     ['\n', ' the', ' in', ' not', ' to'] matches ['over', 'above', 'up'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' the'] matches ['down', 'downwards', 'downward', 'downwardly'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' not', ' the'] matches ['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping'] is False
2024-06-12 18:01:22 root INFO     ['\n', ' to', ' in', ' the', ' '] matches ['east'] is False
2024-06-12 18:01:22 root INFO     0.0antonyms - binary (50) total: defaultdict(<class 'int'>, {False: 916, True: 397})
2024-06-12 18:01:22 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - substance', prompt_templates=['A {} is made up of', 'A {} is comprised of', '{} is made from'], prompt_templates_zs=['A {} is made up of', 'A {} is comprised of', '{} is made from'], samples=[RelationSample(subject='atmosphere', object=['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone']), RelationSample(subject='bag', object=['leather', 'fabric', 'plastic']), RelationSample(subject='beach', object=['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si']), RelationSample(subject='beard', object=['hair']), RelationSample(subject='body', object=['flesh', 'bones']), RelationSample(subject='boots', object=['leather', 'canvas']), RelationSample(subject='bottle', object=['glass', 'plastic']), RelationSample(subject='bowl', object=['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay']), RelationSample(subject='box', object=['cardboard', 'tin', 'boxwood', 'turkish_boxwood']), RelationSample(subject='bread', object=['flour', 'yeast', '']), RelationSample(subject='bronze', object=['copper', 'tin', 'cu', 'atomic_number_29']), RelationSample(subject='candy', object=['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts']), RelationSample(subject='chocolate', object=['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean']), RelationSample(subject='clothing', object=['fabric', 'leather', '']), RelationSample(subject='cloud', object=['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor']), RelationSample(subject='cocktail', object=['alcohol', 'juice', 'water']), RelationSample(subject='concrete', object=['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si']), RelationSample(subject='desk', object=['wood', 'metal', 'steel']), RelationSample(subject='diamond', object=['carbon']), RelationSample(subject='doorknob', object=['metal', 'steel', 'bronze', 'wood']), RelationSample(subject='flag', object=['fabric', 'paper']), RelationSample(subject='glacier', object=['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice']), RelationSample(subject='glass', object=['silicone']), RelationSample(subject='house', object=['bricks', 'cement', 'wood', 'clay']), RelationSample(subject='ice', object=['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='icicle', object=['ice', 'water']), RelationSample(subject='jam', object=['fruit', 'sugar', 'berries']), RelationSample(subject='jeans', object=['fabric', 'denim']), RelationSample(subject='lawn', object=['grass']), RelationSample(subject='lens', object=['glass', 'plastic']), RelationSample(subject='mirror', object=['glass', 'bronze']), RelationSample(subject='money', object=['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin']), RelationSample(subject='ocean', object=['water']), RelationSample(subject='omelette', object=['eggs', 'egg', 'milk', 'cheese']), RelationSample(subject='pastry', object=['flour', 'egg', 'butter', 'filling']), RelationSample(subject='penny', object=['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin']), RelationSample(subject='pill', object=['medicine', 'drug']), RelationSample(subject='plastic', object=['polymer', 'oil', 'gas', 'coal']), RelationSample(subject='roof', object=['shingles', 'tiles', 'wood', 'metal']), RelationSample(subject='sea', object=['water']), RelationSample(subject='snow', object=['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='spoon', object=['aluminium', 'wood', 'steel']), RelationSample(subject='steel', object=['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron']), RelationSample(subject='table', object=['wood', 'metal', 'plastic']), RelationSample(subject='wall', object=['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud']), RelationSample(subject='water', object=['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='wig', object=['hair']), RelationSample(subject='wine', object=['grapes', 'grape']), RelationSample(subject='wire', object=['metal']), RelationSample(subject='yogurt', object=['milk'])], _domain=None, _range=None)
2024-06-12 18:01:25 root INFO     starting operator prediction
2024-06-12 18:01:25 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is made up of)
2024-06-12 18:01:25 root INFO     [relation call] using A {} is made up of
2024-06-12 18:01:33 root INFO     total operator prediction time: 8.614632368087769 seconds
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' plastic', ' carbon'] matches ['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' plastic', ' water', ' the'] matches ['leather', 'fabric', 'plastic'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' the', ' wood'] matches ['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' the', ' water', '...'] matches ['hair'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' plastic', ' the'] matches ['flesh', 'bones'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', '...'] matches ['leather', 'canvas'] is False
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', ' plastic', '...'] matches ['glass', 'plastic'] is True
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' plastic', ' the'] matches ['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay'] is True
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' plastic', ' the'] matches ['cardboard', 'tin', 'boxwood', 'turkish_boxwood'] is False
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' the', ' carbon'] matches ['flour', 'yeast', ''] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', ' plastic'] matches ['copper', 'tin', 'cu', 'atomic_number_29'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['fabric', 'leather', ''] is False
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' plastic', ' the'] matches ['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' carbon', ' iron'] matches ['alcohol', 'juice', 'water'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' the', ' plastic'] matches ['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', ' wood'] matches ['wood', 'metal', 'steel'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' plastic', ' the'] matches ['carbon'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', '...'] matches ['metal', 'steel', 'bronze', 'wood'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['fabric', 'paper'] is False
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', ' the', ' plastic'] matches ['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' plastic', ' the'] matches ['silicone'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['bricks', 'cement', 'wood', 'clay'] is False
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', '...', ' the'] matches ['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' glass', ' plastic'] matches ['ice', 'water'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', ' plastic'] matches ['fruit', 'sugar', 'berries'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' the', ' water', ' plastic'] matches ['fabric', 'denim'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['grass'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', '...'] matches ['glass', 'plastic'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', '...', ' the'] matches ['glass', 'bronze'] is False
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' the', ' plastic', '...'] matches ['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin'] is True
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', ' plastic', ' the'] matches ['water'] is True
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' carbon', ' plastic'] matches ['eggs', 'egg', 'milk', 'cheese'] is False
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' the', ' plastic'] matches ['flour', 'egg', 'butter', 'filling'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', ' glass'] matches ['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', ' iron'] matches ['medicine', 'drug'] is False
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', ' plastic', ' the'] matches ['polymer', 'oil', 'gas', 'coal'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' plastic', ' the'] matches ['shingles', 'tiles', 'wood', 'metal'] is True
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', ' plastic', '...'] matches ['water'] is True
2024-06-12 18:01:36 root INFO     [' water', ' metal', ' a', '...', ' the'] matches ['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' glass', ' the'] matches ['aluminium', 'wood', 'steel'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' water', ' a', ' the', ' iron'] matches ['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' the', ' plastic'] matches ['wood', 'metal', 'plastic'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', '...'] matches ['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' plastic', '...', ' the'] matches ['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' plastic', ' water', ' the'] matches ['hair'] is False
2024-06-12 18:01:36 root INFO     [' a', ' metal', ' water', ' glass', '...'] matches ['grapes', 'grape'] is False
2024-06-12 18:01:36 root INFO     [' metal', ' a', ' water', ' plastic', ' the'] matches ['metal'] is True
2024-06-12 18:01:36 root INFO     [' water', ' a', ' metal', ' the', ' plastic'] matches ['milk'] is False
2024-06-12 18:01:36 root INFO     0.0meronyms - substance (50) total: defaultdict(<class 'int'>, {False: 942, True: 421})
2024-06-12 18:01:36 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='meronyms - member', prompt_templates=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], prompt_templates_zs=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], samples=[RelationSample(subject='acrobat', object=['troupe']), RelationSample(subject='antelope', object=['herd']), RelationSample(subject='bee', object=['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand']), RelationSample(subject='bird', object=['flock']), RelationSample(subject='book', object=['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting']), RelationSample(subject='calf', object=['cattle', 'herd']), RelationSample(subject='car', object=['train', 'procession']), RelationSample(subject='cat', object=['clowder', 'glaring', 'clutter', 'pounce']), RelationSample(subject='cattle', object=['herd']), RelationSample(subject='christian', object=['congregation', 'church', 'parish']), RelationSample(subject='citizen', object=['citizenry', 'country', 'state']), RelationSample(subject='college', object=['university']), RelationSample(subject='county', object=['state', 'country']), RelationSample(subject='cow', object=['herd']), RelationSample(subject='crow', object=['murder']), RelationSample(subject='division', object=['company', 'business', 'platoon', 'battle_group']), RelationSample(subject='elephant', object=['herd']), RelationSample(subject='employee', object=['staff', 'company']), RelationSample(subject='fish', object=['school']), RelationSample(subject='flower', object=['bouquet', 'bunch']), RelationSample(subject='galaxy', object=['universe']), RelationSample(subject='goose', object=['gaggle']), RelationSample(subject='juror', object=['jury']), RelationSample(subject='kitten', object=['litter']), RelationSample(subject='letter', object=['alphabet']), RelationSample(subject='lion', object=['pride']), RelationSample(subject='listener', object=['audience']), RelationSample(subject='member', object=['club', 'team', 'group', 'band', 'community']), RelationSample(subject='musician', object=['orchestra', 'band']), RelationSample(subject='nomad', object=['horde']), RelationSample(subject='page', object=['book', 'notebook', 'website', 'web-site']), RelationSample(subject='parishioner', object=['parish', 'church']), RelationSample(subject='person', object=['society', 'company', 'party', 'world']), RelationSample(subject='photo', object=['album', 'collection', 'library']), RelationSample(subject='player', object=['team', 'group', 'orchestra']), RelationSample(subject='policeman', object=['police']), RelationSample(subject='secretary', object=['staff']), RelationSample(subject='senator', object=['senate', 'house']), RelationSample(subject='sheep', object=['flock']), RelationSample(subject='shrub', object=['shrubbery']), RelationSample(subject='singer', object=['choir', 'band', 'duo', 'trio', 'quartet']), RelationSample(subject='soldier', object=['army', 'unit', 'division', 'troop']), RelationSample(subject='song', object=['album', 'collection', 'antology', 'library']), RelationSample(subject='spouse', object=['couple', 'relationship', 'family']), RelationSample(subject='star', object=['constellation', 'galaxy']), RelationSample(subject='state', object=['country', 'province']), RelationSample(subject='student', object=['class', 'school']), RelationSample(subject='tree', object=['forest', 'wood', 'grove']), RelationSample(subject='wolf', object=['pack']), RelationSample(subject='word', object=['paragraph', 'sentence', 'text'])], _domain=None, _range=None)
2024-06-12 18:01:38 root INFO     starting operator prediction
2024-06-12 18:01:38 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is a member of a)
2024-06-12 18:01:38 root INFO     [relation call] using A {} is a member of a
2024-06-12 18:01:47 root INFO     total operator prediction time: 9.158688306808472 seconds
2024-06-12 18:01:49 root INFO     [' family', ' group', ' team', ' club', ' class'] matches ['troupe'] is False
2024-06-12 18:01:49 root INFO     [' group', ' herd', ' family', ' tribe', ' clan'] matches ['herd'] is True
2024-06-12 18:01:49 root INFO     [' family', ' flock', ' group', ' society', ' herd'] matches ['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' flock', ' colony', ' herd'] matches ['flock'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' club', ' company', ' team'] matches ['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' herd', ' flock'] matches ['cattle', 'herd'] is True
2024-06-12 18:01:49 root INFO     [' herd', ' group', ' family', ' society', ' company'] matches ['herd'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' company', ' community'] matches ['congregation', 'church', 'parish'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' tribe', ' flock', ' company'] matches ['citizenry', 'country', 'state'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' team', ' tribe'] matches ['university'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' herd', ' team'] matches ['state', 'country'] is False
2024-06-12 18:01:49 root INFO     [' family', ' herd', ' group', ' society', ' tribe'] matches ['herd'] is True
2024-06-12 18:01:49 root INFO     [' family', ' society', ' group', ' flock', ' team'] matches ['company', 'business', 'platoon', 'battle_group'] is False
2024-06-12 18:01:49 root INFO     [' family', ' herd', ' group', ' society', ' flock'] matches ['herd'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' company', ' tribe'] matches ['staff', 'company'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' herd', ' tribe'] matches ['school'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' company', ' team'] matches ['bouquet', 'bunch'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' club', ' society', ' clan'] matches ['universe'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' tribe', ' colony', ' society'] matches ['gaggle'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' nation', ' society', ' club'] matches ['jury'] is False
2024-06-12 18:01:49 root INFO     [' family', ' flock', ' society', ' group', ' herd'] matches ['litter'] is False
2024-06-12 18:01:49 root INFO     [' group', ' flock', ' herd', ' family', ' society'] matches ['pride'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' team', ' company'] matches ['audience'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' company', ' tribe'] matches ['club', 'team', 'group', 'band', 'community'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' team', ' company'] matches ['orchestra', 'band'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' tribe', ' society', ' herd'] matches ['horde'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' flock', ' community'] matches ['book', 'notebook', 'website', 'web-site'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' flock', ' company'] matches ['parish', 'church'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' tribe', ' company'] matches ['society', 'company', 'party', 'world'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' company', ' team'] matches ['album', 'collection', 'library'] is False
2024-06-12 18:01:49 root INFO     [' group', ' society', ' family', ' team', ' club'] matches ['team', 'group', 'orchestra'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' team', ' company'] matches ['police'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' company', ' herd'] matches ['staff'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' tribe', ' herd', ' society'] matches ['senate', 'house'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' herd', ' flock', ' society'] matches ['flock'] is True
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' flock', ' tribe'] matches ['choir', 'band', 'duo', 'trio', 'quartet'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' team', ' tribe'] matches ['army', 'unit', 'division', 'troop'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' team', ' society', ' company'] matches ['couple', 'relationship', 'family'] is True
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' team', ' tribe'] matches ['constellation', 'galaxy'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' herd', ' team'] matches ['country', 'province'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' society', ' company', ' tribe'] matches ['class', 'school'] is False
2024-06-12 18:01:49 root INFO     [' family', ' society', ' group', ' company', ' herd'] matches ['forest', 'wood', 'grove'] is False
2024-06-12 18:01:49 root INFO     [' group', ' family', ' clan', ' tribe', ' herd'] matches ['pack'] is False
2024-06-12 18:01:49 root INFO     [' family', ' group', ' society', ' team', ' herd'] matches ['paragraph', 'sentence', 'text'] is False
2024-06-12 18:01:49 root INFO     0.0meronyms - member (50) total: defaultdict(<class 'int'>, {False: 974, True: 433})
2024-06-12 18:01:50 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='UK_city - county', prompt_templates=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], prompt_templates_zs=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], samples=[RelationSample(subject='aberdeen', object=['aberdeenshire']), RelationSample(subject='bath', object=['somerset']), RelationSample(subject='belfast', object=['antrim']), RelationSample(subject='birmingham', object=['midlands']), RelationSample(subject='bradford', object=['yorkshire']), RelationSample(subject='brighton', object=['sussex']), RelationSample(subject='cambridge', object=['cambridgeshire']), RelationSample(subject='canterbury', object=['kent']), RelationSample(subject='cardiff', object=['glamorgan']), RelationSample(subject='carlisle', object=['cumbria']), RelationSample(subject='chester', object=['cheshire']), RelationSample(subject='chichester', object=['sussex']), RelationSample(subject='coventry', object=['midlands']), RelationSample(subject='crawley', object=['sussex']), RelationSample(subject='derby', object=['derbyshire']), RelationSample(subject='dundee', object=['lowlands']), RelationSample(subject='edinburgh', object=['lowlands']), RelationSample(subject='ely', object=['cambridgeshire']), RelationSample(subject='exeter', object=['devon']), RelationSample(subject='glasgow', object=['lowlands']), RelationSample(subject='gloucester', object=['gloucestershire']), RelationSample(subject='hereford', object=['herefordshire']), RelationSample(subject='hull', object=['yorkshire']), RelationSample(subject='inverness', object=['highlands']), RelationSample(subject='lancaster', object=['lancashire']), RelationSample(subject='leeds', object=['yorkshire']), RelationSample(subject='leicester', object=['midlands']), RelationSample(subject='lincoln', object=['lincolnshire']), RelationSample(subject='liverpool', object=['lancashire']), RelationSample(subject='newcastle', object=['northumberland']), RelationSample(subject='newport', object=['gwent']), RelationSample(subject='norwich', object=['norfolk']), RelationSample(subject='nottingham', object=['nottinghamshire']), RelationSample(subject='oxford', object=['oxfordshire']), RelationSample(subject='plymouth', object=['devon']), RelationSample(subject='portsmouth', object=['hampshire']), RelationSample(subject='preston', object=['lancashire']), RelationSample(subject='reading', object=['berkshire']), RelationSample(subject='salford', object=['manchester']), RelationSample(subject='salisbury', object=['wiltshire']), RelationSample(subject='sheffield', object=['yorkshire']), RelationSample(subject='southampton', object=['hampshire']), RelationSample(subject='stirling', object=['stirlingshire']), RelationSample(subject='swansea', object=['glamorgan']), RelationSample(subject='wakefield', object=['yorkshire']), RelationSample(subject='wells', object=['somerset']), RelationSample(subject='winchester', object=['hampshire']), RelationSample(subject='wolverhampton', object=['midlands']), RelationSample(subject='worcester', object=['worcestershire']), RelationSample(subject='york', object=['yorkshire'])], _domain=None, _range=None)
2024-06-12 18:01:53 root INFO     starting operator prediction
2024-06-12 18:01:53 lre.operators WARNING  relation has > 1 prompt_templates, will use first (In the United Kingdom, the city of {} is in the county of)
2024-06-12 18:01:53 root INFO     [relation call] using In the United Kingdom, the city of {} is in the county of
2024-06-12 18:02:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:02:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:02:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:02:11 root INFO     total operator prediction time: 18.36190962791443 seconds
2024-06-12 18:02:13 root INFO     [' the', ' west', ' south', ' w', ' north'] matches ['aberdeenshire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' mid', ' north', ' east'] matches ['antrim'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' mid', ' w', ' north'] matches ['midlands'] is True
2024-06-12 18:02:13 root INFO     [' west', ' south', ' north', ' east', ' dev'] matches ['cambridgeshire'] is False
2024-06-12 18:02:13 root INFO     [' north', ' west', ' mid', ' south', ' the'] matches ['kent'] is False
2024-06-12 18:02:13 root INFO     [' west', ' e', ' k', ' the', ' south'] matches ['glamorgan'] is False
2024-06-12 18:02:13 root INFO     [' mid', ' south', ' west', ' north', ' e'] matches ['cumbria'] is False
2024-06-12 18:02:13 root INFO     [' mid', ' k', ' w', ' the', ' west'] matches ['sussex'] is False
2024-06-12 18:02:13 root INFO     [' west', ' north', ' mid', ' south', ' east'] matches ['derbyshire'] is False
2024-06-12 18:02:13 root INFO     [' north', ' south', ' west', ' mid', ' the'] matches ['cambridgeshire'] is False
2024-06-12 18:02:13 root INFO     [' mid', ' w', ' south', ' west', ' north'] matches ['devon'] is False
2024-06-12 18:02:13 root INFO     [' west', ' mid', ' l', ' north', ' south'] matches ['gloucestershire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' w', ' the', ' north'] matches ['herefordshire'] is False
2024-06-12 18:02:13 root INFO     [' mid', ' west', ' south', ' north', ' w'] matches ['highlands'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' mid', ' north', ' w'] matches ['lancashire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' north', ' east', ' k'] matches ['yorkshire'] is False
2024-06-12 18:02:13 root INFO     [' south', ' west', ' w', ' north', ' the'] matches ['midlands'] is False
2024-06-12 18:02:13 root INFO     [' e', ' west', ' the', ' north', ' mid'] matches ['lincolnshire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' north', ' mid', ' east'] matches ['lancashire'] is False
2024-06-12 18:02:13 root INFO     [' w', ' west', ' mid', ' h', ' k'] matches ['northumberland'] is False
2024-06-12 18:02:13 root INFO     [' west', ' mid', ' south', ' the', ' north'] matches ['norfolk'] is False
2024-06-12 18:02:13 root INFO     [' mid', ' west', ' south', ' w', ' north'] matches ['nottinghamshire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' north', ' south', ' east', ' mid'] matches ['oxfordshire'] is False
2024-06-12 18:02:13 root INFO     [' south', ' west', ' mid', ' north', ' k'] matches ['devon'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' w', ' north', ' mid'] matches ['hampshire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' mid', ' south', ' l', ' the'] matches ['manchester'] is False
2024-06-12 18:02:13 root INFO     [' west', ' mid', ' south', ' w', ' north'] matches ['hampshire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' w', ' l', ' k', ' north'] matches ['hampshire'] is False
2024-06-12 18:02:13 root INFO     [' west', ' south', ' mid', ' north', ' the'] matches ['midlands'] is True
2024-06-12 18:02:13 root INFO     [' mid', ' l', ' sh', ' west', ' the'] matches ['worcestershire'] is False
2024-06-12 18:02:13 root INFO     [' k', ' west', ' h', ' city', ' north'] matches ['yorkshire'] is False
2024-06-12 18:02:13 root INFO     0.0UK_city - county (50) total: defaultdict(<class 'int'>, {False: 1003, True: 435})
2024-06-12 18:02:13 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - sound', prompt_templates=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], prompt_templates_zs=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], samples=[RelationSample(subject='alpaca', object=['bray']), RelationSample(subject='bear', object=['growl']), RelationSample(subject='bee', object=['buzz', 'hum']), RelationSample(subject='beetle', object=['drone']), RelationSample(subject='cat', object=['meow', 'meu', 'purr', 'caterwaul']), RelationSample(subject='cattle', object=['moo', 'bellow', 'low']), RelationSample(subject='chicken', object=['cluck', 'crow', 'cock-a-doodle-doo']), RelationSample(subject='chimpanzee', object=['scream']), RelationSample(subject='cicada', object=['buzz']), RelationSample(subject='coyote', object=['howl']), RelationSample(subject='cricket', object=['chirp']), RelationSample(subject='crow', object=['caw']), RelationSample(subject='deer', object=['bellow']), RelationSample(subject='dog', object=['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof']), RelationSample(subject='donkey', object=['bray', 'hee-haw']), RelationSample(subject='duck', object=['quack']), RelationSample(subject='elephant', object=['trumpet']), RelationSample(subject='elk', object=['bellow']), RelationSample(subject='ferret', object=['dook']), RelationSample(subject='fly', object=['buzz']), RelationSample(subject='fox', object=['howl', 'yelp']), RelationSample(subject='frog', object=['ribbit', 'croak']), RelationSample(subject='goat', object=['bleat']), RelationSample(subject='gorilla', object=['grunt', 'scream']), RelationSample(subject='hornet', object=['buzz']), RelationSample(subject='horse', object=['neigh', 'snort', 'whinny']), RelationSample(subject='hound', object=['bark', 'howl', 'bay']), RelationSample(subject='hyena', object=['laugh']), RelationSample(subject='leopard', object=['growl']), RelationSample(subject='lion', object=['roar', 'growl']), RelationSample(subject='magpie', object=['chatter']), RelationSample(subject='mallard', object=['quack']), RelationSample(subject='monkey', object=['chatter', 'gibber', 'howl', 'scream']), RelationSample(subject='moose', object=['bellow']), RelationSample(subject='mouse', object=['squeak']), RelationSample(subject='mule', object=['bray', 'hee-haw']), RelationSample(subject='pig', object=['oink', 'grunt', 'gruff', 'squeal']), RelationSample(subject='pigeon', object=['coo']), RelationSample(subject='rat', object=['squeak']), RelationSample(subject='raven', object=['caw']), RelationSample(subject='seal', object=['bark']), RelationSample(subject='sheep', object=['baa', 'bleat']), RelationSample(subject='snake', object=['hiss']), RelationSample(subject='songbird', object=['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter']), RelationSample(subject='tiger', object=['growl', 'roar']), RelationSample(subject='toad', object=['ribbit', 'croak']), RelationSample(subject='turkey', object=['gobble']), RelationSample(subject='wasp', object=['buzz']), RelationSample(subject='whale', object=['sing']), RelationSample(subject='wolf', object=['howl'])], _domain=None, _range=None)
2024-06-12 18:02:16 root INFO     starting operator prediction
2024-06-12 18:02:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The sound that a {} makes is called a)
2024-06-12 18:02:16 root INFO     [relation call] using The sound that a {} makes is called a
2024-06-12 18:02:27 root INFO     total operator prediction time: 11.261305332183838 seconds
2024-06-12 18:02:29 root INFO     [' m', ' b', ' h', ' bark', ' bell'] matches ['bray'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bell', ' ch', ' bark'] matches ['growl'] is False
2024-06-12 18:02:29 root INFO     [' whistle', ' m', ' ch', ' b', ' h'] matches ['buzz', 'hum'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bark', ' b', ' h'] matches ['meow', 'meu', 'purr', 'caterwaul'] is True
2024-06-12 18:02:29 root INFO     [' m', ' ch', ' whistle', ' b', ' bark'] matches ['moo', 'bellow', 'low'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bark', ' h', ' bell'] matches ['cluck', 'crow', 'cock-a-doodle-doo'] is False
2024-06-12 18:02:29 root INFO     [' m', ' bark', ' ch', ' b', ' h'] matches ['scream'] is False
2024-06-12 18:02:29 root INFO     [' m', ' b', ' whistle', ' ch', ' wh'] matches ['buzz'] is True
2024-06-12 18:02:29 root INFO     [' m', ' b', ' ch', ' whistle', ' bark'] matches ['howl'] is False
2024-06-12 18:02:29 root INFO     [' whistle', ' ch', ' bark', ' m', ' bell'] matches ['chirp'] is True
2024-06-12 18:02:29 root INFO     [' m', ' bark', ' ch', ' whistle', ' b'] matches ['caw'] is False
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' ch', ' bark', ' b'] matches ['bellow'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bark', ' b', ' bell'] matches ['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof'] is True
2024-06-12 18:02:29 root INFO     [' m', ' bark', ' br', ' bell', ' b'] matches ['bray', 'hee-haw'] is True
2024-06-12 18:02:29 root INFO     [' b', ' whistle', ' bell', ' m', ' bark'] matches ['quack'] is False
2024-06-12 18:02:29 root INFO     [' bark', ' whistle', ' m', ' ch', ' bell'] matches ['trumpet'] is False
2024-06-12 18:02:29 root INFO     [' m', ' b', ' ch', ' bark', ' br'] matches ['bellow'] is True
2024-06-12 18:02:29 root INFO     [' m', ' h', ' bell', ' wh', ' whistle'] matches ['buzz'] is False
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' ch', ' bark', ' h'] matches ['howl', 'yelp'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' b', ' h', ' bark'] matches ['ribbit', 'croak'] is False
2024-06-12 18:02:29 root INFO     [' whistle', ' bell', ' bark', ' m', ' b'] matches ['bleat'] is True
2024-06-12 18:02:29 root INFO     [' m', ' b', ' bark', ' bell', ' ch'] matches ['grunt', 'scream'] is False
2024-06-12 18:02:29 root INFO     [' m', ' h', ' ch', ' b', ' whistle'] matches ['buzz'] is True
2024-06-12 18:02:29 root INFO     [' m', ' bark', ' wh', ' whistle', ' roar'] matches ['neigh', 'snort', 'whinny'] is True
2024-06-12 18:02:29 root INFO     [' m', ' b', ' ch', ' bark', ' whistle'] matches ['bark', 'howl', 'bay'] is True
2024-06-12 18:02:29 root INFO     [' bark', ' m', ' h', ' b', ' ch'] matches ['growl'] is False
2024-06-12 18:02:29 root INFO     [' whistle', ' m', ' bark', ' bell', ' ch'] matches ['roar', 'growl'] is False
2024-06-12 18:02:29 root INFO     [' ch', ' m', ' squ', ' sn', ' h'] matches ['chatter'] is True
2024-06-12 18:02:29 root INFO     [' m', ' sn', ' bell', ' bark', ' h'] matches ['quack'] is False
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' b', ' ch', ' bell'] matches ['chatter', 'gibber', 'howl', 'scream'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bark', ' wh', ' b'] matches ['bellow'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bell', ' h', ' bark'] matches ['squeak'] is False
2024-06-12 18:02:29 root INFO     [' bark', ' br', ' m', ' cl', ' b'] matches ['bray', 'hee-haw'] is True
2024-06-12 18:02:29 root INFO     [' whistle', ' m', ' ch', ' cl', ' bell'] matches ['oink', 'grunt', 'gruff', 'squeal'] is False
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' ch', ' sn', ' bark'] matches ['coo'] is False
2024-06-12 18:02:29 root INFO     [' whistle', ' m', ' ch', ' b', ' grunt'] matches ['squeak'] is False
2024-06-12 18:02:29 root INFO     [' m', ' ch', ' b', ' h', ' bark'] matches ['caw'] is False
2024-06-12 18:02:29 root INFO     [' m', ' bark', ' b', ' whistle', ' h'] matches ['bark'] is True
2024-06-12 18:02:29 root INFO     [' whistle', ' bark', ' m', ' b', ' ch'] matches ['baa', 'bleat'] is True
2024-06-12 18:02:29 root INFO     [' whistle', ' m', ' bark', ' bell', ' b'] matches ['hiss'] is False
2024-06-12 18:02:29 root INFO     [' ch', ' m', ' h', ' b', ' whistle'] matches ['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter'] is True
2024-06-12 18:02:29 root INFO     [' m', ' whistle', ' bark', ' bell', ' b'] matches ['growl', 'roar'] is False
2024-06-12 18:02:29 root INFO     [' b', ' whistle', ' m', ' wh', ' h'] matches ['ribbit', 'croak'] is False
2024-06-12 18:02:29 root INFO     [' m', ' bell', ' bark', ' b', ' whistle'] matches ['gobble'] is False
2024-06-12 18:02:29 root INFO     [' m', ' b', ' ch', ' whistle', ' bark'] matches ['buzz'] is True
2024-06-12 18:02:29 root INFO     [' whistle', ' bark', ' m', ' ch', ' roar'] matches ['howl'] is False
2024-06-12 18:02:29 root INFO     0.0animal - sound (50) total: defaultdict(<class 'int'>, {False: 1026, True: 458})
2024-06-12 18:02:29 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='animal - shelter', prompt_templates=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], prompt_templates_zs=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], samples=[RelationSample(subject='ant', object=['anthill', 'insectarium', 'terrarium', 'formicarium']), RelationSample(subject='ape', object=['grove', 'tree', 'cage']), RelationSample(subject='baboon', object=['grove', 'tree', 'cage']), RelationSample(subject='bat', object=['cave', 'cage']), RelationSample(subject='bear', object=['den', 'cage']), RelationSample(subject='beaver', object=['dam', 'river', 'pen']), RelationSample(subject='bee', object=['hive']), RelationSample(subject='cattle', object=['barn', 'coral']), RelationSample(subject='chimpanzee', object=['grove', 'tree', 'cage']), RelationSample(subject='chinchilla', object=['nest', 'cage']), RelationSample(subject='cockroach', object=['nest']), RelationSample(subject='cricket', object=['nest']), RelationSample(subject='crocodile', object=['river', 'lake', 'pool']), RelationSample(subject='crow', object=['nest', 'cage']), RelationSample(subject='dog', object=['doghouse', 'home', 'den', 'kennel']), RelationSample(subject='dolphin', object=['sea', 'sanctuary']), RelationSample(subject='duck', object=['pond', 'nest']), RelationSample(subject='fish', object=['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary']), RelationSample(subject='fly', object=['nest']), RelationSample(subject='fox', object=['den', 'cage']), RelationSample(subject='goldfish', object=['pond', 'bowl', 'aquarium', 'sanctuary']), RelationSample(subject='gorilla', object=['grove', 'tree', 'cage']), RelationSample(subject='hamster', object=['nest', 'cage']), RelationSample(subject='hedgehog', object=['nest', 'hedge', 'pen']), RelationSample(subject='herring', object=['sea', 'sanctuary']), RelationSample(subject='hippopotamus', object=['river', 'lake', 'pen']), RelationSample(subject='hornet', object=['nest']), RelationSample(subject='horse', object=['stable', 'range', 'paddock', 'corral']), RelationSample(subject='insect', object=['nest', 'cage', 'box']), RelationSample(subject='lion', object=['den', 'cage', 'savannah']), RelationSample(subject='locust', object=['nest']), RelationSample(subject='mallard', object=['nest', 'pond']), RelationSample(subject='mole', object=['hole', 'nest']), RelationSample(subject='monkey', object=['tree', 'grove', 'cage']), RelationSample(subject='mouse', object=['nest', 'cage']), RelationSample(subject='pig', object=['sty', 'pigsty', 'pen', 'pigpen']), RelationSample(subject='rabbit', object=['burrow', 'warren', 'hutch', 'cage']), RelationSample(subject='rat', object=['nest', 'cage']), RelationSample(subject='raven', object=['nest', 'cage']), RelationSample(subject='scorpion', object=['nest', 'aquarium', 'terrarium']), RelationSample(subject='seal', object=['den', 'aquarium', 'sea']), RelationSample(subject='snake', object=['nest', 'pit', 'acquarium']), RelationSample(subject='spider', object=['web', 'acquarium', 'terrarium']), RelationSample(subject='termite', object=['hill', 'terrarium']), RelationSample(subject='tiger', object=['den', 'cage']), RelationSample(subject='trout', object=['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank']), RelationSample(subject='wasp', object=['nest']), RelationSample(subject='whale', object=['sea', 'sanctuary']), RelationSample(subject='wolf', object=['den', 'cage']), RelationSample(subject='woodchuck', object=['hole'])], _domain=None, _range=None)
2024-06-12 18:02:32 root INFO     starting operator prediction
2024-06-12 18:02:32 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The place {} lives in is called)
2024-06-12 18:02:32 root INFO     [relation call] using The place {} lives in is called
2024-06-12 18:02:41 root INFO     total operator prediction time: 9.255322933197021 seconds
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hill', ' hole'] matches ['anthill', 'insectarium', 'terrarium', 'formicarium'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' bur'] matches ['grove', 'tree', 'cage'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' bur', ' hill'] matches ['grove', 'tree', 'cage'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' gro'] matches ['cave', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['den', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['dam', 'river', 'pen'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['hive'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' gro'] matches ['barn', 'coral'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' bur', ' hole'] matches ['grove', 'tree', 'cage'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' bur'] matches ['nest', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' hill'] matches ['nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['river', 'lake', 'pool'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' hill'] matches ['nest', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['doghouse', 'home', 'den', 'kennel'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' gro', ' bur'] matches ['sea', 'sanctuary'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' gro'] matches ['pond', 'nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['den', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' gro', ' bur'] matches ['pond', 'bowl', 'aquarium', 'sanctuary'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['nest', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' gro'] matches ['nest', 'hedge', 'pen'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' gro', ' cave', ' bur'] matches ['sea', 'sanctuary'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' bur', ' hole'] matches ['river', 'lake', 'pen'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' gro'] matches ['stable', 'range', 'paddock', 'corral'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' home'] matches ['nest', 'cage', 'box'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' hill'] matches ['den', 'cage', 'savannah'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hill', ' cave', ' hole'] matches ['nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' gro', ' cave', ' hill'] matches ['nest', 'pond'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' hill'] matches ['hole', 'nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['tree', 'grove', 'cage'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' bur'] matches ['nest', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['sty', 'pigsty', 'pen', 'pigpen'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' home'] matches ['burrow', 'warren', 'hutch', 'cage'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' bur'] matches ['nest', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' gro'] matches ['nest', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' hole', ' cave', ' hill'] matches ['nest', 'aquarium', 'terrarium'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' hill'] matches ['den', 'aquarium', 'sea'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['nest', 'pit', 'acquarium'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' bur'] matches ['web', 'acquarium', 'terrarium'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' bur', ' hole'] matches ['den', 'cage'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' hole', ' hill'] matches ['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' bur', ' gro'] matches ['nest'] is True
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' gro', ' hole'] matches ['sea', 'sanctuary'] is False
2024-06-12 18:02:43 root INFO     [' nest', ' den', ' cave', ' bur', ' hole'] matches ['den', 'cage'] is True
2024-06-12 18:02:43 root INFO     0.0animal - shelter (50) total: defaultdict(<class 'int'>, {False: 1046, True: 484})
2024-06-12 18:02:43 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='name - nationality', prompt_templates=['{} was', '{} identified nationally as', '{} identifies as'], prompt_templates_zs=['{} was', '{} identified nationally as', '{} identifies as'], samples=[RelationSample(subject='aristotle', object=['greek']), RelationSample(subject='balzac', object=['french']), RelationSample(subject='beethoven', object=['german']), RelationSample(subject='caesar', object=['roman']), RelationSample(subject='confucius', object=['chinese']), RelationSample(subject='copernicus', object=['polish']), RelationSample(subject='darwin', object=['english', 'british']), RelationSample(subject='depp', object=['american']), RelationSample(subject='descartes', object=['french']), RelationSample(subject='dickens', object=['english', 'british']), RelationSample(subject='dostoyevsky', object=['russian']), RelationSample(subject='edison', object=['american']), RelationSample(subject='einstein', object=['jewish', 'german', 'american']), RelationSample(subject='euclid', object=['greek']), RelationSample(subject='fermi', object=['italian']), RelationSample(subject='galilei', object=['italian']), RelationSample(subject='gorbachev', object=['soviet', 'russian']), RelationSample(subject='hawking', object=['english', 'british']), RelationSample(subject='hegel', object=['german']), RelationSample(subject='hitler', object=['german', 'austrian']), RelationSample(subject='homer', object=['greek']), RelationSample(subject='hume', object=['scottish', 'british']), RelationSample(subject='jolie', object=['american']), RelationSample(subject='kant', object=['german']), RelationSample(subject='kepler', object=['german']), RelationSample(subject='lavoisier', object=['french']), RelationSample(subject='leibniz', object=['german']), RelationSample(subject='lenin', object=['soviet', 'russian']), RelationSample(subject='lennon', object=['english', 'british']), RelationSample(subject='lincoln', object=['american']), RelationSample(subject='locke', object=['english', 'british']), RelationSample(subject='machiavelli', object=['italian']), RelationSample(subject='marx', object=['german']), RelationSample(subject='maxwell', object=['scottish', 'british']), RelationSample(subject='mencius', object=['chinese']), RelationSample(subject='michelangelo', object=['italian']), RelationSample(subject='mozart', object=['german', 'austrian']), RelationSample(subject='napoleon', object=['french', 'corsican', 'italian']), RelationSample(subject='newton', object=['english', 'british']), RelationSample(subject='pascal', object=['french']), RelationSample(subject='plato', object=['greek']), RelationSample(subject='raphael', object=['italian']), RelationSample(subject='rousseau', object=['french']), RelationSample(subject='spinoza', object=['dutch']), RelationSample(subject='stalin', object=['soviet', 'georgian']), RelationSample(subject='strauss', object=['austrian']), RelationSample(subject='tchaikovsky', object=['russian']), RelationSample(subject='tolstoi', object=['russian']), RelationSample(subject='truman', object=['american']), RelationSample(subject='wagner', object=['german'])], _domain=None, _range=None)
2024-06-12 18:02:45 root INFO     starting operator prediction
2024-06-12 18:02:45 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was)
2024-06-12 18:02:45 root INFO     [relation call] using {} was
2024-06-12 18:02:52 root INFO     total operator prediction time: 7.068565845489502 seconds
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['greek'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' french', ' it', ' r'] matches ['french'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' sc'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' it', ' english', ' a'] matches ['roman'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' french', ' it', ' sc'] matches ['chinese'] is False
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['polish'] is False
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' french', ' it'] matches ['english', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['french'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['english', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' french', ' it', ' r'] matches ['russian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' it', ' english', ' r', ' a'] matches ['american'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' french'] matches ['jewish', 'german', 'american'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['greek'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' it', ' french'] matches ['italian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' it', ' sc'] matches ['italian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' it', ' french'] matches ['soviet', 'russian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' french'] matches ['english', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' french', ' sc'] matches ['german', 'austrian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' a'] matches ['greek'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' b'] matches ['scottish', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' it', ' french'] matches ['american'] is False
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' french', ' it'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' sc'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['french'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' french'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['soviet', 'russian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['english', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' french', ' r'] matches ['american'] is False
2024-06-12 18:02:55 root INFO     [' g', ' r', ' it', ' english', ' a'] matches ['english', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['italian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' b'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     ['\n', '.', ' ', ' the', ','] matches ['scottish', 'british'] is False
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' french', ' r'] matches ['chinese'] is False
2024-06-12 18:02:55 root INFO     [' g', ' it', ' english', ' r', ' french'] matches ['italian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['german', 'austrian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' b'] matches ['french', 'corsican', 'italian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['english', 'british'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' b'] matches ['french'] is False
2024-06-12 18:02:55 root INFO     [' g', ' english', ' french', ' r', ' it'] matches ['greek'] is True
2024-06-12 18:02:55 root INFO     [' g', ' french', ' english', ' it', ' r'] matches ['italian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' it', ' french'] matches ['french'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' french'] matches ['soviet', 'georgian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' it', ' english', ' r', ' sc'] matches ['austrian'] is False
2024-06-12 18:02:55 root INFO     [' g', ' english', ' it', ' r', ' french'] matches ['russian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' r', ' english', ' it', ' french'] matches ['russian'] is True
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['american'] is False
2024-06-12 18:02:55 root INFO     [' g', ' english', ' r', ' it', ' french'] matches ['german'] is True
2024-06-12 18:02:55 root INFO     0.0name - nationality (50) total: defaultdict(<class 'int'>, {False: 1055, True: 523})
2024-06-12 18:02:55 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='male - female', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='actor', object=['actress']), RelationSample(subject='batman', object=['batwoman']), RelationSample(subject='boar', object=['sow']), RelationSample(subject='boy', object=['girl']), RelationSample(subject='brother', object=['sister']), RelationSample(subject='buck', object=['doe']), RelationSample(subject='bull', object=['cow']), RelationSample(subject='businessman', object=['businesswoman']), RelationSample(subject='chairman', object=['chairwoman']), RelationSample(subject='dad', object=['mom', 'mum']), RelationSample(subject='daddy', object=['mommy', 'mother', 'mom']), RelationSample(subject='duke', object=['duchess']), RelationSample(subject='emperor', object=['empress']), RelationSample(subject='father', object=['mother']), RelationSample(subject='fisherman', object=['fisherwoman']), RelationSample(subject='fox', object=['vixen']), RelationSample(subject='gentleman', object=['lady', 'gentlewoman', 'madam']), RelationSample(subject='god', object=['goddess']), RelationSample(subject='grandfather', object=['grandmother']), RelationSample(subject='grandpa', object=['grandma']), RelationSample(subject='grandson', object=['granddaughter']), RelationSample(subject='groom', object=['bride']), RelationSample(subject='headmaster', object=['headmistress']), RelationSample(subject='heir', object=['heiress']), RelationSample(subject='hero', object=['heroine']), RelationSample(subject='hound', object=['bitch']), RelationSample(subject='husband', object=['wife']), RelationSample(subject='king', object=['queen']), RelationSample(subject='lion', object=['lioness']), RelationSample(subject='man', object=['woman']), RelationSample(subject='manager', object=['manageress']), RelationSample(subject='mister', object=['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam']), RelationSample(subject='murderer', object=['murderess']), RelationSample(subject='nephew', object=['niece']), RelationSample(subject='poet', object=['poetess']), RelationSample(subject='policeman', object=['policewoman']), RelationSample(subject='prince', object=['princess']), RelationSample(subject='ram', object=['ewe']), RelationSample(subject='rooster', object=['hen']), RelationSample(subject='sculptor', object=['sculptress']), RelationSample(subject='sir', object=['madam']), RelationSample(subject='son', object=['daughter']), RelationSample(subject='stallion', object=['mare']), RelationSample(subject='stepfather', object=['stepmother']), RelationSample(subject='superman', object=['superwoman']), RelationSample(subject='tiger', object=['tigress']), RelationSample(subject='uncle', object=['aunt']), RelationSample(subject='valet', object=['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid']), RelationSample(subject='waiter', object=['waitress']), RelationSample(subject='webmaster', object=['webmistress'])], _domain=None, _range=None)
2024-06-12 18:02:57 root INFO     starting operator prediction
2024-06-12 18:02:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-12 18:02:57 root INFO     [relation call] using A female {} is known as a
2024-06-12 18:03:07 root INFO     total operator prediction time: 9.39816164970398 seconds
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' woman', ' mother', ' female'] matches ['actress'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' d'] matches ['batwoman'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['sow'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' d', ' mother', ' she'] matches ['girl'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' woman', ' d'] matches ['sister'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' mother', ' mad'] matches ['doe'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' mother', ' female', ' d'] matches ['cow'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' woman', ' mother', ' female'] matches ['businesswoman'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' mother', ' woman'] matches ['chairwoman'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' woman', ' mother'] matches ['mom', 'mum'] is True
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' mother', ' female', ' d'] matches ['mommy', 'mother', 'mom'] is True
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' mother', ' woman'] matches ['duchess'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' mother', ' woman'] matches ['empress'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' woman', ' d'] matches ['mother'] is True
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' mother', ' woman', ' female'] matches ['fisherwoman'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['vixen'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' woman', ' mother', ' female'] matches ['lady', 'gentlewoman', 'madam'] is True
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['goddess'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' ma'] matches ['grandmother'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' mother', ' woman'] matches ['grandma'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' woman', ' mother'] matches ['granddaughter'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' mother'] matches ['bride'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' d'] matches ['headmistress'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' mother'] matches ['heiress'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['heroine'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' d'] matches ['bitch'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' woman', ' she'] matches ['wife'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' mother', ' female', ' d'] matches ['queen'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' mother', ' woman'] matches ['lioness'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['manageress'] is True
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' ma'] matches ['miss', 'missis', 'missus', "mis'ess", 'mrs', 'ms', 'madam'] is True
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' woman'] matches ['murderess'] is True
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' she'] matches ['niece'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' woman', ' female'] matches ['poetess'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' woman', ' mother', ' female'] matches ['policewoman'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' woman'] matches ['princess'] is False
2024-06-12 18:03:09 root INFO     [' m', ' female', ' lady', ' mother', ' d'] matches ['ewe'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' mother', ' n', ' female'] matches ['hen'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' mother'] matches ['sculptress'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['madam'] is True
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' d', ' ma', ' she'] matches ['daughter'] is True
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' woman'] matches ['mare'] is True
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' d', ' she'] matches ['stepmother'] is False
2024-06-12 18:03:09 root INFO     [' m', ' lady', ' female', ' mother', ' woman'] matches ['superwoman'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' female', ' woman'] matches ['tigress'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' woman', ' mother'] matches ['aunt'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' female', ' d', ' woman'] matches ['maid', 'maidservant', 'housemaid', 'chambermaid', 'handmaid', 'handmaiden', 'parlormaid', 'parlourmaid'] is True
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' d', ' female', ' mother'] matches ['waitress'] is False
2024-06-12 18:03:09 root INFO     [' lady', ' m', ' mother', ' d', ' female'] matches ['webmistress'] is False
2024-06-12 18:03:09 root INFO     0.0male - female (50) total: defaultdict(<class 'int'>, {False: 1093, True: 534})
2024-06-12 18:03:09 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='name - occupation', prompt_templates=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], prompt_templates_zs=['{} was known for their work as a ', '{} had the occupation of ', '{} worked as a'], samples=[RelationSample(subject='andersen', object=['writer', 'poet', 'author']), RelationSample(subject='aristotle', object=['philosopher']), RelationSample(subject='balzac', object=['novelist', 'writer']), RelationSample(subject='beethoven', object=['composer']), RelationSample(subject='caesar', object=['emperor', 'commander', 'leader']), RelationSample(subject='columbus', object=['explorer']), RelationSample(subject='confucius', object=['philosopher']), RelationSample(subject='dante', object=['poet']), RelationSample(subject='darwin', object=['naturalist', 'biologist', 'geologist']), RelationSample(subject='depp', object=['actor', 'producer', 'musician']), RelationSample(subject='descartes', object=['mathematician', 'philosopher']), RelationSample(subject='dickens', object=['novelist', 'writer', 'critic', 'author']), RelationSample(subject='edison', object=['inventor', 'businessman']), RelationSample(subject='einstein', object=['physicist', 'scientist']), RelationSample(subject='euler', object=['mathematician', 'physicist', 'astronomer', 'logician', 'engineer']), RelationSample(subject='goethe', object=['poet', 'playwright', 'novelist', 'writer', 'author']), RelationSample(subject='hawking', object=['physicist', 'scientist']), RelationSample(subject='haydn', object=['composer']), RelationSample(subject='hegel', object=['philosopher']), RelationSample(subject='hitler', object=['dictator', 'politician', 'nazi']), RelationSample(subject='hume', object=['philosopher', 'politician']), RelationSample(subject='jolie', object=['actress', 'filmmaker', 'director', 'humanitarian', 'activist']), RelationSample(subject='kant', object=['philosopher']), RelationSample(subject='kepler', object=['mathematician', 'physicist', 'astronomer', 'astrologer']), RelationSample(subject='lincoln', object=['president']), RelationSample(subject='locke', object=['philosopher']), RelationSample(subject='marx', object=['philosopher', 'communist']), RelationSample(subject='maxwell', object=['physicist', 'scientist']), RelationSample(subject='mencius', object=['philosopher']), RelationSample(subject='michelangelo', object=['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer']), RelationSample(subject='moses', object=['prophet', 'leader']), RelationSample(subject='mozart', object=['composer']), RelationSample(subject='napoleon', object=['emperor', 'leader', 'politician', 'commander']), RelationSample(subject='newton', object=['scientist', 'mathematician', 'psysicist', 'philosopher']), RelationSample(subject='pacino', object=['actor', 'director', 'filmmaker']), RelationSample(subject='pascal', object=['mathematician', 'philosopher']), RelationSample(subject='picasso', object=['painter', 'artist', 'sculptor', 'designer']), RelationSample(subject='plato', object=['philosopher']), RelationSample(subject='raphael', object=['painter', 'artist', 'architect']), RelationSample(subject='rembrandt', object=['painter', 'etcher', 'artist']), RelationSample(subject='rousseau', object=['writer', 'author', 'philosopher']), RelationSample(subject='schwarzenegger', object=['actor', 'politician', 'governor']), RelationSample(subject='shakespeare', object=['playwright', 'poet']), RelationSample(subject='spinoza', object=['philosopher']), RelationSample(subject='stalin', object=['dictator', 'politician', 'leader', 'statesman']), RelationSample(subject='strauss', object=['composer']), RelationSample(subject='tolstoi', object=['novelist', 'writer', 'philosopher']), RelationSample(subject='truman', object=['president']), RelationSample(subject='wagner', object=['composer']), RelationSample(subject='wittgenstein', object=['philosopher'])], _domain=None, _range=None)
2024-06-12 18:03:11 root INFO     starting operator prediction
2024-06-12 18:03:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} was known for their work as a )
2024-06-12 18:03:11 root INFO     [relation call] using {} was known for their work as a 
2024-06-12 18:03:22 root INFO     total operator prediction time: 11.134783267974854 seconds
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' ', ' mathematician', ' poet'] matches ['writer', 'poet', 'author'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' scientist'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' scientist'] matches ['novelist', 'writer'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' poet', ' writer', ' composer', ' mathematician'] matches ['composer'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' mathematician'] matches ['emperor', 'commander', 'leader'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' author'] matches ['explorer'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' painter', ' scientist'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' '] matches ['poet'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['naturalist', 'biologist', 'geologist'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' scientist', ' writer', ' mathematician', ' poet'] matches ['actor', 'producer', 'musician'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' scientist'] matches ['mathematician', 'philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' scientist'] matches ['novelist', 'writer', 'critic', 'author'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' mathematician', ' poet', ' scientist'] matches ['inventor', 'businessman'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' mathematician', ' poet', ' scientist'] matches ['physicist', 'scientist'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' scientist'] matches ['mathematician', 'physicist', 'astronomer', 'logician', 'engineer'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' mathematician'] matches ['poet', 'playwright', 'novelist', 'writer', 'author'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' mathematician', ' poet', ' scientist'] matches ['physicist', 'scientist'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' '] matches ['composer'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' '] matches ['dictator', 'politician', 'nazi'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' '] matches ['philosopher', 'politician'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' ', ' poet', ' scientist'] matches ['actress', 'filmmaker', 'director', 'humanitarian', 'activist'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' mathematician', ' scientist', ' poet'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['mathematician', 'physicist', 'astronomer', 'astrologer'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' mathematician', ' poet', ' scientist'] matches ['president'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' mathematician'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' scientist', ' poet', ' mathematician'] matches ['philosopher', 'communist'] is True
2024-06-12 18:03:25 root INFO     ['\n', ' ', '.', ' the', ','] matches ['physicist', 'scientist'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' poet', ' writer', ' ', ' painter'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' painter'] matches ['sculptor', 'painter', 'architect', 'artist', 'poet', 'engineer'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' mathematician'] matches ['prophet', 'leader'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' poet', ' writer', ' scientist', ' mathematician'] matches ['composer'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' mathematician'] matches ['emperor', 'leader', 'politician', 'commander'] is False
2024-06-12 18:03:25 root INFO     [' writer', ' philosopher', ' poet', ' mathematician', ' composer'] matches ['scientist', 'mathematician', 'psysicist', 'philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' mathematician'] matches ['actor', 'director', 'filmmaker'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' '] matches ['mathematician', 'philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' painter', ' poet', ' mathematician'] matches ['painter', 'artist', 'sculptor', 'designer'] is True
2024-06-12 18:03:25 root INFO     [' writer', ' philosopher', ' poet', ' mathematician', ' painter'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' painter', ' mathematician'] matches ['painter', 'artist', 'architect'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' poet', ' writer', ' painter', ' '] matches ['painter', 'etcher', 'artist'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['writer', 'author', 'philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' scientist'] matches ['actor', 'politician', 'governor'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' composer'] matches ['playwright', 'poet'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' poet', ' writer', ' scientist', ' painter'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' '] matches ['dictator', 'politician', 'leader', 'statesman'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' ', ' painter'] matches ['novelist', 'writer', 'philosopher'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' scientist', ' mathematician'] matches ['president'] is False
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' composer'] matches ['composer'] is True
2024-06-12 18:03:25 root INFO     [' philosopher', ' writer', ' poet', ' mathematician', ' painter'] matches ['philosopher'] is True
2024-06-12 18:03:25 root INFO     0.0name - occupation (50) total: defaultdict(<class 'int'>, {False: 1111, True: 565})
2024-06-12 18:03:25 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='country - language', prompt_templates=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], prompt_templates_zs=['The country of {} primarily speaks the language of', 'The main language spoken in {} is', 'In {}, the most commonly spoken language is'], samples=[RelationSample(subject='andorra', object=['catalan']), RelationSample(subject='argentina', object=['spanish']), RelationSample(subject='australia', object=['english']), RelationSample(subject='austria', object=['german']), RelationSample(subject='bahamas', object=['english']), RelationSample(subject='bangladesh', object=['bengali', 'bangla']), RelationSample(subject='barbados', object=['english']), RelationSample(subject='belize', object=['english']), RelationSample(subject='bolivia', object=['spanish']), RelationSample(subject='brazil', object=['portuguese']), RelationSample(subject='cambodia', object=['khmer']), RelationSample(subject='canada', object=['english', 'french']), RelationSample(subject='chile', object=['spanish']), RelationSample(subject='colombia', object=['spanish']), RelationSample(subject='cuba', object=['spanish']), RelationSample(subject='cyprus', object=['greek', 'turkish']), RelationSample(subject='denmark', object=['danish', 'faroese', 'greenlandic', 'german']), RelationSample(subject='ecuador', object=['spanish', 'quechua']), RelationSample(subject='egypt', object=['arabic']), RelationSample(subject='ethiopia', object=['amharic']), RelationSample(subject='fiji', object=['english']), RelationSample(subject='guadeloupe', object=['french']), RelationSample(subject='guam', object=['english', 'chamorro']), RelationSample(subject='guatemala', object=['spanish']), RelationSample(subject='guyana', object=['english']), RelationSample(subject='haiti', object=['creole', 'french']), RelationSample(subject='iran', object=['persian']), RelationSample(subject='iraq', object=['arabic', 'kurdish']), RelationSample(subject='ireland', object=['english', 'irish', 'gaelic']), RelationSample(subject='israel', object=['hebrew', 'arabic']), RelationSample(subject='jamaica', object=['english', 'creole']), RelationSample(subject='jordan', object=['arabic']), RelationSample(subject='kazakhstan', object=['kazak', 'qazaq', 'russian']), RelationSample(subject='kosovo', object=['albanian', 'serbian']), RelationSample(subject='kuwait', object=['arabic']), RelationSample(subject='mexico', object=['spanish', 'nahuatl']), RelationSample(subject='moldova', object=['moldovan', 'romanian']), RelationSample(subject='morocco', object=['berber', 'arabic']), RelationSample(subject='mozambique', object=['portuguese']), RelationSample(subject='netherlands', object=['dutch', 'frisian']), RelationSample(subject='nicaragua', object=['spanish']), RelationSample(subject='norway', object=['norwegian', 'bokmål', 'bokmal', 'nynorsk']), RelationSample(subject='palestine', object=['arabic']), RelationSample(subject='peru', object=['spanish']), RelationSample(subject='philippines', object=['tagalog', 'filipino']), RelationSample(subject='switzerland', object=['german', 'french', 'italian']), RelationSample(subject='syria', object=['arabic']), RelationSample(subject='taiwan', object=['chinese']), RelationSample(subject='usa', object=['english']), RelationSample(subject='venezuela', object=['spanish'])], _domain=None, _range=None)
2024-06-12 18:03:27 root INFO     starting operator prediction
2024-06-12 18:03:27 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The country of {} primarily speaks the language of)
2024-06-12 18:03:27 root INFO     [relation call] using The country of {} primarily speaks the language of
2024-06-12 18:03:40 root INFO     total operator prediction time: 13.25737977027893 seconds
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['catalan'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['german'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' d'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['bengali', 'bangla'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' c'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' k'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['portuguese'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['khmer'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' d'] matches ['english', 'french'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' es'] matches ['greek', 'turkish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['danish', 'faroese', 'greenlandic', 'german'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish', 'quechua'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['arabic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['amharic'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['french'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['english', 'chamorro'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' c'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' d'] matches ['creole', 'french'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['persian'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' d'] matches ['arabic', 'kurdish'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' c'] matches ['english', 'irish', 'gaelic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['hebrew', 'arabic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['english', 'creole'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['arabic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['kazak', 'qazaq', 'russian'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['albanian', 'serbian'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['arabic'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish', 'nahuatl'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' cre'] matches ['moldovan', 'romanian'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['berber', 'arabic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['portuguese'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' eng'] matches ['dutch', 'frisian'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' k'] matches ['norwegian', 'bokmål', 'bokmal', 'nynorsk'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' ar'] matches ['arabic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' d'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['tagalog', 'filipino'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['german', 'french', 'italian'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['arabic'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' port'] matches ['chinese'] is False
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' g', ' french', ' d'] matches ['english'] is True
2024-06-12 18:03:43 root INFO     [' english', ' sp', ' french', ' g', ' ar'] matches ['spanish'] is True
2024-06-12 18:03:43 root INFO     0.0country - language (50) total: defaultdict(<class 'int'>, {False: 1127, True: 599})
2024-06-12 18:03:43 __main__ INFO     starting test: <class 'lre.operators.Word2VecIclEstimator'> on Relation(name='things - color', prompt_templates=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], prompt_templates_zs=['A female {} is known as a', 'The female counterpart of a {} is called a', 'The female equivalent of a {} is called a'], samples=[RelationSample(subject='ant', object=['black', 'brown', 'red']), RelationSample(subject='apple', object=['red', 'orange', 'yellow', 'golden']), RelationSample(subject='blackboard', object=['black', 'green']), RelationSample(subject='blood', object=['red']), RelationSample(subject='blueberry', object=['blue', 'black']), RelationSample(subject='broccoli', object=['green']), RelationSample(subject='bruise', object=['blue', 'purple']), RelationSample(subject='cabbage', object=['green']), RelationSample(subject='carrot', object=['orange', 'red', 'yellow']), RelationSample(subject='cauliflower', object=['white', 'green', 'yellow', 'yellowish']), RelationSample(subject='celery', object=['green', 'white', 'brown']), RelationSample(subject='cherry', object=['red', 'yellow', 'black']), RelationSample(subject='chocolate', object=['white', 'brown', 'black']), RelationSample(subject='cloud', object=['white', 'gray', 'grey']), RelationSample(subject='coal', object=['black']), RelationSample(subject='coffee', object=['black', 'brown']), RelationSample(subject='cranberry', object=['red', 'purple', 'pink']), RelationSample(subject='cream', object=['white']), RelationSample(subject='crow', object=['black']), RelationSample(subject='cucumber', object=['green']), RelationSample(subject='emerald', object=['green']), RelationSample(subject='fridge', object=['white', 'silver', 'black']), RelationSample(subject='frog', object=['green', 'brown', 'grey', 'gray']), RelationSample(subject='grapes', object=['black', 'red', 'green', 'purple']), RelationSample(subject='grass', object=['green']), RelationSample(subject='leaves', object=['green', 'red', 'yellow']), RelationSample(subject='milk', object=['white']), RelationSample(subject='paper', object=['white', 'color']), RelationSample(subject='parsley', object=['green']), RelationSample(subject='peony', object=['red', 'white', 'pink', 'purple']), RelationSample(subject='pepper', object=['black', 'red', 'green', 'yellow', 'orange']), RelationSample(subject='potato', object=['brown']), RelationSample(subject='radish', object=['red', 'pink', 'white', 'green', 'black']), RelationSample(subject='raven', object=['black']), RelationSample(subject='rose', object=['red', 'yellow', 'pink', 'white', 'blue']), RelationSample(subject='ruby', object=['red']), RelationSample(subject='salt', object=['white']), RelationSample(subject='sapphire', object=['blue']), RelationSample(subject='sea', object=['blue', 'green', 'gray', 'grey']), RelationSample(subject='sky', object=['blue', 'gray', 'grey']), RelationSample(subject='snow', object=['white']), RelationSample(subject='soil', object=['black', 'brown', 'dark']), RelationSample(subject='spinach', object=['green']), RelationSample(subject='sugar', object=['white', 'brown']), RelationSample(subject='sun', object=['yellow', 'gold']), RelationSample(subject='swan', object=['white', 'black', 'gray', 'grey']), RelationSample(subject='tea', object=['black', 'green', 'white', 'red', 'brown', 'yellow']), RelationSample(subject='tomato', object=['red']), RelationSample(subject='toothpaste', object=['white']), RelationSample(subject='yoghurt', object=['white', 'pink'])], _domain=None, _range=None)
2024-06-12 18:03:45 root INFO     starting operator prediction
2024-06-12 18:03:45 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A female {} is known as a)
2024-06-12 18:03:45 root INFO     [relation call] using A female {} is known as a
2024-06-12 18:03:54 root INFO     total operator prediction time: 9.141617774963379 seconds
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' yellow'] matches ['black', 'brown', 'red'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' yellow'] matches ['red', 'orange', 'yellow', 'golden'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' blue', ' yellow'] matches ['black', 'green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' blue', ' black'] matches ['red'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' yellow', ' black'] matches ['blue', 'black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' blue', ' yellow'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' black', ' blue'] matches ['blue', 'purple'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' yellow', ' red', ' black'] matches ['orange', 'red', 'yellow'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' yellow', ' black'] matches ['white', 'green', 'yellow', 'yellowish'] is True
2024-06-12 18:03:57 root INFO     [' green', ' white', ' red', ' blue', ' black'] matches ['green', 'white', 'brown'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' black', ' blue'] matches ['red', 'yellow', 'black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['white', 'brown', 'black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' blue', ' black'] matches ['white', 'gray', 'grey'] is True
2024-06-12 18:03:57 root INFO     [' white', ' black', ' green', ' blue', ' red'] matches ['black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' blue'] matches ['black', 'brown'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' blue', ' black'] matches ['red', 'purple', 'pink'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' black', ' blue'] matches ['white'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' blue'] matches ['black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' green', ' white', ' red', ' blue', ' black'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' black', ' blue', ' green', ' red'] matches ['white', 'silver', 'black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['green', 'brown', 'grey', 'gray'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' black', ' blue'] matches ['black', 'red', 'green', 'purple'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' blue', ' yellow'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['green', 'red', 'yellow'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' blue', ' red'] matches ['white'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['white', 'color'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' yellow', ' blue'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['red', 'white', 'pink', 'purple'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['black', 'red', 'green', 'yellow', 'orange'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['red', 'pink', 'white', 'green', 'black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' black', ' green', ' blue', ' red'] matches ['black'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['red', 'yellow', 'pink', 'white', 'blue'] is True
2024-06-12 18:03:57 root INFO     [' white', ' red', ' green', ' black', ' blue'] matches ['red'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' blue'] matches ['white'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' blue', ' red'] matches ['blue'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['blue', 'green', 'gray', 'grey'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' blue', ' red', ' black'] matches ['blue', 'gray', 'grey'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' blue', ' red', ' black'] matches ['white'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['black', 'brown', 'dark'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['green'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' yellow'] matches ['white', 'brown'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['yellow', 'gold'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' blue', ' black'] matches ['white', 'black', 'gray', 'grey'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' black', ' red', ' blue'] matches ['black', 'green', 'white', 'red', 'brown', 'yellow'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' yellow'] matches ['red'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' blue', ' yellow'] matches ['white'] is True
2024-06-12 18:03:57 root INFO     [' white', ' green', ' red', ' black', ' blue'] matches ['white', 'pink'] is True
2024-06-12 18:03:57 root INFO     0.0things - color (50) total: defaultdict(<class 'int'>, {False: 1127, True: 648})
2024-06-12 18:06:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:06:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:06:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:10:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:10:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:10:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:14:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:14:12 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:14:12 root INFO     total operator prediction time: 1921.1593532562256 seconds
2024-06-12 18:14:15 root INFO     [' more', ' much', ' ', ' less', ' ang'] matches ['angrier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' cheaper', ' less', ' harder'] matches ['cheaper'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' trick', ' cut', '\n'] matches ['cleverer'] is False
2024-06-12 18:14:15 root INFO     [' more', ' much', ' harder', ' finer', '\n'] matches ['coarser'] is False
2024-06-12 18:14:15 root INFO     [' more', ' much', ' less', ' harder', '\n'] matches ['costlier'] is False
2024-06-12 18:14:15 root INFO     [' cut', ' more', ' much', ' cute', ' bigger'] matches ['cuter'] is True
2024-06-12 18:14:15 root INFO     [' more', ' dens', ' much', ' less', ' he'] matches ['denser'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' d', '\n', ' bigger'] matches ['dumber'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' tougher', ' f', ' bigger'] matches ['fiercer'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' harder', ' hand', ' trick'] matches ['handier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' happier', ' much', ' healthier', ' h'] matches ['happier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' harder', ' healthier', ' much', ' h'] matches ['hardier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' harsher', ' harder', ' much', ' tougher'] matches ['harsher'] is True
2024-06-12 18:14:15 root INFO     [' more', ' healthier', ' much', ' harder', '\n'] matches ['healthier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' hotter', ' much', ' hot', ' h'] matches ['hotter'] is True
2024-06-12 18:14:15 root INFO     [' more', ' bigger', ' much', ' hug', ' harder'] matches ['huger'] is True
2024-06-12 18:14:15 root INFO     [' more', ' harder', ' much', ' h', ' healthier'] matches ['hungrier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' laz', ' less', ' much', ' '] matches ['lazier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' less', ' harder', ' he'] matches ['lengthier'] is False
2024-06-12 18:14:15 root INFO     [' more', ' luck', ' much', ' less', ' trick'] matches ['luckier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' mad', ' a', ' '] matches ['madder'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' heart', ' mer', ' harder'] matches ['merrier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' mild', ' much', ' less', '\n'] matches ['milder'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', '\n', ' he', ' less'] matches ['moister'] is False
2024-06-12 18:14:15 root INFO     [' more', ' n', ' much', ' nicer', ' less'] matches ['nastier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' ne', ' much', ' n', ' neat'] matches ['neater'] is True
2024-06-12 18:14:15 root INFO     [' more', ' nicer', ' much', ' n', ' nic'] matches ['nicer'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' less', ' n', ' '] matches ['noisier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', '\n', ' ', ' tougher'] matches ['prouder'] is False
2024-06-12 18:14:15 root INFO     [' more', ' much', ' pure', '\n', ' '] matches ['purer'] is True
2024-06-12 18:14:15 root INFO     [' more', ' risk', ' much', ' less', ' safer'] matches ['riskier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' rock', ' trick', ' much', ' ro'] matches ['rockier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' r', ' less', ' '] matches ['ruder'] is True
2024-06-12 18:14:15 root INFO     [' more', ' s', ' much', ' less', ' sad'] matches ['sadder'] is True
2024-06-12 18:14:15 root INFO     [' more', ' scar', ' much', ' harder', ' sc'] matches ['scarier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' sex', ' s', ' much', ' he'] matches ['sexier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' stick', ' trick', ' much', ' '] matches ['stickier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' stricter', ' st', '\n'] matches ['stricter'] is True
2024-06-12 18:14:15 root INFO     [' more', ' stronger', ' much', ' tougher', '\n'] matches ['stronger'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' less', ' ', '\n'] matches ['subtler'] is False
2024-06-12 18:14:15 root INFO     [' more', ' sun', ' much', ' s', '\n'] matches ['sunnier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' tast', ' much', ' tasty', ' taste'] matches ['tastier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' tin', ' much', ' bigger', ' trick'] matches ['tinier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' trick', ' much', ' harder', ' tougher'] matches ['trickier'] is True
2024-06-12 18:14:15 root INFO     [' u', ' more', ' much', ' ', ' hug'] matches ['uglier'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' less', ' v', '\n'] matches ['vaguer'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', ' greater', ' v', ' bigger'] matches ['vaster'] is True
2024-06-12 18:14:15 root INFO     [' more', ' weaker', ' much', ' stronger', ' we'] matches ['weaker'] is True
2024-06-12 18:14:15 root INFO     [' more', ' much', '\n', ' healthier', ' he'] matches ['wealthier'] is False
2024-06-12 18:14:15 root INFO     [' more', ' we', ' much', ' weird', ' harder'] matches ['weirder'] is True
2024-06-12 18:14:15 root INFO     adj - comparative (50) total: defaultdict(<class 'int'>, {True: 42, False: 8})
2024-06-12 18:14:15 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun - plural_reg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='album', object=['albums']), RelationSample(subject='application', object=['applications']), RelationSample(subject='area', object=['areas']), RelationSample(subject='car', object=['cars']), RelationSample(subject='college', object=['colleges']), RelationSample(subject='council', object=['councils']), RelationSample(subject='customer', object=['customers']), RelationSample(subject='day', object=['days']), RelationSample(subject='death', object=['deaths']), RelationSample(subject='department', object=['departments']), RelationSample(subject='development', object=['developments']), RelationSample(subject='difference', object=['differences']), RelationSample(subject='director', object=['directors']), RelationSample(subject='event', object=['events']), RelationSample(subject='example', object=['examples']), RelationSample(subject='fact', object=['facts']), RelationSample(subject='friend', object=['friends']), RelationSample(subject='god', object=['gods']), RelationSample(subject='government', object=['governments']), RelationSample(subject='hour', object=['hours']), RelationSample(subject='idea', object=['ideas']), RelationSample(subject='language', object=['languages']), RelationSample(subject='law', object=['laws']), RelationSample(subject='member', object=['members']), RelationSample(subject='month', object=['months']), RelationSample(subject='night', object=['nights']), RelationSample(subject='office', object=['offices']), RelationSample(subject='period', object=['periods']), RelationSample(subject='player', object=['players']), RelationSample(subject='population', object=['populations']), RelationSample(subject='problem', object=['problems']), RelationSample(subject='product', object=['products']), RelationSample(subject='resource', object=['resources']), RelationSample(subject='river', object=['rivers']), RelationSample(subject='road', object=['roads']), RelationSample(subject='role', object=['roles']), RelationSample(subject='science', object=['sciences']), RelationSample(subject='solution', object=['solutions']), RelationSample(subject='song', object=['songs']), RelationSample(subject='street', object=['streets']), RelationSample(subject='student', object=['students']), RelationSample(subject='system', object=['systems']), RelationSample(subject='thing', object=['things']), RelationSample(subject='town', object=['towns']), RelationSample(subject='user', object=['users']), RelationSample(subject='version', object=['versions']), RelationSample(subject='village', object=['villages']), RelationSample(subject='website', object=['websites']), RelationSample(subject='week', object=['weeks']), RelationSample(subject='year', object=['years'])], _domain=None, _range=None)
2024-06-12 18:14:17 root INFO     starting operator prediction
2024-06-12 18:14:17 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 18:14:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:18:18 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:18:18 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:18:19 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:22:16 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:22:16 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:22:16 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:26:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:26:15 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:26:15 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:30:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:30:12 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:30:13 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:34:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:34:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:34:12 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:38:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:38:11 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:38:11 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:42:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:42:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:42:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:46:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:46:09 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:46:09 root INFO     total operator prediction time: 1912.4575819969177 seconds
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' al'] matches ['albums'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['applications'] is False
2024-06-12 18:46:12 root INFO     [' areas', '\n', ' ', ' the', ' ('] matches ['areas'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['cars'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['colleges'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' councils'] matches ['councils'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['customers'] is False
2024-06-12 18:46:12 root INFO     [' days', '\n', ' ', ' the', ' ('] matches ['days'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['deaths'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' departments', ' the', ' ('] matches ['departments'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['developments'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['differences'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['directors'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' events', ' ('] matches ['events'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' examples', ' ('] matches ['examples'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['facts'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['friends'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['gods'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['governments'] is False
2024-06-12 18:46:12 root INFO     [' hours', '\n', ' ', ' the', ' ('] matches ['hours'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['ideas'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' languages', ' the', ' ('] matches ['languages'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' laws', ' the', ' ('] matches ['laws'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['members'] is False
2024-06-12 18:46:12 root INFO     [' months', '\n', ' ', ' the', ' ('] matches ['months'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' nights'] matches ['nights'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' offices'] matches ['offices'] is True
2024-06-12 18:46:12 root INFO     [' periods', '\n', ' ', ' the', ' ('] matches ['periods'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['players'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' populations', ' ('] matches ['populations'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['problems'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['products'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' resources', ' ', ' the', ' ('] matches ['resources'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' a'] matches ['rivers'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' roads', ' ('] matches ['roads'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['roles'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '...'] matches ['sciences'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' solutions'] matches ['solutions'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['songs'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' streets', ' the', ' ('] matches ['streets'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' students'] matches ['students'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' systems', ' the', ' ('] matches ['systems'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' things'] matches ['things'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' towns', ' (', ' the'] matches ['towns'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', '/'] matches ['users'] is False
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' versions'] matches ['versions'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' villages', ' (', ' the'] matches ['villages'] is True
2024-06-12 18:46:12 root INFO     ['\n', ' ', ' the', ' (', ' websites'] matches ['websites'] is True
2024-06-12 18:46:12 root INFO     [' weeks', '\n', ' ', ' the', ' ('] matches ['weeks'] is True
2024-06-12 18:46:12 root INFO     [' years', '\n', ' the', ' ', ' ('] matches ['years'] is True
2024-06-12 18:46:12 root INFO     noun - plural_reg (50) total: defaultdict(<class 'int'>, {True: 70, False: 30})
2024-06-12 18:46:12 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_inf - Ved', prompt_templates=['If the present form is {}, the past form is', 'After I {} something, it has been'], prompt_templates_zs=['If the present form is {}, the past form is', 'After I {} something, it has been'], samples=[RelationSample(subject='accept', object=['accepted']), RelationSample(subject='achieve', object=['achieved']), RelationSample(subject='add', object=['added']), RelationSample(subject='agree', object=['agreed']), RelationSample(subject='allow', object=['allowed']), RelationSample(subject='announce', object=['announced']), RelationSample(subject='appear', object=['appeared']), RelationSample(subject='apply', object=['applied']), RelationSample(subject='ask', object=['asked']), RelationSample(subject='attend', object=['attended']), RelationSample(subject='become', object=['became']), RelationSample(subject='believe', object=['believed']), RelationSample(subject='consider', object=['considered']), RelationSample(subject='continue', object=['continued']), RelationSample(subject='create', object=['created']), RelationSample(subject='decide', object=['decided']), RelationSample(subject='describe', object=['described']), RelationSample(subject='develop', object=['developed']), RelationSample(subject='discover', object=['discovered']), RelationSample(subject='enjoy', object=['enjoyed']), RelationSample(subject='ensure', object=['ensured']), RelationSample(subject='establish', object=['established']), RelationSample(subject='expect', object=['expected']), RelationSample(subject='follow', object=['followed']), RelationSample(subject='hear', object=['heard']), RelationSample(subject='identify', object=['identified']), RelationSample(subject='improve', object=['improved']), RelationSample(subject='include', object=['included']), RelationSample(subject='introduce', object=['introduced']), RelationSample(subject='involve', object=['involved']), RelationSample(subject='locate', object=['located']), RelationSample(subject='lose', object=['lost']), RelationSample(subject='manage', object=['managed']), RelationSample(subject='marry', object=['married']), RelationSample(subject='perform', object=['performed']), RelationSample(subject='provide', object=['provided']), RelationSample(subject='publish', object=['published']), RelationSample(subject='receive', object=['received']), RelationSample(subject='reduce', object=['reduced']), RelationSample(subject='refer', object=['referred']), RelationSample(subject='relate', object=['related']), RelationSample(subject='remain', object=['remained']), RelationSample(subject='replace', object=['replaced']), RelationSample(subject='require', object=['required']), RelationSample(subject='seem', object=['seemed']), RelationSample(subject='send', object=['sent']), RelationSample(subject='spend', object=['spent']), RelationSample(subject='tell', object=['told']), RelationSample(subject='understand', object=['understood']), RelationSample(subject='unite', object=['united'])], _domain=None, _range=None)
2024-06-12 18:46:14 root INFO     starting operator prediction
2024-06-12 18:46:14 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If the present form is {}, the past form is)
2024-06-12 18:46:14 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:50:17 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:50:17 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:50:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:54:19 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:54:19 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:54:19 root INFO     [order_1_approx] starting weight calculation
2024-06-12 18:58:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 18:58:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 18:58:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:02:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:02:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:02:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:06:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:06:21 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:06:21 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:10:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:10:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:10:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:14:25 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:14:25 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:14:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:18:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:18:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:18:28 root INFO     total operator prediction time: 1933.8448457717896 seconds
2024-06-12 19:18:30 root INFO     [' accepted', '\n', ' allowed', ' to', ' be'] matches ['accepted'] is True
2024-06-12 19:18:30 root INFO     [' achieved', '\n', ' be', ' ', ' to'] matches ['achieved'] is True
2024-06-12 19:18:30 root INFO     [' to', '\n', ' be', ' not', ' added'] matches ['added'] is True
2024-06-12 19:18:30 root INFO     [' agreed', '\n', ' allowed', ' ', ' be'] matches ['agreed'] is True
2024-06-12 19:18:30 root INFO     [' allowed', '\n', ' be', ' to', ' not'] matches ['allowed'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' ', ' be', ' to', ' been'] matches ['announced'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' ', ' remained', ' be', ' been'] matches ['appeared'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' applied', ' to', ' ', ' be'] matches ['applied'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' to', ' ', ' be', ' been'] matches ['asked'] is False
2024-06-12 19:18:30 root INFO     [' attended', '\n', ' ', ' to', ' been'] matches ['attended'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' been', ' ', ' remained'] matches ['became'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' considered', ' been', ' '] matches ['believed'] is True
2024-06-12 19:18:30 root INFO     [' considered', '\n', ' be', ' ', ' been'] matches ['considered'] is True
2024-06-12 19:18:30 root INFO     [' continued', '\n', ' continue', ' considered', ' be'] matches ['continued'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' created', ' be', ' to', ' '] matches ['created'] is True
2024-06-12 19:18:30 root INFO     [' decided', '\n', ' ', ' considered', ' be'] matches ['decided'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' considered', ' to'] matches ['described'] is False
2024-06-12 19:18:30 root INFO     [' developed', '\n', ' be', ' develop', ' '] matches ['developed'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' to', ' discovered'] matches ['discovered'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' enjoyed', ' ', ' be', ' to'] matches ['enjoyed'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' considered', ' not'] matches ['ensured'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' established', ' to'] matches ['established'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' considered', ' ', ' to'] matches ['expected'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' to', ' be', ' ', ' considered'] matches ['followed'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' been', ' to', ' '] matches ['heard'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' to', ' ', ' considered'] matches ['identified'] is False
2024-06-12 19:18:30 root INFO     [' improved', '\n', ' be', ' to', ' considered'] matches ['improved'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' to', ' included', ' '] matches ['included'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' to', ' considered'] matches ['introduced'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' ', ' involved', ' be', ' considered'] matches ['involved'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' to', ' considered'] matches ['located'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' lost', ' to', ' '] matches ['lost'] is True
2024-06-12 19:18:30 root INFO     [' managed', '\n', ' manage', ' ', ' be'] matches ['managed'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' ', ' to', ' be', ' managed'] matches ['married'] is False
2024-06-12 19:18:30 root INFO     [' performed', '\n', ' be', ' to', ' '] matches ['performed'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' to', ' ', ' provided'] matches ['provided'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' to', ' ', ' not'] matches ['published'] is False
2024-06-12 19:18:30 root INFO     [' received', ' be', '\n', ' to', ' '] matches ['received'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' reduced', ' considered', ' '] matches ['reduced'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' been', ' ', ' referred'] matches ['referred'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' to', ' related'] matches ['related'] is True
2024-06-12 19:18:30 root INFO     [' remained', '\n', ' remain', ' be', ' '] matches ['remained'] is True
2024-06-12 19:18:30 root INFO     [' be', '\n', ' replaced', ' to', ' '] matches ['replaced'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' ', ' required', ' to'] matches ['required'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' remained', ' been', ' considered', ' '] matches ['seemed'] is False
2024-06-12 19:18:30 root INFO     [' be', '\n', ' to', ' been', ' '] matches ['sent'] is False
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' spent', ' to', ' '] matches ['spent'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' to', ' been', ' '] matches ['told'] is True
2024-06-12 19:18:30 root INFO     ['\n', ' be', ' considered', ' understood', ' '] matches ['understood'] is True
2024-06-12 19:18:30 root INFO     [' united', '\n', ' unified', ' be', ' '] matches ['united'] is True
2024-06-12 19:18:30 root INFO     verb_inf - Ved (50) total: defaultdict(<class 'int'>, {True: 105, False: 45})
2024-06-12 19:18:30 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_Ving - Ved', prompt_templates=['After something is {}, it has'], prompt_templates_zs=['After something is {}, it has'], samples=[RelationSample(subject='adding', object=['added']), RelationSample(subject='agreeing', object=['agreed']), RelationSample(subject='allowing', object=['allowed']), RelationSample(subject='announcing', object=['announced']), RelationSample(subject='appearing', object=['appeared']), RelationSample(subject='applying', object=['applied']), RelationSample(subject='appointing', object=['appointed']), RelationSample(subject='asking', object=['asked']), RelationSample(subject='attending', object=['attended']), RelationSample(subject='becoming', object=['became']), RelationSample(subject='considering', object=['considered']), RelationSample(subject='containing', object=['contained']), RelationSample(subject='continuing', object=['continued']), RelationSample(subject='creating', object=['created']), RelationSample(subject='deciding', object=['decided']), RelationSample(subject='describing', object=['described']), RelationSample(subject='developing', object=['developed']), RelationSample(subject='establishing', object=['established']), RelationSample(subject='existing', object=['existed']), RelationSample(subject='expecting', object=['expected']), RelationSample(subject='failing', object=['failed']), RelationSample(subject='following', object=['followed']), RelationSample(subject='hearing', object=['heard']), RelationSample(subject='improving', object=['improved']), RelationSample(subject='including', object=['included']), RelationSample(subject='introducing', object=['introduced']), RelationSample(subject='involving', object=['involved']), RelationSample(subject='locating', object=['located']), RelationSample(subject='losing', object=['lost']), RelationSample(subject='managing', object=['managed']), RelationSample(subject='marrying', object=['married']), RelationSample(subject='operating', object=['operated']), RelationSample(subject='performing', object=['performed']), RelationSample(subject='proposing', object=['proposed']), RelationSample(subject='providing', object=['provided']), RelationSample(subject='publishing', object=['published']), RelationSample(subject='receiving', object=['received']), RelationSample(subject='reducing', object=['reduced']), RelationSample(subject='relating', object=['related']), RelationSample(subject='remaining', object=['remained']), RelationSample(subject='replacing', object=['replaced']), RelationSample(subject='representing', object=['represented']), RelationSample(subject='requiring', object=['required']), RelationSample(subject='sending', object=['sent']), RelationSample(subject='spending', object=['spent']), RelationSample(subject='suffering', object=['suffered']), RelationSample(subject='teaching', object=['taught']), RelationSample(subject='telling', object=['told']), RelationSample(subject='understanding', object=['understood']), RelationSample(subject='uniting', object=['united'])], _domain=None, _range=None)
2024-06-12 19:18:33 root INFO     starting operator prediction
2024-06-12 19:18:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:22:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:22:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:22:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:26:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:26:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:26:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:30:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:30:31 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:30:32 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:34:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:34:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:34:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:38:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:38:31 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:38:31 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:42:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:42:28 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:42:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:46:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:46:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:46:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:50:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:50:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:50:29 root INFO     total operator prediction time: 1916.7335135936737 seconds
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['added'] is False
2024-06-12 19:50:32 root INFO     [' agreed', ' been', '\n', ' ', ' not'] matches ['agreed'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['allowed'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' not'] matches ['announced'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' become'] matches ['appeared'] is False
2024-06-12 19:50:32 root INFO     [' been', ' applied', '\n', ' agreed', ' '] matches ['applied'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' appointed', ' agreed', ' '] matches ['appointed'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' asked'] matches ['asked'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['attended'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' become', ' agreed', ' '] matches ['became'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' considered'] matches ['considered'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' not', ' agreed'] matches ['contained'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' not'] matches ['continued'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' created', ' ', ' become'] matches ['created'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' decided'] matches ['decided'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' not'] matches ['described'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' developed', ' become'] matches ['developed'] is True
2024-06-12 19:50:32 root INFO     [' been', ' established', '\n', ' ', ' agreed'] matches ['established'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' existed', ' agreed', ' '] matches ['existed'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', '...'] matches ['expected'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['failed'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['followed'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' heard', ' '] matches ['heard'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' become'] matches ['improved'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['included'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' made'] matches ['introduced'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' made'] matches ['involved'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' not', ' agreed'] matches ['located'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' not'] matches ['lost'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' managed', ' agreed', ' '] matches ['managed'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['married'] is False
2024-06-12 19:50:32 root INFO     [' been', ' operated', '\n', ' ', ' agreed'] matches ['operated'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' performed', ' ', ' agreed'] matches ['performed'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' proposed', ' agreed', ' '] matches ['proposed'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' provided', ' agreed', ' '] matches ['provided'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' not', ' agreed'] matches ['published'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' received', ' ', ' agreed'] matches ['received'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['reduced'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['related'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['remained'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' replaced', ' ', ' agreed'] matches ['replaced'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' represented', ' agreed'] matches ['represented'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', '...'] matches ['required'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' sent', ' ', ' agreed'] matches ['sent'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' agreed', ' not'] matches ['spent'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' ', ' become', ' not'] matches ['suffered'] is False
2024-06-12 19:50:32 root INFO     [' been', ' taught', '\n', ' ', ' agreed'] matches ['taught'] is True
2024-06-12 19:50:32 root INFO     [' been', '\n', ' agreed', ' ', ' not'] matches ['told'] is False
2024-06-12 19:50:32 root INFO     [' been', '\n', ' understood', ' agreed', ' '] matches ['understood'] is True
2024-06-12 19:50:32 root INFO     [' been', ' united', '\n', ' agreed', ' '] matches ['united'] is True
2024-06-12 19:50:32 root INFO     verb_Ving - Ved (50) total: defaultdict(<class 'int'>, {True: 128, False: 72})
2024-06-12 19:50:32 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj - superlative', prompt_templates=['When something is the most {}, it is', 'If something is the most {}, it is'], prompt_templates_zs=['When something is the most {}, it is', 'If something is the most {}, it is'], samples=[RelationSample(subject='able', object=['ablest']), RelationSample(subject='angry', object=['angriest']), RelationSample(subject='cheap', object=['cheapest']), RelationSample(subject='clever', object=['cleverest']), RelationSample(subject='costly', object=['costliest']), RelationSample(subject='cruel', object=['cruelest']), RelationSample(subject='cute', object=['cutest']), RelationSample(subject='dense', object=['densest']), RelationSample(subject='dumb', object=['dumbest']), RelationSample(subject='fierce', object=['fiercest']), RelationSample(subject='handy', object=['handiest']), RelationSample(subject='happy', object=['happiest']), RelationSample(subject='hardy', object=['hardiest']), RelationSample(subject='harsh', object=['harshest']), RelationSample(subject='healthy', object=['healthiest']), RelationSample(subject='hot', object=['hottest']), RelationSample(subject='huge', object=['hugest']), RelationSample(subject='hungry', object=['hungriest']), RelationSample(subject='lazy', object=['laziest']), RelationSample(subject='lengthy', object=['lengthiest']), RelationSample(subject='lucky', object=['luckiest']), RelationSample(subject='merry', object=['merriest']), RelationSample(subject='mild', object=['mildest']), RelationSample(subject='nasty', object=['nastiest']), RelationSample(subject='neat', object=['neatest']), RelationSample(subject='nice', object=['nicest']), RelationSample(subject='noisy', object=['noisiest']), RelationSample(subject='polite', object=['politest']), RelationSample(subject='proud', object=['proudest']), RelationSample(subject='pure', object=['purest']), RelationSample(subject='rare', object=['rarest']), RelationSample(subject='risky', object=['riskiest']), RelationSample(subject='rude', object=['rudest']), RelationSample(subject='sad', object=['saddest']), RelationSample(subject='scary', object=['scariest']), RelationSample(subject='sexy', object=['sexiest']), RelationSample(subject='shiny', object=['shiniest']), RelationSample(subject='strange', object=['strangest']), RelationSample(subject='strict', object=['strictest']), RelationSample(subject='strong', object=['strongest']), RelationSample(subject='subtle', object=['subtlest']), RelationSample(subject='sunny', object=['sunniest']), RelationSample(subject='tasty', object=['tastiest']), RelationSample(subject='tiny', object=['tiniest']), RelationSample(subject='tricky', object=['trickiest']), RelationSample(subject='ugly', object=['ugliest']), RelationSample(subject='vague', object=['vaguest']), RelationSample(subject='weak', object=['weakest']), RelationSample(subject='wealthy', object=['wealthiest']), RelationSample(subject='weird', object=['weirdest'])], _domain=None, _range=None)
2024-06-12 19:50:34 root INFO     starting operator prediction
2024-06-12 19:50:34 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When something is the most {}, it is)
2024-06-12 19:50:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:54:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:54:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:54:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 19:58:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 19:58:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 19:58:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:02:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:02:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:02:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:06:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:06:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:06:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:10:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:10:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:10:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:14:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:14:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:14:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:18:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:18:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:18:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:22:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:22:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:22:36 root INFO     total operator prediction time: 1922.3557069301605 seconds
2024-06-12 20:22:39 root INFO     [' most', ' the', ' easiest', ' least', ' best'] matches ['ablest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' ang', ' least', '\n'] matches ['angriest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' easiest', ' hardest'] matches ['cheapest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' cle', ' least', '\n'] matches ['cleverest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' hardest', '\n'] matches ['costliest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' cruel', ' cr'] matches ['cruelest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' u', '\n'] matches ['cutest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' hardest', '\n'] matches ['densest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' hardest', '\n', ' least'] matches ['dumbest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' f', ' the', ' strongest', ' least'] matches ['fiercest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' hardest', ' easiest', ' the', ' least'] matches ['handiest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' happiest', ' the', ' least', ' unh'] matches ['happiest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' hardest', ' the', ' least', '\n'] matches ['hardiest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' hars', ' hardest', ' the', ' least'] matches ['harshest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' health', ' the', ' least', ' hardest'] matches ['healthiest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' hottest', ' hardest', ' the', ' least'] matches ['hottest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' hardest', ' the', ' least', '\n'] matches ['hugest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' hardest', ' least', '\n'] matches ['hungriest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' laz', ' the', ' least', ' easiest'] matches ['laziest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' least', ' the', ' hardest', '\n'] matches ['lengthiest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' luck', ' the', ' least', '\n'] matches ['luckiest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' mer', ' the', ' least', '\n'] matches ['merriest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' easiest', '\n'] matches ['mildest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' n', ' hardest'] matches ['nastiest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' least', ' easiest', ' the', ' neat'] matches ['neatest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' nic', ' easiest'] matches ['nicest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' hardest', '\n'] matches ['noisiest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', '\n', ' best'] matches ['politest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' hardest', ' least', ' proud'] matches ['proudest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', '\n', ' hardest', ' least'] matches ['purest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' least', ' the', ' hardest', ' rare'] matches ['rarest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' safest', ' risk'] matches ['riskiest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' rud', ' least', '\n'] matches ['rudest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' sadd', ' the', ' least', ' hardest'] matches ['saddest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' hardest', ' safest'] matches ['scariest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' least', ' the', ' easiest', ' sex'] matches ['sexiest'] is True
2024-06-12 20:22:39 root INFO     [' sh', ' most', ' the', ' least', ' hardest'] matches ['shiniest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' strang', ' the', ' least', '\n'] matches ['strangest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' strict', ' hardest'] matches ['strictest'] is True
2024-06-12 20:22:39 root INFO     [' strongest', ' most', ' hardest', ' the', '\n'] matches ['strongest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', '\n', ' easiest'] matches ['subtlest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', '\n', ' hardest'] matches ['sunniest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' easiest', ' best'] matches ['tastiest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' hardest', ' easiest'] matches ['tiniest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' hardest', ' the', ' easiest', ' trick'] matches ['trickiest'] is True
2024-06-12 20:22:39 root INFO     [' u', ' most', ' the', ' un', ' least'] matches ['ugliest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', '\n', ' easiest'] matches ['vaguest'] is False
2024-06-12 20:22:39 root INFO     [' most', ' strongest', ' the', ' weakest', ' hardest'] matches ['weakest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' the', ' least', ' wealthiest', ' richest'] matches ['wealthiest'] is True
2024-06-12 20:22:39 root INFO     [' most', ' weird', ' least', ' the', ' hardest'] matches ['weirdest'] is True
2024-06-12 20:22:39 root INFO     adj - superlative (50) total: defaultdict(<class 'int'>, {True: 157, False: 93})
2024-06-12 20:22:39 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_inf - 3pSg', prompt_templates=['I {}, he', 'I {}, she', 'I {}, it'], prompt_templates_zs=['I {}, he', 'I {}, she', 'I {}, it'], samples=[RelationSample(subject='accept', object=['accepts']), RelationSample(subject='achieve', object=['achieves']), RelationSample(subject='add', object=['adds']), RelationSample(subject='agree', object=['agrees']), RelationSample(subject='allow', object=['allows']), RelationSample(subject='appear', object=['appears']), RelationSample(subject='apply', object=['applies']), RelationSample(subject='ask', object=['asks']), RelationSample(subject='avoid', object=['avoids']), RelationSample(subject='become', object=['becomes']), RelationSample(subject='believe', object=['believes']), RelationSample(subject='consider', object=['considers']), RelationSample(subject='consist', object=['consists']), RelationSample(subject='contain', object=['contains']), RelationSample(subject='continue', object=['continues']), RelationSample(subject='create', object=['creates']), RelationSample(subject='describe', object=['describes']), RelationSample(subject='develop', object=['develops']), RelationSample(subject='enable', object=['enables']), RelationSample(subject='enjoy', object=['enjoys']), RelationSample(subject='ensure', object=['ensures']), RelationSample(subject='exist', object=['exists']), RelationSample(subject='explain', object=['explains']), RelationSample(subject='follow', object=['follows']), RelationSample(subject='happen', object=['happens']), RelationSample(subject='hear', object=['hears']), RelationSample(subject='identify', object=['identifies']), RelationSample(subject='improve', object=['improves']), RelationSample(subject='include', object=['includes']), RelationSample(subject='involve', object=['involves']), RelationSample(subject='learn', object=['learns']), RelationSample(subject='maintain', object=['maintains']), RelationSample(subject='occur', object=['occurs']), RelationSample(subject='operate', object=['operates']), RelationSample(subject='prevent', object=['prevents']), RelationSample(subject='promote', object=['promotes']), RelationSample(subject='protect', object=['protects']), RelationSample(subject='provide', object=['provides']), RelationSample(subject='receive', object=['receives']), RelationSample(subject='reduce', object=['reduces']), RelationSample(subject='refer', object=['refers']), RelationSample(subject='remain', object=['remains']), RelationSample(subject='remember', object=['remembers']), RelationSample(subject='represent', object=['represents']), RelationSample(subject='require', object=['requires']), RelationSample(subject='seem', object=['seems']), RelationSample(subject='send', object=['sends']), RelationSample(subject='suggest', object=['suggests']), RelationSample(subject='tell', object=['tells']), RelationSample(subject='understand', object=['understands'])], _domain=None, _range=None)
2024-06-12 20:22:41 root INFO     starting operator prediction
2024-06-12 20:22:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first (I {}, he)
2024-06-12 20:22:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:26:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:26:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:26:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:30:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:30:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:30:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:34:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:34:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:34:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:38:43 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:38:43 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:38:43 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:42:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:42:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:42:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:46:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:46:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:46:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:50:38 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:50:38 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:50:38 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:54:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:54:36 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:54:36 root INFO     total operator prediction time: 1914.9602134227753 seconds
2024-06-12 20:54:39 root INFO     [' accepts', ' is', ' does', '\n', ' will'] matches ['accepts'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' achieves', '\n', ' '] matches ['achieves'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' ', ' will', '\n'] matches ['adds'] is False
2024-06-12 20:54:39 root INFO     [' agrees', ' is', ' does', ' will', '\n'] matches ['agrees'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' will', '\n', ' '] matches ['allows'] is False
2024-06-12 20:54:39 root INFO     [' appears', ' is', '\n', ' will', ' does'] matches ['appears'] is True
2024-06-12 20:54:39 root INFO     [' applies', ' is', '\n', ' does', ' '] matches ['applies'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' will', ' ', '\n'] matches ['asks'] is False
2024-06-12 20:54:39 root INFO     [' is', ' does', ' ', '\n', ' will'] matches ['avoids'] is False
2024-06-12 20:54:39 root INFO     [' is', ' does', ' will', '\n', ' '] matches ['becomes'] is False
2024-06-12 20:54:39 root INFO     [' is', ' believes', ' will', ' does', '\n'] matches ['believes'] is True
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' considers'] matches ['considers'] is True
2024-06-12 20:54:39 root INFO     [' is', ' ', '\n', ' does', ' will'] matches ['consists'] is False
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' will'] matches ['contains'] is False
2024-06-12 20:54:39 root INFO     [' is', ' continues', '\n', ' will', ' does'] matches ['continues'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['creates'] is False
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' ('] matches ['describes'] is False
2024-06-12 20:54:39 root INFO     [' develops', ' is', '\n', ' ', ' does'] matches ['develops'] is True
2024-06-12 20:54:39 root INFO     [' is', ' enables', ' ', ' does', '\n'] matches ['enables'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' will', ' '] matches ['enjoys'] is False
2024-06-12 20:54:39 root INFO     [' is', ' ', ' does', '\n', ' maintains'] matches ['ensures'] is False
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' will', ' ('] matches ['exists'] is False
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' will'] matches ['explains'] is False
2024-06-12 20:54:39 root INFO     [' is', ' does', ' follows', '\n', ' will'] matches ['follows'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' seems', '\n', ' will'] matches ['happens'] is False
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['hears'] is False
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' ('] matches ['identifies'] is False
2024-06-12 20:54:39 root INFO     [' improves', ' is', '\n', ' does', ' '] matches ['improves'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' ', '\n', ' will'] matches ['includes'] is False
2024-06-12 20:54:39 root INFO     [' is', ' ', '\n', ' will', ' does'] matches ['involves'] is False
2024-06-12 20:54:39 root INFO     [' is', ' learns', ' does', '\n', ' '] matches ['learns'] is True
2024-06-12 20:54:39 root INFO     [' maintains', ' is', '\n', ' ', ' does'] matches ['maintains'] is True
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' ('] matches ['occurs'] is False
2024-06-12 20:54:39 root INFO     [' operates', ' is', '\n', ' ', ' does'] matches ['operates'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' ', ' will'] matches ['prevents'] is False
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' promotes', ' '] matches ['promotes'] is True
2024-06-12 20:54:39 root INFO     [' is', '\n', ' does', ' protects', ' will'] matches ['protects'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' will', ' '] matches ['provides'] is False
2024-06-12 20:54:39 root INFO     [' receives', ' is', '\n', ' does', ' '] matches ['receives'] is True
2024-06-12 20:54:39 root INFO     [' is', '\n', ' ', ' does', ' ('] matches ['reduces'] is False
2024-06-12 20:54:39 root INFO     [' is', ' refers', ' ', '\n', ' will'] matches ['refers'] is True
2024-06-12 20:54:39 root INFO     [' is', ' will', '\n', ' ', ' does'] matches ['remains'] is False
2024-06-12 20:54:39 root INFO     [' is', '\n', ' does', ' ', ' will'] matches ['remembers'] is False
2024-06-12 20:54:39 root INFO     [' represents', '\n', ' is', ' ', ' ('] matches ['represents'] is True
2024-06-12 20:54:39 root INFO     [' is', '\n', ' does', ' ', ' will'] matches ['requires'] is False
2024-06-12 20:54:39 root INFO     [' is', ' seems', ' does', ' will', '\n'] matches ['seems'] is True
2024-06-12 20:54:39 root INFO     [' is', ' sends', ' does', '\n', ' '] matches ['sends'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', '\n', ' ', ' suggests'] matches ['suggests'] is True
2024-06-12 20:54:39 root INFO     [' is', ' does', ' will', ' ', '\n'] matches ['tells'] is False
2024-06-12 20:54:39 root INFO     [' is', '\n', ' understands', ' does', ' '] matches ['understands'] is True
2024-06-12 20:54:39 root INFO     verb_inf - 3pSg (50) total: defaultdict(<class 'int'>, {True: 181, False: 119})
2024-06-12 20:54:39 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='Ving - verb_inf', prompt_templates=['{} is the active form of', '{} is to'], prompt_templates_zs=['{} is the active form of', '{} is to'], samples=[RelationSample(subject='achieving', object=['achieve']), RelationSample(subject='adding', object=['add']), RelationSample(subject='allowing', object=['allow']), RelationSample(subject='appearing', object=['appear']), RelationSample(subject='applying', object=['apply']), RelationSample(subject='asking', object=['ask']), RelationSample(subject='attending', object=['attend']), RelationSample(subject='avoiding', object=['avoid']), RelationSample(subject='becoming', object=['become']), RelationSample(subject='believing', object=['believe']), RelationSample(subject='considering', object=['consider']), RelationSample(subject='containing', object=['contain']), RelationSample(subject='continuing', object=['continue']), RelationSample(subject='creating', object=['create']), RelationSample(subject='developing', object=['develop']), RelationSample(subject='encouraging', object=['encourage']), RelationSample(subject='enjoying', object=['enjoy']), RelationSample(subject='ensuring', object=['ensure']), RelationSample(subject='establishing', object=['establish']), RelationSample(subject='existing', object=['exist']), RelationSample(subject='expecting', object=['expect']), RelationSample(subject='following', object=['follow']), RelationSample(subject='happening', object=['happen']), RelationSample(subject='identifying', object=['identify']), RelationSample(subject='improving', object=['improve']), RelationSample(subject='including', object=['include']), RelationSample(subject='involving', object=['involve']), RelationSample(subject='learning', object=['learn']), RelationSample(subject='losing', object=['lose']), RelationSample(subject='maintaining', object=['maintain']), RelationSample(subject='managing', object=['manage']), RelationSample(subject='operating', object=['operate']), RelationSample(subject='performing', object=['perform']), RelationSample(subject='preventing', object=['prevent']), RelationSample(subject='promoting', object=['promote']), RelationSample(subject='protecting', object=['protect']), RelationSample(subject='providing', object=['provide']), RelationSample(subject='receiving', object=['receive']), RelationSample(subject='reducing', object=['reduce']), RelationSample(subject='referring', object=['refer']), RelationSample(subject='remaining', object=['remain']), RelationSample(subject='remembering', object=['remember']), RelationSample(subject='representing', object=['represent']), RelationSample(subject='requiring', object=['require']), RelationSample(subject='seeming', object=['seem']), RelationSample(subject='sitting', object=['sit']), RelationSample(subject='spending', object=['spend']), RelationSample(subject='teaching', object=['teach']), RelationSample(subject='telling', object=['tell']), RelationSample(subject='understanding', object=['understand'])], _domain=None, _range=None)
2024-06-12 20:54:41 root INFO     starting operator prediction
2024-06-12 20:54:41 lre.operators WARNING  relation has > 1 prompt_templates, will use first ({} is the active form of)
2024-06-12 20:54:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 20:58:43 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 20:58:43 root INFO     [order_1_approx] weight calculation finished
2024-06-12 20:58:43 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:02:43 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:02:43 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:02:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:06:44 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:06:44 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:06:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:10:44 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:10:44 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:10:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:14:43 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:14:43 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:14:44 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:18:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:18:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:18:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:22:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:22:41 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:22:41 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:26:38 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:26:38 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:26:38 root INFO     total operator prediction time: 1917.5590889453888 seconds
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' achieve', ' happen'] matches ['achieve'] is True
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', ' demeanor', ' 227'] matches ['add'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['allow'] is False
2024-06-12 21:26:41 root INFO     [' appear', ' seem', '\n', ' ', ' be'] matches ['appear'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' involve', ' ', ' seem', ' appear'] matches ['apply'] is False
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', 'agent', ' 307'] matches ['ask'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' attend', ' ', ' seem', ' be'] matches ['attend'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' be', ' involve'] matches ['avoid'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' be', ' become', ' '] matches ['become'] is True
2024-06-12 21:26:41 root INFO     [' believe', '\n', ' seem', ' be', ' '] matches ['believe'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' ', ' consider', ' involve'] matches ['consider'] is True
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', ' demeanor', ' electorate'] matches ['contain'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['continue'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' create', ' ', ' seem', ' be'] matches ['create'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' seem', ' occur'] matches ['develop'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' involve', ' ', ' seem', ' be'] matches ['encourage'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' ', ' be', ' involve'] matches ['enjoy'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['ensure'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' involve', ' ', ' seem', ' occur'] matches ['establish'] is False
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', ' demeanor', ' electorate'] matches ['exist'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' ', ' be', ' expect'] matches ['expect'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' ', ' be', ' involve'] matches ['follow'] is False
2024-06-12 21:26:41 root INFO     [' happen', '\n', ' seem', ' ', ' be'] matches ['happen'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' seem', ' be'] matches ['identify'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['improve'] is False
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', 'agent', ' 227'] matches ['include'] is False
2024-06-12 21:26:41 root INFO     [' involve', '\n', ' ', ' seem', ' occur'] matches ['involve'] is True
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', ' 227', ' demeanor'] matches ['learn'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['lose'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['maintain'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['manage'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' occur', ' seem'] matches ['operate'] is False
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', ' demeanor', ' behave'] matches ['perform'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' seem', ' be'] matches ['prevent'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' seem', ' be'] matches ['promote'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' seem', ' be'] matches ['protect'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' involve', ' ', ' seem', ' be'] matches ['provide'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' receive', ' ', ' seem', ' be'] matches ['receive'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' involve', ' seem', ' bring'] matches ['reduce'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' involve', ' be'] matches ['refer'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' ', ' appear', ' be'] matches ['remain'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' be', ' happen'] matches ['remember'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' involve', ' ', ' seem', ' appear'] matches ['represent'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' involve', ' ', ' occur'] matches ['require'] is False
2024-06-12 21:26:41 root INFO     [' seem', '\n', ' ', ' appear', ' be'] matches ['seem'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' seem', ' ', ' be', ' spend'] matches ['sit'] is False
2024-06-12 21:26:41 root INFO     [' spend', '\n', ' ', ' be', ' involve'] matches ['spend'] is True
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' be', ' seem', ' teach'] matches ['teach'] is True
2024-06-12 21:26:41 root INFO     [' 67', '67', ' altogether', 'agent', ' 227'] matches ['tell'] is False
2024-06-12 21:26:41 root INFO     ['\n', ' ', ' seem', ' be', ' involve'] matches ['understand'] is False
2024-06-12 21:26:41 root INFO     Ving - verb_inf (50) total: defaultdict(<class 'int'>, {True: 195, False: 155})
2024-06-12 21:26:41 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_3pSg - Ved', prompt_templates=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], prompt_templates_zs=['When he {} something, something has been', 'When she {} something, something has been', 'When it {} something, something has been'], samples=[RelationSample(subject='adds', object=['added']), RelationSample(subject='agrees', object=['agreed']), RelationSample(subject='allows', object=['allowed']), RelationSample(subject='announces', object=['announced']), RelationSample(subject='appears', object=['appeared']), RelationSample(subject='applies', object=['applied']), RelationSample(subject='appoints', object=['appointed']), RelationSample(subject='asks', object=['asked']), RelationSample(subject='becomes', object=['became']), RelationSample(subject='believes', object=['believed']), RelationSample(subject='considers', object=['considered']), RelationSample(subject='consists', object=['consisted']), RelationSample(subject='contains', object=['contained']), RelationSample(subject='continues', object=['continued']), RelationSample(subject='creates', object=['created']), RelationSample(subject='decides', object=['decided']), RelationSample(subject='describes', object=['described']), RelationSample(subject='develops', object=['developed']), RelationSample(subject='establishes', object=['established']), RelationSample(subject='expects', object=['expected']), RelationSample(subject='fails', object=['failed']), RelationSample(subject='follows', object=['followed']), RelationSample(subject='happens', object=['happened']), RelationSample(subject='hears', object=['heard']), RelationSample(subject='includes', object=['included']), RelationSample(subject='intends', object=['intended']), RelationSample(subject='introduces', object=['introduced']), RelationSample(subject='involves', object=['involved']), RelationSample(subject='locates', object=['located']), RelationSample(subject='loses', object=['lost']), RelationSample(subject='manages', object=['managed']), RelationSample(subject='marries', object=['married']), RelationSample(subject='occurs', object=['occurred']), RelationSample(subject='operates', object=['operated']), RelationSample(subject='performs', object=['performed']), RelationSample(subject='proposes', object=['proposed']), RelationSample(subject='provides', object=['provided']), RelationSample(subject='publishes', object=['published']), RelationSample(subject='receives', object=['received']), RelationSample(subject='refers', object=['referred']), RelationSample(subject='relates', object=['related']), RelationSample(subject='remains', object=['remained']), RelationSample(subject='replaces', object=['replaced']), RelationSample(subject='represents', object=['represented']), RelationSample(subject='requires', object=['required']), RelationSample(subject='seems', object=['seemed']), RelationSample(subject='sends', object=['sent']), RelationSample(subject='spends', object=['spent']), RelationSample(subject='suggests', object=['suggested']), RelationSample(subject='tells', object=['told'])], _domain=None, _range=None)
2024-06-12 21:26:43 root INFO     starting operator prediction
2024-06-12 21:26:43 lre.operators WARNING  relation has > 1 prompt_templates, will use first (When he {} something, something has been)
2024-06-12 21:26:43 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:30:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:30:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:30:43 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:34:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:34:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:34:35 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:38:32 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:38:32 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:38:33 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:42:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:42:29 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:42:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:46:25 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:46:25 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:46:26 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:50:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:50:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:50:24 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:54:25 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:54:25 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:54:25 root INFO     [order_1_approx] starting weight calculation
2024-06-12 21:58:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 21:58:24 root INFO     [order_1_approx] weight calculation finished
2024-06-12 21:58:24 root INFO     total operator prediction time: 1901.1572053432465 seconds
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' added', ' allowed'] matches ['added'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' agreed', ' allowed', ' made'] matches ['agreed'] is True
2024-06-12 21:58:27 root INFO     [' allowed', ' been', '\n', ' made', ' given'] matches ['allowed'] is True
2024-06-12 21:58:27 root INFO     [' announced', ' been', '\n', ' made', ' '] matches ['announced'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' appeared', ' given'] matches ['appeared'] is True
2024-06-12 21:58:27 root INFO     [' applied', '\n', ' been', ' made', ' allowed'] matches ['applied'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' allowed', ' to'] matches ['appointed'] is False
2024-06-12 21:58:27 root INFO     [' been', '\n', ' asked', ' said', ' made'] matches ['asked'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' to', ' given'] matches ['became'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' believed', ' been', ' made', ' allowed'] matches ['believed'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' considered', ' been', ' made', ' given'] matches ['considered'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' ', '-'] matches ['consisted'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' contained', ' '] matches ['contained'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' allowed', ' '] matches ['continued'] is False
2024-06-12 21:58:27 root INFO     [' created', '\n', ' been', ' made', ' done'] matches ['created'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' decided', ' allowed'] matches ['decided'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' ', ' said'] matches ['described'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' ', ' given'] matches ['developed'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' established', ' been', ' made', ' '] matches ['established'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' allowed', ' made', ' '] matches ['expected'] is False
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' given', ' to'] matches ['failed'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' allowed', ' '] matches ['followed'] is False
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' happened', ' allowed'] matches ['happened'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' heard', ' made', ' has'] matches ['heard'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' allowed', ' '] matches ['included'] is False
2024-06-12 21:58:27 root INFO     [' intended', ' been', '\n', ' meant', ' made'] matches ['intended'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' introduced', ' made', ' '] matches ['introduced'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' ', ' allowed'] matches ['involved'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' ', '-'] matches ['located'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' given', ' to'] matches ['lost'] is False
2024-06-12 21:58:27 root INFO     [' been', ' managed', '\n', ' made', ' allowed'] matches ['managed'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' married', ' made', ' '] matches ['married'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' occurred', ' caused'] matches ['occurred'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' made', ' been', ' operated', ' to'] matches ['operated'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' done', ' performed'] matches ['performed'] is True
2024-06-12 21:58:27 root INFO     [' proposed', '\n', ' been', ' made', ' '] matches ['proposed'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' made', ' been', ' provided', ' given'] matches ['provided'] is True
2024-06-12 21:58:27 root INFO     [' published', '\n', ' been', ' made', ' to'] matches ['published'] is True
2024-06-12 21:58:27 root INFO     [' received', '\n', ' been', ' given', ' made'] matches ['received'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' ', '-'] matches ['referred'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' ', ' related'] matches ['related'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' allowed', ' '] matches ['remained'] is False
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' ', ' allowed'] matches ['replaced'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' represented', ' '] matches ['represented'] is True
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' allowed', ' '] matches ['required'] is False
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' said', ' given'] matches ['seemed'] is False
2024-06-12 21:58:27 root INFO     [' been', ' sent', '\n', ' given', ' to'] matches ['sent'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' given', ' made', ' '] matches ['spent'] is False
2024-06-12 21:58:27 root INFO     ['\n', ' been', ' made', ' suggested', ' '] matches ['suggested'] is True
2024-06-12 21:58:27 root INFO     [' been', '\n', ' made', ' said', ' told'] matches ['told'] is True
2024-06-12 21:58:27 root INFO     verb_3pSg - Ved (50) total: defaultdict(<class 'int'>, {True: 226, False: 174})
2024-06-12 21:58:27 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb_Ving - 3pSg', prompt_templates=['When something is {}, it'], prompt_templates_zs=['When something is {}, it'], samples=[RelationSample(subject='adding', object=['adds']), RelationSample(subject='advertising', object=['advertises']), RelationSample(subject='allowing', object=['allows']), RelationSample(subject='appearing', object=['appears']), RelationSample(subject='applying', object=['applies']), RelationSample(subject='asking', object=['asks']), RelationSample(subject='becoming', object=['becomes']), RelationSample(subject='believing', object=['believes']), RelationSample(subject='considering', object=['considers']), RelationSample(subject='consisting', object=['consists']), RelationSample(subject='containing', object=['contains']), RelationSample(subject='continuing', object=['continues']), RelationSample(subject='creating', object=['creates']), RelationSample(subject='depending', object=['depends']), RelationSample(subject='describing', object=['describes']), RelationSample(subject='developing', object=['develops']), RelationSample(subject='discovering', object=['discovers']), RelationSample(subject='enabling', object=['enables']), RelationSample(subject='existing', object=['exists']), RelationSample(subject='explaining', object=['explains']), RelationSample(subject='following', object=['follows']), RelationSample(subject='happening', object=['happens']), RelationSample(subject='hearing', object=['hears']), RelationSample(subject='improving', object=['improves']), RelationSample(subject='including', object=['includes']), RelationSample(subject='involving', object=['involves']), RelationSample(subject='learning', object=['learns']), RelationSample(subject='losing', object=['loses']), RelationSample(subject='managing', object=['manages']), RelationSample(subject='occurring', object=['occurs']), RelationSample(subject='operating', object=['operates']), RelationSample(subject='performing', object=['performs']), RelationSample(subject='promoting', object=['promotes']), RelationSample(subject='providing', object=['provides']), RelationSample(subject='publishing', object=['publishes']), RelationSample(subject='receiving', object=['receives']), RelationSample(subject='reducing', object=['reduces']), RelationSample(subject='referring', object=['refers']), RelationSample(subject='relating', object=['relates']), RelationSample(subject='remaining', object=['remains']), RelationSample(subject='representing', object=['represents']), RelationSample(subject='requiring', object=['requires']), RelationSample(subject='seeming', object=['seems']), RelationSample(subject='sitting', object=['sits']), RelationSample(subject='spending', object=['spends']), RelationSample(subject='suggesting', object=['suggests']), RelationSample(subject='teaching', object=['teaches']), RelationSample(subject='telling', object=['tells']), RelationSample(subject='thanking', object=['thanks']), RelationSample(subject='understanding', object=['understands'])], _domain=None, _range=None)
2024-06-12 21:58:29 root INFO     starting operator prediction
2024-06-12 21:58:29 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:02:25 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:02:25 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:02:25 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:06:18 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:06:18 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:06:19 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:10:17 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:10:17 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:10:17 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:14:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:14:10 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:14:10 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:18:07 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:18:07 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:18:07 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:22:01 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:22:01 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:22:01 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:25:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:25:54 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:25:54 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:29:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:29:53 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:29:53 root INFO     total operator prediction time: 1883.581205368042 seconds
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['adds'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', '...'] matches ['advertises'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' does', ' ', '...'] matches ['allows'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' appears'] matches ['appears'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['applies'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['asks'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['becomes'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' believes', ' does', "'s"] matches ['believes'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['considers'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' contains'] matches ['consists'] is False
2024-06-12 22:29:55 root INFO     [' is', ' contains', '\n', "'s", ' '] matches ['contains'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['continues'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' creates', ' does', "'s"] matches ['creates'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' depends', ' ', ' does'] matches ['depends'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['describes'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['develops'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', '...'] matches ['discovers'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' enables', ' ', ' does'] matches ['enables'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' exists', ' does'] matches ['exists'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['explains'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' does', "'s", ' '] matches ['follows'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['happens'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['hears'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['improves'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['includes'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['involves'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['learns'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['loses'] is False
2024-06-12 22:29:55 root INFO     [' is', ' manages', '\n', ' does', ' '] matches ['manages'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['occurs'] is False
2024-06-12 22:29:55 root INFO     [' is', ' operates', '\n', ' performs', ' '] matches ['operates'] is True
2024-06-12 22:29:55 root INFO     [' is', ' performs', '\n', ' does', ' '] matches ['performs'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', '...'] matches ['promotes'] is False
2024-06-12 22:29:55 root INFO     [' is', ' provides', '\n', ' does', ' '] matches ['provides'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['publishes'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' receives', ' ', ' does'] matches ['receives'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' does', ' ', "'s"] matches ['reduces'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' refers', ' ', "'s"] matches ['refers'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', '...'] matches ['relates'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' does', ' ', '...'] matches ['remains'] is False
2024-06-12 22:29:55 root INFO     [' is', ' represents', '\n', ' ', '...'] matches ['represents'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' requires', ' ', ' does'] matches ['requires'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['seems'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['sits'] is False
2024-06-12 22:29:55 root INFO     [' is', ' spends', '\n', ' ', ' does'] matches ['spends'] is True
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', '...'] matches ['suggests'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['teaches'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', "'s", ' does', ' '] matches ['tells'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', ' does', "'s"] matches ['thanks'] is False
2024-06-12 22:29:55 root INFO     [' is', '\n', ' ', "'s", ' does'] matches ['understands'] is False
2024-06-12 22:29:55 root INFO     verb_Ving - 3pSg (50) total: defaultdict(<class 'int'>, {True: 242, False: 208})
2024-06-12 22:29:55 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun - plural_irreg', prompt_templates=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], prompt_templates_zs=['The plural form of {} is', 'In the plural, {} is', '{} in its plural form is'], samples=[RelationSample(subject='ability', object=['abilities']), RelationSample(subject='academy', object=['academies']), RelationSample(subject='activity', object=['activities']), RelationSample(subject='agency', object=['agencies']), RelationSample(subject='analysis', object=['analyses']), RelationSample(subject='army', object=['armies']), RelationSample(subject='authority', object=['authorities']), RelationSample(subject='basis', object=['bases']), RelationSample(subject='business', object=['businesses']), RelationSample(subject='category', object=['categories']), RelationSample(subject='century', object=['centuries']), RelationSample(subject='child', object=['children']), RelationSample(subject='city', object=['cities']), RelationSample(subject='community', object=['communities']), RelationSample(subject='country', object=['countries']), RelationSample(subject='county', object=['counties']), RelationSample(subject='datum', object=['data']), RelationSample(subject='duty', object=['duties']), RelationSample(subject='economy', object=['economies']), RelationSample(subject='energy', object=['energies']), RelationSample(subject='entry', object=['entries']), RelationSample(subject='facility', object=['facilities']), RelationSample(subject='family', object=['families']), RelationSample(subject='formula', object=['formulae']), RelationSample(subject='history', object=['histories']), RelationSample(subject='industry', object=['industries']), RelationSample(subject='library', object=['libraries']), RelationSample(subject='life', object=['lives']), RelationSample(subject='loss', object=['losses']), RelationSample(subject='majority', object=['majorities']), RelationSample(subject='memory', object=['memories']), RelationSample(subject='opportunity', object=['opportunities']), RelationSample(subject='policy', object=['policies']), RelationSample(subject='property', object=['properties']), RelationSample(subject='responsibility', object=['responsibilities']), RelationSample(subject='safety', object=['safeties']), RelationSample(subject='secretary', object=['secretaries']), RelationSample(subject='security', object=['securities']), RelationSample(subject='series', object=['series']), RelationSample(subject='society', object=['societies']), RelationSample(subject='species', object=['species']), RelationSample(subject='story', object=['stories']), RelationSample(subject='strategy', object=['strategies']), RelationSample(subject='success', object=['successes']), RelationSample(subject='technology', object=['technologies']), RelationSample(subject='theory', object=['theories']), RelationSample(subject='university', object=['universities']), RelationSample(subject='variety', object=['varieties']), RelationSample(subject='wife', object=['wives']), RelationSample(subject='woman', object=['women'])], _domain=None, _range=None)
2024-06-12 22:29:57 root INFO     starting operator prediction
2024-06-12 22:29:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The plural form of {} is)
2024-06-12 22:29:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:33:57 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:33:57 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:33:57 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:37:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:37:52 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:37:52 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:41:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:41:48 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:41:48 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:45:44 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:45:44 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:45:45 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:49:43 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:49:43 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:49:43 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:53:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:53:42 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:53:42 root INFO     [order_1_approx] starting weight calculation
2024-06-12 22:57:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 22:57:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 22:57:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:01:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:01:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:01:34 root INFO     total operator prediction time: 1897.1212911605835 seconds
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' several'] matches ['abilities'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' (', ' -'] matches ['academies'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' activities', ' ', ' the', ' various'] matches ['activities'] is True
2024-06-12 23:01:37 root INFO     [' agencies', '\n', ' the', ' ', ' various'] matches ['agencies'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' analyses'] matches ['analyses'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' countries'] matches ['armies'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' authorities', ' the', ' ', ' various'] matches ['authorities'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' -', ' ('] matches ['bases'] is False
2024-06-12 23:01:37 root INFO     [' businesses', '\n', ' the', ' ', ' business'] matches ['businesses'] is True
2024-06-12 23:01:37 root INFO     [' categories', '\n', ' ', ' the', ' countries'] matches ['categories'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' centuries', ' the', ' ', ' countries'] matches ['centuries'] is True
2024-06-12 23:01:37 root INFO     [' children', '\n', ' the', ' ', ' families'] matches ['children'] is True
2024-06-12 23:01:37 root INFO     [' cities', '\n', ' the', ' communities', ' '] matches ['cities'] is True
2024-06-12 23:01:37 root INFO     [' communities', '\n', ' community', ' the', ' '] matches ['communities'] is True
2024-06-12 23:01:37 root INFO     [' countries', '\n', ' the', ' ', ' nations'] matches ['countries'] is True
2024-06-12 23:01:37 root INFO     [' counties', '\n', ' countries', ' ', ' the'] matches ['counties'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' (', ' a'] matches ['data'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' duties', ' ', ' various'] matches ['duties'] is True
2024-06-12 23:01:37 root INFO     [' economies', '\n', ' the', ' ', ' economic'] matches ['economies'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' several'] matches ['energies'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' a'] matches ['entries'] is False
2024-06-12 23:01:37 root INFO     [' facilities', '\n', ' ', ' the', ' communities'] matches ['facilities'] is True
2024-06-12 23:01:37 root INFO     [' families', '\n', ' the', ' ', ' family'] matches ['families'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' (', ' -'] matches ['formulae'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' histories', ' various'] matches ['histories'] is True
2024-06-12 23:01:37 root INFO     [' industries', '\n', ' ', ' the', ' various'] matches ['industries'] is True
2024-06-12 23:01:37 root INFO     [' libraries', '\n', ' ', ' the', ' ('] matches ['libraries'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' families'] matches ['lives'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' several'] matches ['losses'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' several'] matches ['majorities'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' ('] matches ['memories'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' opportunities', ' ', ' the', ' various'] matches ['opportunities'] is True
2024-06-12 23:01:37 root INFO     [' policies', '\n', ' the', ' ', ' various'] matches ['policies'] is True
2024-06-12 23:01:37 root INFO     [' properties', '\n', ' the', ' ', ' various'] matches ['properties'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' several'] matches ['responsibilities'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' various', ' several'] matches ['safeties'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' several', ' ('] matches ['secretaries'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' several', ' various'] matches ['securities'] is False
2024-06-12 23:01:37 root INFO     [' series', '\n', ' the', ' ', ' various'] matches ['series'] is True
2024-06-12 23:01:37 root INFO     [' societies', '\n', ' communities', ' the', ' '] matches ['societies'] is True
2024-06-12 23:01:37 root INFO     [' species', '\n', ' the', ' ', ' countries'] matches ['species'] is True
2024-06-12 23:01:37 root INFO     [' stories', '\n', ' the', ' ', ' a'] matches ['stories'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' strategies', ' the', ' ', ' ('] matches ['strategies'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' several', ' various'] matches ['successes'] is False
2024-06-12 23:01:37 root INFO     ['\n', ' technologies', ' the', ' ', ' cultures'] matches ['technologies'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' theories', ' the', ' ', ' ('] matches ['theories'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' ', ' the', ' (', ' universities'] matches ['universities'] is True
2024-06-12 23:01:37 root INFO     [' varieties', '\n', ' various', ' ', ' the'] matches ['varieties'] is True
2024-06-12 23:01:37 root INFO     [' the', '\n', ' ', ' wives', ' families'] matches ['wives'] is True
2024-06-12 23:01:37 root INFO     ['\n', ' the', ' ', ' women', ' various'] matches ['women'] is True
2024-06-12 23:01:37 root INFO     noun - plural_irreg (50) total: defaultdict(<class 'int'>, {True: 275, False: 225})
2024-06-12 23:01:37 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+tion_irreg', prompt_templates=['To {} results in', 'To {} is to form a'], prompt_templates_zs=['To {} results in', 'To {} is to form a'], samples=[RelationSample(subject='accuse', object=['accusation']), RelationSample(subject='admire', object=['admiration']), RelationSample(subject='allege', object=['allegation']), RelationSample(subject='aspire', object=['aspiration']), RelationSample(subject='authorize', object=['authorization', 'authorisation']), RelationSample(subject='characterize', object=['characterization', 'characterisation']), RelationSample(subject='civilize', object=['civilization', 'civilisation']), RelationSample(subject='colonize', object=['colonization']), RelationSample(subject='compile', object=['compilation']), RelationSample(subject='compute', object=['computation']), RelationSample(subject='condense', object=['condensation']), RelationSample(subject='configure', object=['configuration']), RelationSample(subject='consult', object=['consulation']), RelationSample(subject='continue', object=['continuation']), RelationSample(subject='customize', object=['customization']), RelationSample(subject='declare', object=['declaration']), RelationSample(subject='degrade', object=['degradation']), RelationSample(subject='deprive', object=['deprivation']), RelationSample(subject='derive', object=['derivation']), RelationSample(subject='determine', object=['determination']), RelationSample(subject='examine', object=['examination']), RelationSample(subject='expire', object=['expiration']), RelationSample(subject='explore', object=['exploration']), RelationSample(subject='globalize', object=['globalization', 'globalisation']), RelationSample(subject='illumine', object=['illumination']), RelationSample(subject='imagine', object=['imagination']), RelationSample(subject='improvize', object=['improvization', 'improvisation']), RelationSample(subject='inspire', object=['inspiration']), RelationSample(subject='install', object=['installation', 'instalation']), RelationSample(subject='maximize', object=['maximization', 'maximisation']), RelationSample(subject='minimize', object=['minimization', 'minimisation']), RelationSample(subject='modernize', object=['modernization', 'modernisation']), RelationSample(subject='oblige', object=['obligation']), RelationSample(subject='observe', object=['observation']), RelationSample(subject='occupy', object=['occupation']), RelationSample(subject='optimize', object=['optimization', 'optimisation']), RelationSample(subject='organize', object=['organization']), RelationSample(subject='perspire', object=['perspiration']), RelationSample(subject='prepare', object=['preparation']), RelationSample(subject='privatize', object=['privatization', 'privatisation']), RelationSample(subject='randomize', object=['randomization', 'randomisation']), RelationSample(subject='realize', object=['realization', 'realisation']), RelationSample(subject='reorganize', object=['reorganization', 'reorganisation']), RelationSample(subject='restore', object=['restoration']), RelationSample(subject='specialize', object=['specialization', 'specialisation']), RelationSample(subject='stabilize', object=['stabilization']), RelationSample(subject='standardize', object=['standardization', 'standardisation']), RelationSample(subject='starve', object=['starvation']), RelationSample(subject='utilize', object=['utilization', 'utilisation']), RelationSample(subject='visualize', object=['visualization'])], _domain=None, _range=None)
2024-06-12 23:01:39 root INFO     starting operator prediction
2024-06-12 23:01:39 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in)
2024-06-12 23:01:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:05:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:05:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:05:38 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:09:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:09:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:09:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:13:39 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:13:39 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:13:39 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:17:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:17:34 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:17:34 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:21:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:21:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:21:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:25:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:25:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:25:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:29:30 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:29:30 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:29:30 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:33:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:33:31 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:33:31 root INFO     total operator prediction time: 1911.9679563045502 seconds
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', '...', ' a'] matches ['accusation'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', ' aut', ' a'] matches ['admiration'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' a', ' ', ' organization'] matches ['allegation'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', ' organization', ' a'] matches ['aspiration'] is True
2024-06-12 23:33:33 root INFO     [' authorization', ' the', '\n', ' organization', ' aut'] matches ['authorization', 'authorisation'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' ', ' self', '...'] matches ['characterization', 'characterisation'] is False
2024-06-12 23:33:33 root INFO     ['\n', ' the', ' organization', ' ', ' social'] matches ['civilization', 'civilisation'] is False
2024-06-12 23:33:33 root INFO     [' colonization', ' the', '\n', ' occupation', ' organization'] matches ['colonization'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', ' a', ' '] matches ['compilation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' computation', ' calculation', ' optimization'] matches ['computation'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' concentration', ' organization', ' '] matches ['condensation'] is False
2024-06-12 23:33:33 root INFO     [' configuration', '\n', ' the', ' organization', ' administration'] matches ['configuration'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', ' a', ' organization'] matches ['continuation'] is False
2024-06-12 23:33:33 root INFO     [' customization', '\n', ' the', ' self', ' standard'] matches ['customization'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', ' a', ' de'] matches ['declaration'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' de', ' a', ' self'] matches ['degradation'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' regulation', ' self', ' a'] matches ['deprivation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' a', '...', ' self'] matches ['derivation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', ' regulation', ' determination'] matches ['determination'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', ' self', ' regulation'] matches ['examination'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' ex', ' ', ' self'] matches ['expiration'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' exploration', ' organization', ' self'] matches ['exploration'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' ', ' general', '...'] matches ['globalization', 'globalisation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' ', ' self', ' a'] matches ['illumination'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', ' ', ' a'] matches ['imagination'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', '...', ' '] matches ['improvization', 'improvisation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' self', '...', ' '] matches ['inspiration'] is False
2024-06-12 23:33:33 root INFO     [' the', ' installation', '\n', ' organization', ' administration'] matches ['installation', 'instalation'] is True
2024-06-12 23:33:33 root INFO     [' maxim', ' the', '\n', ' optimization', ' management'] matches ['maximization', 'maximisation'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' optimization', ' management', ' maxim'] matches ['minimization', 'minimisation'] is False
2024-06-12 23:33:33 root INFO     ['\n', ' the', ' organization', ' standard', '...'] matches ['modernization', 'modernisation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', ' a', ' regulation'] matches ['obligation'] is False
2024-06-12 23:33:33 root INFO     [' observation', ' the', '\n', ' organization', ' self'] matches ['observation'] is True
2024-06-12 23:33:33 root INFO     [' occupation', ' the', '\n', ' organization', ' self'] matches ['occupation'] is True
2024-06-12 23:33:33 root INFO     [' optimization', ' the', '\n', ' organization', ' planning'] matches ['optimization', 'optimisation'] is True
2024-06-12 23:33:33 root INFO     [' organization', ' organizing', ' the', ' reorgan', '\n'] matches ['organization'] is True
2024-06-12 23:33:33 root INFO     [' the', '\n', ' ', '...', ' organization'] matches ['perspiration'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', ' planning', ' management'] matches ['preparation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' ', ' regulation', '...'] matches ['privatization', 'privatisation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', ' regulation', '...'] matches ['randomization', 'randomisation'] is False
2024-06-12 23:33:33 root INFO     [' realization', ' the', '\n', ' self', ' organization'] matches ['realization', 'realisation'] is True
2024-06-12 23:33:33 root INFO     [' organization', ' reorgan', ' the', ' regulation', '\n'] matches ['reorganization', 'reorganisation'] is True
2024-06-12 23:33:33 root INFO     [' restoration', ' the', '\n', ' re', ' rehabilitation'] matches ['restoration'] is True
2024-06-12 23:33:33 root INFO     [' specialization', '\n', ' the', ' ', '...'] matches ['specialization', 'specialisation'] is True
2024-06-12 23:33:33 root INFO     [' stabilization', '\n', ' the', ' ', ' organization'] matches ['stabilization'] is True
2024-06-12 23:33:33 root INFO     [' standard', ' regulation', '\n', ' the', ' organization'] matches ['standardization', 'standardisation'] is True
2024-06-12 23:33:33 root INFO     [' the', ' self', '\n', ' aut', ' a'] matches ['starvation'] is False
2024-06-12 23:33:33 root INFO     [' the', '\n', ' organization', ' utilization', ' '] matches ['utilization', 'utilisation'] is True
2024-06-12 23:33:33 root INFO     ['\n', ' the', ' visualization', ' ', '...'] matches ['visualization'] is True
2024-06-12 23:33:33 root INFO     verb+tion_irreg (50) total: defaultdict(<class 'int'>, {True: 303, False: 246})
2024-06-12 23:33:34 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='re+verb_reg', prompt_templates=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], prompt_templates_zs=['To {} again is to', 'To {} a second time is to', 'Repeating {} means'], samples=[RelationSample(subject='acquire', object=['reacquire']), RelationSample(subject='adjust', object=['readjust']), RelationSample(subject='appear', object=['reappear']), RelationSample(subject='apply', object=['reapply']), RelationSample(subject='appoint', object=['reappoint']), RelationSample(subject='arrange', object=['rearrange']), RelationSample(subject='assess', object=['reassess']), RelationSample(subject='assign', object=['reassign']), RelationSample(subject='assure', object=['reassure']), RelationSample(subject='calculate', object=['recalculate']), RelationSample(subject='cognize', object=['recognize']), RelationSample(subject='commend', object=['recommend']), RelationSample(subject='configure', object=['reconfigure']), RelationSample(subject='confirm', object=['reconfirm']), RelationSample(subject='connect', object=['reconnect']), RelationSample(subject='consider', object=['reconsider']), RelationSample(subject='create', object=['recreate']), RelationSample(subject='decorate', object=['redecorate']), RelationSample(subject='deem', object=['redeem']), RelationSample(subject='define', object=['redefine']), RelationSample(subject='develop', object=['redevelop']), RelationSample(subject='discover', object=['rediscover']), RelationSample(subject='distribute', object=['redistribute']), RelationSample(subject='emerge', object=['reemerge']), RelationSample(subject='engage', object=['reengage']), RelationSample(subject='establish', object=['reestablish']), RelationSample(subject='evaluate', object=['reevaluate']), RelationSample(subject='examine', object=['reexamine']), RelationSample(subject='generate', object=['regenerate']), RelationSample(subject='grow', object=['regrow']), RelationSample(subject='install', object=['reinstall']), RelationSample(subject='integrate', object=['reintegrate']), RelationSample(subject='interpret', object=['reinterpret']), RelationSample(subject='introduce', object=['reintroduce']), RelationSample(subject='invest', object=['reinvest']), RelationSample(subject='investigate', object=['reinvestigate']), RelationSample(subject='learn', object=['relearn']), RelationSample(subject='locate', object=['relocate']), RelationSample(subject='marry', object=['remarry']), RelationSample(subject='negotiate', object=['renegotiate']), RelationSample(subject='occur', object=['reoccur']), RelationSample(subject='organize', object=['reorganize', 'reorganise']), RelationSample(subject='publish', object=['republish']), RelationSample(subject='send', object=['resend']), RelationSample(subject='solve', object=['resolve']), RelationSample(subject='submit', object=['resubmit']), RelationSample(subject='tell', object=['retell']), RelationSample(subject='unite', object=['reunite']), RelationSample(subject='upload', object=['reupload']), RelationSample(subject='write', object=['rewrite'])], _domain=None, _range=None)
2024-06-12 23:33:36 root INFO     starting operator prediction
2024-06-12 23:33:36 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} again is to)
2024-06-12 23:33:36 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:37:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:37:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:37:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:41:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:41:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:41:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:45:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:45:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:45:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:49:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:49:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:49:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:53:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:53:37 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:53:37 root INFO     [order_1_approx] starting weight calculation
2024-06-12 23:57:35 root INFO     weight size is torch.Size([4096, 4096])
2024-06-12 23:57:35 root INFO     [order_1_approx] weight calculation finished
2024-06-12 23:57:36 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:01:32 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:01:32 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:01:32 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:05:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:05:29 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:05:29 root INFO     total operator prediction time: 1913.7767596244812 seconds
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' renew', ' rec'] matches ['reacquire'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' revise', ' rep', ' rec'] matches ['readjust'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' repeat', ' rep'] matches ['reappear'] is True
2024-06-13 00:05:32 root INFO     [' re', ' reapp', ' res', ' rein', ' repeat'] matches ['reapply'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' reapp', ' reass'] matches ['reappoint'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' reorgan', ' rep', ' rearr'] matches ['rearrange'] is True
2024-06-13 00:05:32 root INFO     [' re', ' reass', ' res', ' rein', ' rep'] matches ['reassess'] is True
2024-06-13 00:05:32 root INFO     [' re', ' reass', ' res', ' rein', ' rep'] matches ['reassign'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' reass', ' rein', ' rep'] matches ['reassure'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rec', ' rep', ' repeat'] matches ['recalculate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' rec', ' repeat'] matches ['recognize'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' red'] matches ['recommend'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' recon', ' rein', ' rep'] matches ['reconfigure'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' recon', ' repeat', ' rein'] matches ['reconfirm'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' recon', ' rec'] matches ['reconnect'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' repeat', ' reconsider', ' rese'] matches ['reconsider'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' repeat', ' recreate'] matches ['recreate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' red', ' res', ' rep', ' rein'] matches ['redecorate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' red', ' rein', ' rese'] matches ['redeem'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' repeat', ' red', ' rein'] matches ['redefine'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' repeat', ' red'] matches ['redevelop'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' red', ' rep'] matches ['rediscover'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' redist'] matches ['redistribute'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' rep', ' reg'] matches ['reemerge'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' repeat', ' reg'] matches ['reengage'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' repeat', ' renew'] matches ['reestablish'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' repeat', ' ret'] matches ['reevaluate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' repeat', ' red'] matches ['reexamine'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' repeat'] matches ['regenerate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' reg', ' rein', ' res', ' rep'] matches ['regrow'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' rep', ' repeat', ' res'] matches ['reinstall'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' reg', ' repeat'] matches ['reintegrate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' ret'] matches ['reinterpret'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' repeat', ' rep'] matches ['reintroduce'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' rep', ' reg'] matches ['reinvest'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' repeat', ' renew'] matches ['reinvestigate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' rein', ' res', ' reg', ' repeat'] matches ['relearn'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' reg'] matches ['relocate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' rep', ' renew'] matches ['remarry'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' red', ' rein', ' rep'] matches ['renegotiate'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' repeat', ' rein', ' rese'] matches ['reoccur'] is True
2024-06-13 00:05:32 root INFO     [' re', ' reorgan', ' res', ' rein', ' rep'] matches ['reorganize', 'reorganise'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' repeat'] matches ['republish'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' repeat', ' rep', ' rese'] matches ['resend'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' red', ' repeat'] matches ['resolve'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' submit', ' rep', ' rein'] matches ['resubmit'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' repeat', ' rein'] matches ['retell'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rein', ' reg', ' recon'] matches ['reunite'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' rep', ' rein', ' ret'] matches ['reupload'] is True
2024-06-13 00:05:32 root INFO     [' re', ' res', ' repeat', ' rep', ' red'] matches ['rewrite'] is True
2024-06-13 00:05:32 root INFO     re+verb_reg (50) total: defaultdict(<class 'int'>, {True: 353, False: 246})
2024-06-13 00:05:32 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+ment_irreg', prompt_templates=['To {} results in a', 'To {} brings about a'], prompt_templates_zs=['To {} results in a', 'To {} brings about a'], samples=[RelationSample(subject='accomplish', object=['accomplishment']), RelationSample(subject='achieve', object=['achievement']), RelationSample(subject='acknowledge', object=['acknowledgement']), RelationSample(subject='adjust', object=['adjustment']), RelationSample(subject='advertise', object=['advertisement', 'advertizement']), RelationSample(subject='agree', object=['agreement']), RelationSample(subject='align', object=['alignment']), RelationSample(subject='amend', object=['amendment']), RelationSample(subject='amuse', object=['amusement']), RelationSample(subject='announce', object=['announcement']), RelationSample(subject='appoint', object=['appointment']), RelationSample(subject='arrange', object=['arrangement']), RelationSample(subject='assess', object=['assessment']), RelationSample(subject='assign', object=['assignment']), RelationSample(subject='commit', object=['commitment']), RelationSample(subject='detach', object=['detachment']), RelationSample(subject='develop', object=['development']), RelationSample(subject='disagree', object=['disagreement']), RelationSample(subject='disappoint', object=['disappointment']), RelationSample(subject='displace', object=['displacement']), RelationSample(subject='embarrass', object=['embarrassment']), RelationSample(subject='encourage', object=['encouragement']), RelationSample(subject='endorse', object=['endorsement']), RelationSample(subject='enforce', object=['enforcement']), RelationSample(subject='engage', object=['engagement']), RelationSample(subject='enhance', object=['enhancement']), RelationSample(subject='enjoy', object=['enjoyment']), RelationSample(subject='enlighten', object=['enlightenment']), RelationSample(subject='enroll', object=['enrollment', 'enrolment']), RelationSample(subject='entertain', object=['entertainment']), RelationSample(subject='entitle', object=['entitlement']), RelationSample(subject='equip', object=['equipment']), RelationSample(subject='establish', object=['establishment']), RelationSample(subject='excite', object=['excitement']), RelationSample(subject='fulfil', object=['fulfilment']), RelationSample(subject='fulfill', object=['fulfillment']), RelationSample(subject='harass', object=['harassment']), RelationSample(subject='impair', object=['impairment']), RelationSample(subject='improve', object=['improvement']), RelationSample(subject='infringe', object=['infringement']), RelationSample(subject='invest', object=['investment']), RelationSample(subject='involve', object=['involvement']), RelationSample(subject='manage', object=['management']), RelationSample(subject='punish', object=['punishment']), RelationSample(subject='redevelop', object=['redevelopment']), RelationSample(subject='reimburse', object=['reimbursement']), RelationSample(subject='reinforce', object=['reinforcement']), RelationSample(subject='replace', object=['replacement']), RelationSample(subject='require', object=['requirement']), RelationSample(subject='resent', object=['resentment'])], _domain=None, _range=None)
2024-06-13 00:05:34 root INFO     starting operator prediction
2024-06-13 00:05:34 lre.operators WARNING  relation has > 1 prompt_templates, will use first (To {} results in a)
2024-06-13 00:05:34 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:09:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:09:36 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:09:36 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:13:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:13:37 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:13:37 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:17:38 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:17:38 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:17:38 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:21:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:21:40 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:21:40 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:25:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:25:41 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:25:41 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:29:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:29:42 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:29:42 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:33:43 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:33:43 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:33:43 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:37:44 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:37:44 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:37:44 root INFO     total operator prediction time: 1929.8669497966766 seconds
2024-06-13 00:37:46 root INFO     ['\n', ' re', ' rehabilitation', '...', ' retribution'] matches ['accomplishment'] is False
2024-06-13 00:37:46 root INFO     [' re', '\n', ' rehabilitation', ' reinforcement', ' recreation'] matches ['achievement'] is False
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' retribution', ' recreation'] matches ['acknowledgement'] is False
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', ' adjustment', '\n', ' recreation'] matches ['adjustment'] is True
2024-06-13 00:37:46 root INFO     ['\n', ' re', ' rehabilitation', ' recreation', ' promotion'] matches ['advertisement', 'advertizement'] is False
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' recreation', ' reinforcement'] matches ['agreement'] is False
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' reinforcement', ' dis'] matches ['alignment'] is False
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' renewal', ' reform'] matches ['amendment'] is False
2024-06-13 00:37:46 root INFO     [' recreation', ' amusement', ' entertainment', '\n', ' rehabilitation'] matches ['amusement'] is True
2024-06-13 00:37:46 root INFO     [' re', '\n', ' rehabilitation', ' recreation', ' reinforcement'] matches ['announcement'] is False
2024-06-13 00:37:46 root INFO     [' re', '\n', ' rehabilitation', ' recreation', ' restoration'] matches ['appointment'] is False
2024-06-13 00:37:46 root INFO     [' re', '\n', ' rehabilitation', ' recreation', ' reorgan'] matches ['arrangement'] is False
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', ' reass', '\n', ' restoration'] matches ['assessment'] is False
2024-06-13 00:37:46 root INFO     [' reass', ' re', ' rehabilitation', ' assignment', '\n'] matches ['assignment'] is True
2024-06-13 00:37:46 root INFO     [' re', '\n', ' commitment', ' rehabilitation', ' recreation'] matches ['commitment'] is True
2024-06-13 00:37:46 root INFO     [' detachment', ' det', ' re', ' detention', '\n'] matches ['detachment'] is True
2024-06-13 00:37:46 root INFO     [' development', ' rehabilitation', ' re', '\n', ' redevelopment'] matches ['development'] is True
2024-06-13 00:37:46 root INFO     [' dis', '\n', ' re', ' rehabilitation', ' recreation'] matches ['disagreement'] is True
2024-06-13 00:37:46 root INFO     ['\n', ' dis', ' re', ' disappointment', ' rep'] matches ['disappointment'] is True
2024-06-13 00:37:46 root INFO     ['\n', ' re', ' dis', ' displacement', ' rehabilitation'] matches ['displacement'] is True
2024-06-13 00:37:46 root INFO     [' embarrassment', '\n', ' re', ' rehabilitation', ' dis'] matches ['embarrassment'] is True
2024-06-13 00:37:46 root INFO     [' encouragement', ' re', ' rehabilitation', ' reinforcement', '\n'] matches ['encouragement'] is True
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' reinforcement', ' recreation'] matches ['endorsement'] is False
2024-06-13 00:37:46 root INFO     [' enforcement', ' reinforcement', ' re', ' rehabilitation', ' en'] matches ['enforcement'] is True
2024-06-13 00:37:46 root INFO     [' engagement', ' re', ' rehabilitation', ' recreation', '\n'] matches ['engagement'] is True
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' reinforcement', ' re', ' enhancement', '\n'] matches ['enhancement'] is True
2024-06-13 00:37:46 root INFO     [' recreation', ' re', ' enjoyment', ' rehabilitation', '\n'] matches ['enjoyment'] is True
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', '\n', ' recreation', ' reinforcement'] matches ['enlightenment'] is False
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', '\n', ' enrollment', ' reinforcement'] matches ['enrollment', 'enrolment'] is True
2024-06-13 00:37:46 root INFO     [' entertainment', ' recreation', ' rehabilitation', ' ent', '\n'] matches ['entertainment'] is True
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', ' ent', '\n', ' entitlement'] matches ['entitlement'] is True
2024-06-13 00:37:46 root INFO     [' equipment', ' rehabilitation', ' re', ' reinforcement', '\n'] matches ['equipment'] is True
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', '\n', ' recreation', ' reinforcement'] matches ['establishment'] is False
2024-06-13 00:37:46 root INFO     [' excitement', ' exc', ' re', '\n', ' recreation'] matches ['excitement'] is True
2024-06-13 00:37:46 root INFO     [' fulfil', ' re', '\n', ' fulfillment', ' rehabilitation'] matches ['fulfilment'] is True
2024-06-13 00:37:46 root INFO     [' fulfillment', ' re', '\n', ' rehabilitation', ' fulfil'] matches ['fulfillment'] is True
2024-06-13 00:37:46 root INFO     [' harassment', '\n', ' rehabilitation', ' re', ' harass'] matches ['harassment'] is True
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', ' dis', '\n', ' impairment'] matches ['impairment'] is True
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', ' reinforcement', '\n', ' improvement'] matches ['improvement'] is True
2024-06-13 00:37:46 root INFO     [' re', '\n', ' rehabilitation', ' retribution', ' recreation'] matches ['infringement'] is False
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' reinforcement', ' recreation'] matches ['investment'] is False
2024-06-13 00:37:46 root INFO     [' rehabilitation', ' re', '\n', ' recreation', ' ent'] matches ['involvement'] is False
2024-06-13 00:37:46 root INFO     [' management', ' rehabilitation', ' re', '\n', ' maintenance'] matches ['management'] is True
2024-06-13 00:37:46 root INFO     [' punishment', ' retribution', ' rehabilitation', '\n', ' re'] matches ['punishment'] is True
2024-06-13 00:37:46 root INFO     [' redevelopment', ' re', ' rehabilitation', ' development', ' recreation'] matches ['redevelopment'] is True
2024-06-13 00:37:46 root INFO     [' re', ' rehabilitation', '\n', ' reimbursement', ' rein'] matches ['reimbursement'] is True
2024-06-13 00:37:46 root INFO     [' reinforcement', ' rehabilitation', ' re', '\n', ' rein'] matches ['reinforcement'] is True
2024-06-13 00:37:46 root INFO     [' replacement', ' re', ' rehabilitation', '\n', ' restoration'] matches ['replacement'] is True
2024-06-13 00:37:46 root INFO     [' re', '\n', ' rehabilitation', ' recreation', ' requ'] matches ['requirement'] is True
2024-06-13 00:37:46 root INFO     [' resentment', ' re', '\n', ' rehabilitation', ' retribution'] matches ['resentment'] is True
2024-06-13 00:37:46 root INFO     verb+ment_irreg (50) total: defaultdict(<class 'int'>, {True: 386, False: 263})
2024-06-13 00:37:47 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='noun+less_reg', prompt_templates=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], prompt_templates_zs=['Something without {} is', 'A thing missing {} is', 'Something that does not have {} is'], samples=[RelationSample(subject='arm', object=['armless']), RelationSample(subject='art', object=['artless']), RelationSample(subject='bone', object=['boneless']), RelationSample(subject='breath', object=['breathless']), RelationSample(subject='carbon', object=['carbonless']), RelationSample(subject='child', object=['childless']), RelationSample(subject='collar', object=['collarless']), RelationSample(subject='death', object=['deathless']), RelationSample(subject='defence', object=['defenceless', 'defenseless']), RelationSample(subject='effort', object=['effortless']), RelationSample(subject='ego', object=['egoless']), RelationSample(subject='emotion', object=['emotionless']), RelationSample(subject='error', object=['errorless']), RelationSample(subject='expression', object=['expressionless']), RelationSample(subject='faith', object=['faithless']), RelationSample(subject='friction', object=['frictionless']), RelationSample(subject='friend', object=['friendless']), RelationSample(subject='gender', object=['genderless']), RelationSample(subject='goal', object=['goalless']), RelationSample(subject='god', object=['godless']), RelationSample(subject='guile', object=['guileless']), RelationSample(subject='guilt', object=['guiltless']), RelationSample(subject='hair', object=['hairless']), RelationSample(subject='heart', object=['heartless']), RelationSample(subject='heir', object=['heirless']), RelationSample(subject='home', object=['homeless']), RelationSample(subject='law', object=['lawless']), RelationSample(subject='leg', object=['legless']), RelationSample(subject='life', object=['lifeless', 'liveless']), RelationSample(subject='luck', object=['luckless']), RelationSample(subject='meat', object=['meatless']), RelationSample(subject='mirth', object=['mirthless']), RelationSample(subject='money', object=['moneyless']), RelationSample(subject='odor', object=['odorless', 'odourless']), RelationSample(subject='passion', object=['passionless']), RelationSample(subject='path', object=['pathless']), RelationSample(subject='penny', object=['penniless']), RelationSample(subject='remorse', object=['remorseless']), RelationSample(subject='ruth', object=['ruthless']), RelationSample(subject='sensor', object=['sensorless']), RelationSample(subject='sleeve', object=['sleeveless']), RelationSample(subject='soul', object=['soulless']), RelationSample(subject='speech', object=['speechless']), RelationSample(subject='spine', object=['spineless']), RelationSample(subject='tact', object=['tactless']), RelationSample(subject='talent', object=['talentless']), RelationSample(subject='thought', object=['thoughtless']), RelationSample(subject='tooth', object=['toothless']), RelationSample(subject='window', object=['windowless']), RelationSample(subject='wit', object=['witless'])], _domain=None, _range=None)
2024-06-13 00:37:49 root INFO     starting operator prediction
2024-06-13 00:37:49 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Something without {} is)
2024-06-13 00:37:49 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:41:50 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:41:50 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:41:50 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:45:50 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:45:50 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:45:51 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:49:50 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:49:50 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:49:51 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:53:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:53:51 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:53:51 root INFO     [order_1_approx] starting weight calculation
2024-06-13 00:57:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 00:57:52 root INFO     [order_1_approx] weight calculation finished
2024-06-13 00:57:52 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:01:50 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:01:50 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:01:51 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:05:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:05:52 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:05:52 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:09:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:09:53 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:09:53 root INFO     total operator prediction time: 1924.1487030982971 seconds
2024-06-13 01:09:55 root INFO     ['\n', ' a', ' un', ' without', ' mindless'] matches ['armless'] is True
2024-06-13 01:09:55 root INFO     [' art', ' un', '\n', ' mindless', ' without'] matches ['artless'] is True
2024-06-13 01:09:55 root INFO     [' without', ' mindless', ' a', '\n', ' bone'] matches ['boneless'] is True
2024-06-13 01:09:55 root INFO     [' mindless', ' un', '\n', ' without', ' a'] matches ['breathless'] is False
2024-06-13 01:09:55 root INFO     [' a', '\n', ' un', ' mindless', ' without'] matches ['carbonless'] is False
2024-06-13 01:09:55 root INFO     [' a', ' un', '\n', ' mindless', ' without'] matches ['childless'] is False
2024-06-13 01:09:55 root INFO     [' a', ' un', '\n', ' not', ' without'] matches ['collarless'] is False
2024-06-13 01:09:55 root INFO     [' mindless', '\n', ' un', ' a', ' death'] matches ['deathless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' without', ' a', ' und'] matches ['defenceless', 'defenseless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' mindless', '\n', ' a', ' without'] matches ['effortless'] is False
2024-06-13 01:09:55 root INFO     [' ego', ' un', ' mindless', ' a', '\n'] matches ['egoless'] is True
2024-06-13 01:09:55 root INFO     [' emotion', ' un', '\n', ' mindless', ' heart'] matches ['emotionless'] is True
2024-06-13 01:09:55 root INFO     ['\n', ' un', ' a', ' without', ' mindless'] matches ['errorless'] is False
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' without'] matches ['expressionless'] is False
2024-06-13 01:09:55 root INFO     [' un', '\n', ' mindless', ' unf', ' without'] matches ['faithless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' a', '\n', ' without', ' mindless'] matches ['frictionless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' a', '\n', ' unf', ' without'] matches ['friendless'] is False
2024-06-13 01:09:55 root INFO     [' un', '\n', ' mindless', ' a', ' g'] matches ['genderless'] is True
2024-06-13 01:09:55 root INFO     [' un', ' goal', ' mindless', ' a', '\n'] matches ['goalless'] is True
2024-06-13 01:09:55 root INFO     [' god', ' mindless', ' a', ' un', ' without'] matches ['godless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' without'] matches ['guileless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' a', ' mindless', '\n', ' guilt'] matches ['guiltless'] is True
2024-06-13 01:09:55 root INFO     [' a', '\n', ' un', ' mindless', ' without'] matches ['hairless'] is False
2024-06-13 01:09:55 root INFO     [' heart', ' un', '\n', ' mindless', ' without'] matches ['heartless'] is True
2024-06-13 01:09:55 root INFO     [' un', ' a', '\n', ' without', ' ruth'] matches ['heirless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' a', ' mindless', ' without', '\n'] matches ['homeless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' law', ' a', ' mindless', '\n'] matches ['lawless'] is True
2024-06-13 01:09:55 root INFO     [' un', ' mindless', '\n', ' a', ' without'] matches ['legless'] is False
2024-06-13 01:09:55 root INFO     [' lifeless', ' mindless', ' un', '\n', ' a'] matches ['lifeless', 'liveless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' without'] matches ['luckless'] is False
2024-06-13 01:09:55 root INFO     [' mindless', ' meat', ' un', ' a', ' without'] matches ['meatless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' without'] matches ['mirthless'] is False
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' without'] matches ['moneyless'] is False
2024-06-13 01:09:55 root INFO     [' un', '\n', ' without', ' a', ' odor'] matches ['odorless', 'odourless'] is True
2024-06-13 01:09:55 root INFO     ['\n', ' un', ' mindless', ' a', ' passion'] matches ['passionless'] is True
2024-06-13 01:09:55 root INFO     [' path', ' un', ' a', '\n', ' without'] matches ['pathless'] is True
2024-06-13 01:09:55 root INFO     [' un', ' a', ' mindless', '\n', ' senseless'] matches ['penniless'] is False
2024-06-13 01:09:55 root INFO     [' un', ' mindless', '\n', ' a', ' ruth'] matches ['remorseless'] is False
2024-06-13 01:09:55 root INFO     [' ruth', ' ruthless', ' mindless', ' a', '\n'] matches ['ruthless'] is True
2024-06-13 01:09:55 root INFO     ['\n', ' a', ' senseless', ' mindless', ' un'] matches ['sensorless'] is False
2024-06-13 01:09:55 root INFO     [' a', '\n', ' un', ' without', ' mindless'] matches ['sleeveless'] is False
2024-06-13 01:09:55 root INFO     [' soul', ' sou', ' mindless', '\n', ' a'] matches ['soulless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' speech'] matches ['speechless'] is True
2024-06-13 01:09:55 root INFO     [' a', ' un', ' sp', '\n', ' spine'] matches ['spineless'] is True
2024-06-13 01:09:55 root INFO     [' tact', ' un', '\n', ' a', ' tast'] matches ['tactless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' a', ' mindless', ' not'] matches ['talentless'] is False
2024-06-13 01:09:55 root INFO     [' mindless', ' thought', ' un', '\n', ' senseless'] matches ['thoughtless'] is True
2024-06-13 01:09:55 root INFO     [' tooth', ' without', '\n', ' un', ' a'] matches ['toothless'] is True
2024-06-13 01:09:55 root INFO     [' un', '\n', ' without', ' a', ' mindless'] matches ['windowless'] is False
2024-06-13 01:09:55 root INFO     [' wit', ' w', ' mindless', '\n', ' un'] matches ['witless'] is True
2024-06-13 01:09:55 root INFO     noun+less_reg (50) total: defaultdict(<class 'int'>, {True: 411, False: 288})
2024-06-13 01:09:55 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='over+adj_reg', prompt_templates=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], prompt_templates_zs=['If something is too {}, it is', 'When something is overly {}, it is', 'if it is too {}, then it is'], samples=[RelationSample(subject='ambitious', object=['overambitious', 'over-ambitious']), RelationSample(subject='arching', object=['overarching', 'over-arching']), RelationSample(subject='booked', object=['overbooked', 'over-booked']), RelationSample(subject='charged', object=['overcharged', 'over-charged']), RelationSample(subject='compensated', object=['overcompensated', 'over-compensated']), RelationSample(subject='confident', object=['overconfident', 'over-confident']), RelationSample(subject='cooked', object=['overcooked', 'over-cooked']), RelationSample(subject='crowded', object=['overcrowded', 'over-crowded']), RelationSample(subject='developed', object=['overdeveloped', 'over-developed']), RelationSample(subject='done', object=['overdone', 'over-done']), RelationSample(subject='dressed', object=['overdressed', 'over-dressed']), RelationSample(subject='enthusiastic', object=['overenthusiastic', 'over-enthusiastic']), RelationSample(subject='excited', object=['overexcited', 'over-excited']), RelationSample(subject='exposed', object=['overexposed', 'over-exposed']), RelationSample(subject='filled', object=['overfilled', 'over-filled']), RelationSample(subject='grown', object=['overgrown', 'over-grown']), RelationSample(subject='heard', object=['overheard', 'over-heard']), RelationSample(subject='heated', object=['overheated', 'over-heated']), RelationSample(subject='inflated', object=['overinflated', 'over-inflated']), RelationSample(subject='laid', object=['overlaid', 'over-laid']), RelationSample(subject='loaded', object=['overloaded', 'over-loaded']), RelationSample(subject='optimistic', object=['overoptimistic', 'over-optimistic']), RelationSample(subject='paid', object=['overpaid', 'over-paid']), RelationSample(subject='painted', object=['overpainted', 'over-painted']), RelationSample(subject='played', object=['overplayed', 'over-played']), RelationSample(subject='populated', object=['overpopulated', 'over-populated']), RelationSample(subject='powered', object=['overpowered', 'over-powered']), RelationSample(subject='protected', object=['overprotected', 'over-protected']), RelationSample(subject='protective', object=['overprotective', 'over-protective']), RelationSample(subject='qualified', object=['overqualified', 'over-qualified']), RelationSample(subject='represented', object=['overrepresented', 'over-represented']), RelationSample(subject='saturated', object=['oversaturated', 'over-saturated']), RelationSample(subject='shadowed', object=['overshadowed', 'over-shadowed']), RelationSample(subject='simplified', object=['oversimplified', 'over-simplified']), RelationSample(subject='sized', object=['oversized', 'over-sized']), RelationSample(subject='sold', object=['oversold', 'over-sold']), RelationSample(subject='spent', object=['overspent', 'over-spent']), RelationSample(subject='stated', object=['overstated', 'over-stated']), RelationSample(subject='stimulated', object=['overstimulated', 'over-stimulated']), RelationSample(subject='stocked', object=['overstocked', 'over-stocked']), RelationSample(subject='strained', object=['overstrained', 'over-strained']), RelationSample(subject='stressed', object=['overstressed', 'over-stressed']), RelationSample(subject='stretched', object=['overstretched', 'over-stretched']), RelationSample(subject='subscribed', object=['oversubscribed', 'over-subscribed']), RelationSample(subject='taken', object=['overtaken', 'over-taken']), RelationSample(subject='thrown', object=['overthrown', 'over-thrown']), RelationSample(subject='turned', object=['overturned', 'over-turned']), RelationSample(subject='used', object=['overused', 'over-used']), RelationSample(subject='written', object=['overwritten', 'over-written']), RelationSample(subject='zealous', object=['overzealous', 'over-zealous'])], _domain=None, _range=None)
2024-06-13 01:09:57 root INFO     starting operator prediction
2024-06-13 01:09:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If something is too {}, it is)
2024-06-13 01:09:58 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:14:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:14:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:14:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:18:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:18:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:18:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:22:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:22:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:22:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:26:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:26:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:26:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:30:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:30:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:30:01 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:34:02 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:34:02 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:34:02 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:38:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:38:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:38:03 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:42:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:42:05 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:42:05 root INFO     total operator prediction time: 1927.5293405056 seconds
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overly', ' overd', ' overw'] matches ['overambitious', 'over-ambitious'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overc', ' overe', ' overly'] matches ['overarching', 'over-arching'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overly'] matches ['overbooked', 'over-booked'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overly'] matches ['overcharged', 'over-charged'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overc', ' overd', ' overe', ' overly'] matches ['overcompensated', 'over-compensated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overd', ' overly', ' overw'] matches ['overconfident', 'over-confident'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overc', ' overw', ' overd', ' overhe'] matches ['overcooked', 'over-cooked'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overcrowd', ' overd', ' overw', ' overc'] matches ['overcrowded', 'over-crowded'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overly'] matches ['overdeveloped', 'over-developed'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overt'] matches ['overdone', 'over-done'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overe'] matches ['overdressed', 'over-dressed'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overw', ' overly', ' overd'] matches ['overenthusiastic', 'over-enthusiastic'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overw', ' overd', ' overly'] matches ['overexcited', 'over-excited'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overw', ' overd', ' overly'] matches ['overexposed', 'over-exposed'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overloaded'] matches ['overfilled', 'over-filled'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overe', ' overd', ' overly'] matches ['overgrown', 'over-grown'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overd', ' overhe', ' overe'] matches ['overheard', 'over-heard'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overhe', ' overw', ' overe', ' overd'] matches ['overheated', 'over-heated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overe', ' overd', ' overly'] matches ['overinflated', 'over-inflated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overe'] matches ['overlaid', 'over-laid'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overloaded', ' overd', ' overly', ' overw'] matches ['overloaded', 'over-loaded'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overw', ' overd', ' overly'] matches ['overoptimistic', 'over-optimistic'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overe'] matches ['overpaid', 'over-paid'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overc'] matches ['overpainted', 'over-painted'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overe'] matches ['overplayed', 'over-played'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overcrowd', ' overw', ' overly'] matches ['overpopulated', 'over-populated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overe', ' overly', ' overd'] matches ['overpowered', 'over-powered'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overc', ' overe'] matches ['overprotected', 'over-protected'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overc', ' overly'] matches ['overprotective', 'over-protective'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overly', ' overe', ' overw'] matches ['overqualified', 'over-qualified'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overly'] matches ['overrepresented', 'over-represented'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overs', ' overd', ' overw', ' overe'] matches ['oversaturated', 'over-saturated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overly'] matches ['overshadowed', 'over-shadowed'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overs', ' overd', ' overw', ' overly'] matches ['oversimplified', 'over-simplified'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overly', ' overd', ' overe', ' overs'] matches ['oversized', 'over-sized'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overly', ' overe'] matches ['oversold', 'over-sold'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overe', ' overd', ' overly'] matches ['overspent', 'over-spent'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overly'] matches ['overstated', 'over-stated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overe', ' overs', ' overw'] matches ['overstimulated', 'over-stimulated'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overcrowd', ' overc'] matches ['overstocked', 'over-stocked'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overe', ' overhe', ' overs'] matches ['overstrained', 'over-strained'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overw', ' overd', ' overs'] matches ['overstressed', 'over-stressed'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overe', ' overs', ' overd'] matches ['overstretched', 'over-stretched'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overs', ' overd', ' overw', ' overe'] matches ['oversubscribed', 'over-subscribed'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overd', ' overw', ' overe', ' overt'] matches ['overtaken', 'over-taken'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overd', ' overe', ' overly'] matches ['overthrown', 'over-thrown'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overd', ' overc', ' overly'] matches ['overturned', 'over-turned'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overd', ' overe', ' overly'] matches ['overused', 'over-used'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overw', ' overd', ' overe', ' overly'] matches ['overwritten', 'over-written'] is True
2024-06-13 01:42:07 root INFO     [' over', ' overe', ' overw', ' overd', ' overly'] matches ['overzealous', 'over-zealous'] is True
2024-06-13 01:42:07 root INFO     over+adj_reg (50) total: defaultdict(<class 'int'>, {True: 461, False: 288})
2024-06-13 01:42:08 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj+ness_reg', prompt_templates=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], prompt_templates_zs=['The state of being {} is', 'The quality of being {} is', 'The noun form of {} is'], samples=[RelationSample(subject='amazing', object=['amazingness']), RelationSample(subject='attractive', object=['attractiveness']), RelationSample(subject='aware', object=['awareness']), RelationSample(subject='broken', object=['brokenness']), RelationSample(subject='careful', object=['carefulness']), RelationSample(subject='cheap', object=['cheapness']), RelationSample(subject='competitive', object=['competitiveness']), RelationSample(subject='connected', object=['connectedness']), RelationSample(subject='conscious', object=['consciousness']), RelationSample(subject='creative', object=['creativeness']), RelationSample(subject='dangerous', object=['dangerousness']), RelationSample(subject='devoted', object=['devotedness']), RelationSample(subject='directed', object=['directedness']), RelationSample(subject='distinct', object=['distinctness']), RelationSample(subject='distinctive', object=['distinctiveness']), RelationSample(subject='effective', object=['effectiveness']), RelationSample(subject='extensive', object=['extensiveness']), RelationSample(subject='fixed', object=['fixedness']), RelationSample(subject='foreign', object=['foreignness']), RelationSample(subject='happy', object=['happiness']), RelationSample(subject='helpful', object=['helpfulness']), RelationSample(subject='hidden', object=['hiddenness']), RelationSample(subject='hot', object=['hotness']), RelationSample(subject='huge', object=['hugeness']), RelationSample(subject='impressive', object=['impressiveness']), RelationSample(subject='innovative', object=['innovativeness']), RelationSample(subject='interesting', object=['interestingness']), RelationSample(subject='mad', object=['madness']), RelationSample(subject='marked', object=['markedness']), RelationSample(subject='massive', object=['massiveness']), RelationSample(subject='nice', object=['niceness']), RelationSample(subject='obvious', object=['obviousness']), RelationSample(subject='odd', object=['oddness']), RelationSample(subject='prepared', object=['preparedness']), RelationSample(subject='pure', object=['pureness']), RelationSample(subject='random', object=['randomness']), RelationSample(subject='rare', object=['rareness']), RelationSample(subject='reasonable', object=['reasonableness']), RelationSample(subject='related', object=['relatedness']), RelationSample(subject='righteous', object=['righteousness']), RelationSample(subject='sacred', object=['sacredness']), RelationSample(subject='sad', object=['sadness']), RelationSample(subject='same', object=['sameness']), RelationSample(subject='serious', object=['seriousness']), RelationSample(subject='situated', object=['situatedness']), RelationSample(subject='strange', object=['strangeness']), RelationSample(subject='unique', object=['uniqueness']), RelationSample(subject='useful', object=['usefulness']), RelationSample(subject='vast', object=['vastness']), RelationSample(subject='weak', object=['weakness'])], _domain=None, _range=None)
2024-06-13 01:42:10 root INFO     starting operator prediction
2024-06-13 01:42:10 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The state of being {} is)
2024-06-13 01:42:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:46:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:46:12 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:46:13 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:50:13 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:50:13 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:50:13 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:54:13 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:54:13 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:54:14 root INFO     [order_1_approx] starting weight calculation
2024-06-13 01:58:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 01:58:12 root INFO     [order_1_approx] weight calculation finished
2024-06-13 01:58:13 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:02:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:02:12 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:02:12 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:06:08 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:06:08 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:06:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:10:07 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:10:07 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:10:07 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:14:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:14:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:14:04 root INFO     total operator prediction time: 1914.4625208377838 seconds
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['amazingness'] is True
2024-06-13 02:14:07 root INFO     [' attractiveness', ' being', ' the', ' a', '\n'] matches ['attractiveness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' awareness'] matches ['awareness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['brokenness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['carefulness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['cheapness'] is False
2024-06-13 02:14:07 root INFO     [' being', '\n', ' the', ' a', ' '] matches ['competitiveness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' connected', '\n', ' a'] matches ['connectedness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' consciousness'] matches ['consciousness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' creativity'] matches ['creativeness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['dangerousness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' ('] matches ['devotedness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' direction', ' directed', ' the', ' a'] matches ['directedness'] is True
2024-06-13 02:14:07 root INFO     [' being', '\n', ' the', ' a', ' distinct'] matches ['distinctness'] is True
2024-06-13 02:14:07 root INFO     ['\n', ' being', ' a', ' the', ' un'] matches ['distinctiveness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' ('] matches ['effectiveness'] is False
2024-06-13 02:14:07 root INFO     [' the', ' being', '\n', ' a', ' existence'] matches ['extensiveness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' fix', ' fixed', ' a'] matches ['fixedness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' '] matches ['foreignness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', ' happiness', '\n'] matches ['happiness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' un'] matches ['helpfulness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' un'] matches ['hiddenness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['hotness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['hugeness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' '] matches ['impressiveness'] is False
2024-06-13 02:14:07 root INFO     [' being', '\n', ' the', ' a', ' ('] matches ['innovativeness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' interesting', ' the', '\n', ' interest'] matches ['interestingness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['madness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['markedness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' ('] matches ['massiveness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' a', ' the', '\n', ' ('] matches ['niceness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' ('] matches ['obviousness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' odd', ' a', ' ('] matches ['oddness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' ('] matches ['preparedness'] is False
2024-06-13 02:14:07 root INFO     [' the', ' being', ' a', '\n', ' ('] matches ['pureness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', ' random', '\n'] matches ['randomness'] is True
2024-06-13 02:14:07 root INFO     [' the', ' a', ' being', '\n', ' ('] matches ['rareness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' reasonable'] matches ['reasonableness'] is True
2024-06-13 02:14:07 root INFO     [' related', ' being', ' the', '\n', ' a'] matches ['relatedness'] is True
2024-06-13 02:14:07 root INFO     ['\n', ' the', ' being', ' a', ' ('] matches ['righteousness'] is False
2024-06-13 02:14:07 root INFO     [' the', ' a', ' being', '\n', ' ('] matches ['sacredness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['sadness'] is False
2024-06-13 02:14:07 root INFO     [' the', ' being', ' a', '\n', ' sam'] matches ['sameness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' seriousness'] matches ['seriousness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', '\n', ' a', ' ('] matches ['situatedness'] is False
2024-06-13 02:14:07 root INFO     [' the', ' being', ' a', '\n', ' strang'] matches ['strangeness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' un', ' the', ' a', '\n'] matches ['uniqueness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' usefulness'] matches ['usefulness'] is True
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['vastness'] is False
2024-06-13 02:14:07 root INFO     [' being', ' the', ' a', '\n', ' ('] matches ['weakness'] is False
2024-06-13 02:14:07 root INFO     adj+ness_reg (50) total: defaultdict(<class 'int'>, {True: 480, False: 319})
2024-06-13 02:14:07 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='un+adj_reg', prompt_templates=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], prompt_templates_zs=['The opposite of {} is', '{} contrasts with ', 'The inverse of {} is'], samples=[RelationSample(subject='able', object=['unable']), RelationSample(subject='acceptable', object=['unacceptable']), RelationSample(subject='affected', object=['unaffected']), RelationSample(subject='authorized', object=['unauthorized', 'unauthorised']), RelationSample(subject='available', object=['unavailable']), RelationSample(subject='avoidable', object=['unavoidable']), RelationSample(subject='aware', object=['unaware']), RelationSample(subject='believable', object=['unbelievable']), RelationSample(subject='biased', object=['unbiased']), RelationSample(subject='certain', object=['uncertain']), RelationSample(subject='changed', object=['unchanged']), RelationSample(subject='comfortable', object=['uncomfortable']), RelationSample(subject='conditional', object=['unconditional']), RelationSample(subject='conscious', object=['unconscious']), RelationSample(subject='controlled', object=['uncontrolled']), RelationSample(subject='desirable', object=['undesirable']), RelationSample(subject='employed', object=['unemployed']), RelationSample(subject='expected', object=['unexpected']), RelationSample(subject='finished', object=['unfinished']), RelationSample(subject='forgettable', object=['unforgettable']), RelationSample(subject='fortunate', object=['unfortunate']), RelationSample(subject='happy', object=['unhappy']), RelationSample(subject='healthy', object=['unhealthy']), RelationSample(subject='identified', object=['unidentified']), RelationSample(subject='intended', object=['unintended']), RelationSample(subject='interrupted', object=['uninterrupted']), RelationSample(subject='known', object=['unknown']), RelationSample(subject='lawful', object=['unlawful']), RelationSample(subject='lucky', object=['unlucky']), RelationSample(subject='noticed', object=['unnoticed']), RelationSample(subject='paid', object=['unpaid']), RelationSample(subject='pleasant', object=['unpleasant']), RelationSample(subject='popular', object=['unpopular']), RelationSample(subject='predictable', object=['unpredictable']), RelationSample(subject='published', object=['unpublished']), RelationSample(subject='realistic', object=['unrealistic']), RelationSample(subject='reasonable', object=['unreasonable']), RelationSample(subject='related', object=['unrelated']), RelationSample(subject='reliable', object=['unreliable']), RelationSample(subject='resolved', object=['unresolved']), RelationSample(subject='restricted', object=['unrestricted']), RelationSample(subject='satisfactory', object=['unsatisfactory']), RelationSample(subject='specified', object=['unspecified']), RelationSample(subject='successful', object=['unsuccessful']), RelationSample(subject='suitable', object=['unsuitable']), RelationSample(subject='sustainable', object=['unsustainable']), RelationSample(subject='used', object=['unused']), RelationSample(subject='usual', object=['unusual']), RelationSample(subject='veiled', object=['unveiled']), RelationSample(subject='wanted', object=['unwanted'])], _domain=None, _range=None)
2024-06-13 02:14:09 root INFO     starting operator prediction
2024-06-13 02:14:09 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-13 02:14:09 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:18:08 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:18:08 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:18:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:22:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:22:05 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:22:05 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:26:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:26:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:26:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:30:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:30:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:30:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:34:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:34:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:34:05 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:38:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:38:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:38:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:42:02 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:42:02 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:42:02 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:46:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:46:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:46:03 root INFO     total operator prediction time: 1914.5851910114288 seconds
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unaware', ' in', ' unknown'] matches ['unable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unacceptable', ' in', ' unre'] matches ['unacceptable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unaware', ' in'] matches ['unaffected'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unauthorized', '\n', ' in'] matches ['unauthorized', 'unauthorised'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unavailable', ' in', ' unre'] matches ['unavailable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unre', ' in', ' unc'] matches ['unavoidable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' unaware', ' not', ' unknow', ' oblivious'] matches ['unaware'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' uncon', ' unbelievable', ' unre'] matches ['unbelievable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unbiased', ' uncon', ' unin'] matches ['unbiased'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' uncertain', ' unknown', ' und'] matches ['uncertain'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unc', ' uncon'] matches ['unchanged'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' uncom', ' uncon', ' in'] matches ['uncomfortable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' non', ' unc', ' uncond'] matches ['unconditional'] is True
2024-06-13 02:46:06 root INFO     [' un', ' unconscious', ' not', ' unaware', ' uncons'] matches ['unconscious'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' uncon', ' uncontrolled', ' unc'] matches ['uncontrolled'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' undes', ' undesirable'] matches ['undesirable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unaware', ' in'] matches ['unemployed'] is True
2024-06-13 02:46:06 root INFO     [' un', ' unexpected', ' not', ' unex', ' unknown'] matches ['unexpected'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unf', ' und', ' unw'] matches ['unfinished'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' in', ' unf'] matches ['unforgettable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unf', '\n', ' und'] matches ['unfortunate'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unaware', ' unhappy', ' unf'] matches ['unhappy'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' in', ' und', ' unin'] matches ['unhealthy'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unidentified', ' unknown'] matches ['unidentified'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' undes', ' unexpected', ' unknown'] matches ['unintended'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' uncon', ' unc'] matches ['uninterrupted'] is True
2024-06-13 02:46:06 root INFO     [' unknown', ' un', ' not', ' unknow', ' uncertain'] matches ['unknown'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unlawful', ' unl', ' und'] matches ['unlawful'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unl', ' unlucky', ' unaware'] matches ['unlucky'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unknown', ' uns'] matches ['unnoticed'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unknown', ' und', ' unaware'] matches ['unpaid'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' in', ' und', '\n'] matches ['unpleasant'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unknown', ' in', ' non'] matches ['unpopular'] is True
2024-06-13 02:46:06 root INFO     [' un', ' unpredictable', ' not', ' unexpected', ' und'] matches ['unpredictable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unpublished', ' unknown', ' unre'] matches ['unpublished'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unre', ' unreal', ' uncon'] matches ['unrealistic'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unre', ' unreasonable', ' uncon'] matches ['unreasonable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unre', ' uncon', ' unknown'] matches ['unrelated'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unreliable', ' unre', ' uncertain'] matches ['unreliable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unre', ' uncon', ' und'] matches ['unresolved'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' uncon', ' und', ' unre'] matches ['unrestricted'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', '\n', ' und', ' in'] matches ['unsatisfactory'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unspecified', ' uns'] matches ['unspecified'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' in', ' und', '\n'] matches ['unsuccessful'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' in', ' uncon', ' und'] matches ['unsuitable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' uns', ' in', ' non'] matches ['unsustainable'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unknown', ' uns', ' unw'] matches ['unused'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unexpected', ' unknown', ' uns'] matches ['unusual'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' und', ' unaware', ' unw'] matches ['unveiled'] is True
2024-06-13 02:46:06 root INFO     [' un', ' not', ' unknown', ' unw', ' undes'] matches ['unwanted'] is True
2024-06-13 02:46:06 root INFO     un+adj_reg (50) total: defaultdict(<class 'int'>, {True: 530, False: 319})
2024-06-13 02:46:06 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='adj+ly_reg', prompt_templates=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], prompt_templates_zs=['The adjective form of {} is', 'The adjective derived from {} is', 'The descriptive form of {} is'], samples=[RelationSample(subject='according', object=['accordingly']), RelationSample(subject='actual', object=['actually']), RelationSample(subject='additional', object=['additionally']), RelationSample(subject='apparent', object=['apparently']), RelationSample(subject='beautiful', object=['beautifully']), RelationSample(subject='clinical', object=['clinically']), RelationSample(subject='creative', object=['creatively']), RelationSample(subject='critical', object=['critically']), RelationSample(subject='cultural', object=['culturally']), RelationSample(subject='decided', object=['decidedly']), RelationSample(subject='different', object=['differently']), RelationSample(subject='digital', object=['digitally']), RelationSample(subject='effective', object=['effectively']), RelationSample(subject='environmental', object=['environmentally']), RelationSample(subject='extensive', object=['extensively']), RelationSample(subject='famous', object=['famously']), RelationSample(subject='federal', object=['federally']), RelationSample(subject='financial', object=['financially']), RelationSample(subject='global', object=['globally']), RelationSample(subject='historical', object=['historically']), RelationSample(subject='huge', object=['hugely']), RelationSample(subject='immediate', object=['immediately']), RelationSample(subject='important', object=['importantly']), RelationSample(subject='increasing', object=['increasingly']), RelationSample(subject='interesting', object=['interestingly']), RelationSample(subject='internal', object=['internally']), RelationSample(subject='international', object=['internationally']), RelationSample(subject='legal', object=['legally']), RelationSample(subject='mental', object=['mentally']), RelationSample(subject='nice', object=['nicely']), RelationSample(subject='obvious', object=['obviously']), RelationSample(subject='physical', object=['physically']), RelationSample(subject='political', object=['politically']), RelationSample(subject='popular', object=['popularly']), RelationSample(subject='practical', object=['practically']), RelationSample(subject='previous', object=['previously']), RelationSample(subject='rare', object=['rarely']), RelationSample(subject='regional', object=['regionally']), RelationSample(subject='serious', object=['seriously']), RelationSample(subject='sexual', object=['sexually']), RelationSample(subject='significant', object=['significantly']), RelationSample(subject='similar', object=['similarly']), RelationSample(subject='strong', object=['strongly']), RelationSample(subject='subsequent', object=['subsequently']), RelationSample(subject='successful', object=['successfully']), RelationSample(subject='traditional', object=['traditionally']), RelationSample(subject='typical', object=['typically']), RelationSample(subject='unique', object=['uniquely']), RelationSample(subject='virtual', object=['virtually']), RelationSample(subject='visual', object=['visually'])], _domain=None, _range=None)
2024-06-13 02:46:08 root INFO     starting operator prediction
2024-06-13 02:46:08 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The adjective form of {} is)
2024-06-13 02:46:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:50:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:50:10 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:50:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:54:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:54:10 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:54:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 02:58:08 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 02:58:08 root INFO     [order_1_approx] weight calculation finished
2024-06-13 02:58:09 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:02:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:02:06 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:02:06 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:05:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:05:59 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:05:59 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:09:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:09:58 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:09:58 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:13:56 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:13:56 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:13:57 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:17:55 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:17:55 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:17:55 root INFO     total operator prediction time: 1907.342230796814 seconds
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' indeed', ' certainly', '\n'] matches ['accordingly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' currently', ' definitely', ' really', ' indeed'] matches ['actually'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' indeed', '\n', ' really'] matches ['additionally'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' obviously', ' apparently', ' evidently'] matches ['apparently'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' really', ' definitely', '\n', ' indeed'] matches ['beautifully'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', '\n', ' currently', ' '] matches ['clinically'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' effectively', '\n', ' definitely', ' '] matches ['creatively'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' critically', ' currently', ' effectively', ' definitely'] matches ['critically'] is True
2024-06-13 03:17:58 root INFO     [' actually', '\n', ' ', ' currently', ' effectively'] matches ['culturally'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' certainly', ' indeed', ' really'] matches ['decidedly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' indeed', ' certainly', ' really'] matches ['differently'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' digitally', ' effectively', '\n'] matches ['digitally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' effectively', ' definitely', ' essentially', ' indeed'] matches ['effectively'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' environmentally', '\n', ' effectively', ' '] matches ['environmentally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' extensively', ' extremely', ' effectively', ' definitely'] matches ['extensively'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' currently', ' really', ' certainly'] matches ['famously'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', '\n', ' effectively', ' essentially'] matches ['federally'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' financially', ' definitely', '\n', ' indeed'] matches ['financially'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' currently', ' globally', ' definitely', ' internationally'] matches ['globally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' historically', '\n', ' currently', ' definitely'] matches ['historically'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' really', ' extremely', ' definitely', ' certainly'] matches ['hugely'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' immediately', ' definitely', ' certainly', '\n'] matches ['immediately'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' importantly', ' significantly', ' effectively'] matches ['importantly'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' currently', ' certainly', ' indeed'] matches ['increasingly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' certainly', ' indeed', '\n'] matches ['interestingly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' internally', '\n', ' inherently'] matches ['internally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' internationally', '\n', ' ', ' definitely'] matches ['internationally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' legally', ' definitely', ' really', ' officially'] matches ['legally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' mentally', ' really', ' essentially'] matches ['mentally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' really', ' certainly', ' indeed'] matches ['nicely'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' obviously', ' definitely', ' evidently', ' certainly'] matches ['obviously'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' physically', ' essentially', ' indeed'] matches ['physically'] is True
2024-06-13 03:17:58 root INFO     [' actually', '\n', ' ', ' currently', ' definitely'] matches ['politically'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' currently', ' definitely', '\n', ' really'] matches ['popularly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' practically', ' definitely', ' effectively', '\n'] matches ['practically'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' currently', ' definitely', ' indeed', '\n'] matches ['previously'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' really', ' definitely', ' indeed', ' certainly'] matches ['rarely'] is False
2024-06-13 03:17:58 root INFO     [' actually', '\n', ' currently', ' ', ' definitely'] matches ['regionally'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' seriously', ' definitely', ' really', ' certainly'] matches ['seriously'] is True
2024-06-13 03:17:58 root INFO     [' actually', '\n', ' definitely', ' essentially', ' certainly'] matches ['sexually'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' significantly', ' definitely', ' effectively', ' certainly'] matches ['significantly'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' significantly', ' indeed', ' certainly'] matches ['similarly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' certainly', ' effectively', ' indeed'] matches ['strongly'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' currently', '\n', ' definitely', ' indeed'] matches ['subsequently'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' successfully', ' definitely', ' effectively', ' certainly'] matches ['successfully'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' traditionally', '\n', ' definitely', ' effectively'] matches ['traditionally'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' typically', ' indeed', ' certainly'] matches ['typically'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' certainly', ' indeed', ' really'] matches ['uniquely'] is False
2024-06-13 03:17:58 root INFO     [' actually', ' virtually', ' essentially', ' ', ' definitely'] matches ['virtually'] is True
2024-06-13 03:17:58 root INFO     [' actually', ' definitely', ' really', ' indeed', ' essentially'] matches ['visually'] is False
2024-06-13 03:17:58 root INFO     adj+ly_reg (50) total: defaultdict(<class 'int'>, {True: 555, False: 344})
2024-06-13 03:17:58 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+er_irreg', prompt_templates=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], prompt_templates_zs=['If you {} something, you are a', 'If someone {} something, they are a', 'To {}, one must be an '], samples=[RelationSample(subject='achieve', object=['achiever']), RelationSample(subject='advertise', object=['advertiser']), RelationSample(subject='announce', object=['announcer']), RelationSample(subject='bake', object=['baker']), RelationSample(subject='begin', object=['beginner']), RelationSample(subject='believe', object=['believer']), RelationSample(subject='borrow', object=['borrower']), RelationSample(subject='choreograph', object=['choreographer']), RelationSample(subject='compose', object=['composer']), RelationSample(subject='consume', object=['consumer']), RelationSample(subject='contend', object=['contender']), RelationSample(subject='defend', object=['defender']), RelationSample(subject='deliver', object=['deliverer']), RelationSample(subject='destroy', object=['destroyer']), RelationSample(subject='determine', object=['determiner']), RelationSample(subject='develop', object=['developer']), RelationSample(subject='discover', object=['discoverer']), RelationSample(subject='eat', object=['eater']), RelationSample(subject='entertain', object=['entertainer']), RelationSample(subject='examine', object=['examiner']), RelationSample(subject='explore', object=['explorer']), RelationSample(subject='follow', object=['follower']), RelationSample(subject='interpret', object=['interpreter']), RelationSample(subject='intrude', object=['intruder']), RelationSample(subject='learn', object=['learner']), RelationSample(subject='listen', object=['listener']), RelationSample(subject='lose', object=['loser']), RelationSample(subject='manage', object=['manager']), RelationSample(subject='molest', object=['molester']), RelationSample(subject='mourn', object=['mourner']), RelationSample(subject='observe', object=['observer']), RelationSample(subject='offend', object=['offender']), RelationSample(subject='organise', object=['organiser']), RelationSample(subject='organize', object=['organizer']), RelationSample(subject='perform', object=['performer']), RelationSample(subject='preach', object=['preacher']), RelationSample(subject='promote', object=['promoter']), RelationSample(subject='provide', object=['provider']), RelationSample(subject='publish', object=['publisher']), RelationSample(subject='receive', object=['receiver']), RelationSample(subject='recommend', object=['recommender']), RelationSample(subject='send', object=['sender']), RelationSample(subject='skydive', object=['skydiver']), RelationSample(subject='slay', object=['slayer']), RelationSample(subject='speak', object=['speaker']), RelationSample(subject='subscribe', object=['subscriber']), RelationSample(subject='suffer', object=['sufferer']), RelationSample(subject='teach', object=['teacher']), RelationSample(subject='tell', object=['teller']), RelationSample(subject='write', object=['writer'])], _domain=None, _range=None)
2024-06-13 03:18:00 root INFO     starting operator prediction
2024-06-13 03:18:00 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you {} something, you are a)
2024-06-13 03:18:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:22:01 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:22:01 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:22:02 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:26:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:26:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:26:03 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:30:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:30:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:30:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:34:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:34:06 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:34:06 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:38:08 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:38:08 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:38:09 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:42:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:42:11 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:42:11 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:46:13 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:46:13 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:46:13 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:50:15 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:50:15 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:50:15 root INFO     total operator prediction time: 1934.8180165290833 seconds
2024-06-13 03:50:17 root INFO     [' promoter', ' ', '\n', ' performer', ' rec'] matches ['achiever'] is False
2024-06-13 03:50:17 root INFO     [' promoter', ' ', '\n', ' advertis', ' broadcaster'] matches ['advertiser'] is True
2024-06-13 03:50:17 root INFO     [' promoter', ' presenter', ' ', ' broadcaster', '\n'] matches ['announcer'] is False
2024-06-13 03:50:17 root INFO     [' ', '\n', ' receiver', ' rec', ' user'] matches ['baker'] is False
2024-06-13 03:50:17 root INFO     [' ', ' promoter', '\n', ' person', ' receiver'] matches ['beginner'] is False
2024-06-13 03:50:17 root INFO     [' promoter', ' ', '\n', ' believer', ' supporter'] matches ['believer'] is True
2024-06-13 03:50:17 root INFO     [' ', ' receiver', '\n', ' rec', ' user'] matches ['borrower'] is False
2024-06-13 03:50:17 root INFO     [' ', '\n', ' rec', ' promoter', ' receiver'] matches ['choreographer'] is False
2024-06-13 03:50:17 root INFO     [' composer', ' ', '\n', ' promoter', ' con'] matches ['composer'] is True
2024-06-13 03:50:17 root INFO     [' consumer', ' receiver', ' ', ' con', '\n'] matches ['consumer'] is True
2024-06-13 03:50:17 root INFO     [' ', ' con', '\n', ' promoter', ' rec'] matches ['contender'] is True
2024-06-13 03:50:17 root INFO     [' ', ' defender', '\n', ' promoter', ' pres'] matches ['defender'] is True
2024-06-13 03:50:17 root INFO     [' ', ' del', '\n', ' provider', ' presenter'] matches ['deliverer'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' promoter', ' consumer', ' receiver'] matches ['destroyer'] is False
2024-06-13 03:50:17 root INFO     ['\n', ' ', ' promoter', ' receiver', ' person'] matches ['determiner'] is False
2024-06-13 03:50:17 root INFO     [' developer', ' promoter', ' ', '\n', ' producer'] matches ['developer'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' disc', ' promoter', ' receiver'] matches ['discoverer'] is True
2024-06-13 03:50:17 root INFO     [' consumer', ' receiver', ' ', ' user', '\n'] matches ['eater'] is False
2024-06-13 03:50:17 root INFO     [' ', '\n', ' presenter', ' promoter', ' rec'] matches ['entertainer'] is False
2024-06-13 03:50:17 root INFO     [' ', '\n', ' promoter', ' pres', ' m'] matches ['examiner'] is False
2024-06-13 03:50:17 root INFO     [' ', '\n', ' promoter', ' presenter', ' rec'] matches ['explorer'] is False
2024-06-13 03:50:17 root INFO     [' ', ' promoter', ' follower', '\n', ' m'] matches ['follower'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' receiver', ' promoter', ' pres'] matches ['interpreter'] is False
2024-06-13 03:50:17 root INFO     [' ', ' user', ' promoter', '\n', ' pres'] matches ['intruder'] is False
2024-06-13 03:50:17 root INFO     [' ', ' receiver', '\n', ' listener', ' user'] matches ['learner'] is False
2024-06-13 03:50:17 root INFO     [' listener', ' receiver', ' ', '\n', ' speaker'] matches ['listener'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' receiver', ' promoter', ' m'] matches ['loser'] is False
2024-06-13 03:50:17 root INFO     [' manager', ' promoter', ' m', ' ', '\n'] matches ['manager'] is True
2024-06-13 03:50:17 root INFO     [' m', ' ', '\n', ' promoter', ' receiver'] matches ['molester'] is True
2024-06-13 03:50:17 root INFO     [' m', ' ', '\n', ' receiver', ' rec'] matches ['mourner'] is True
2024-06-13 03:50:17 root INFO     [' ', ' receiver', '\n', ' promoter', ' observer'] matches ['observer'] is True
2024-06-13 03:50:17 root INFO     [' ', ' promoter', '\n', ' person', ' pres'] matches ['offender'] is False
2024-06-13 03:50:17 root INFO     [' promoter', ' ', '\n', ' presenter', ' provider'] matches ['organiser'] is False
2024-06-13 03:50:17 root INFO     [' promoter', ' ', '\n', ' rec', ' receiver'] matches ['organizer'] is False
2024-06-13 03:50:17 root INFO     [' performer', ' promoter', ' presenter', ' ', '\n'] matches ['performer'] is True
2024-06-13 03:50:17 root INFO     [' pres', ' promoter', ' preacher', ' presenter', ' '] matches ['preacher'] is True
2024-06-13 03:50:17 root INFO     [' promoter', ' ', ' prom', '\n', ' promot'] matches ['promoter'] is True
2024-06-13 03:50:17 root INFO     [' provider', ' promoter', ' presenter', ' producer', ' '] matches ['provider'] is True
2024-06-13 03:50:17 root INFO     [' publisher', ' promoter', ' producer', ' ', '\n'] matches ['publisher'] is True
2024-06-13 03:50:17 root INFO     [' receiver', ' recipient', ' rec', ' ', '\n'] matches ['receiver'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' recomm', ' promoter', ' rec'] matches ['recommender'] is True
2024-06-13 03:50:17 root INFO     [' sender', ' receiver', ' ', '\n', ' s'] matches ['sender'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' receiver', ' promoter', ' person'] matches ['skydiver'] is False
2024-06-13 03:50:17 root INFO     [' ', '\n', ' s', ' person', ' pres'] matches ['slayer'] is True
2024-06-13 03:50:17 root INFO     [' speaker', ' ', '\n', ' promoter', ' pres'] matches ['speaker'] is True
2024-06-13 03:50:17 root INFO     [' subscriber', ' ', '\n', ' promoter', ' receiver'] matches ['subscriber'] is True
2024-06-13 03:50:17 root INFO     [' ', '\n', ' subscriber', ' pres', ' receiver'] matches ['sufferer'] is False
2024-06-13 03:50:17 root INFO     [' teacher', ' ', '\n', ' promoter', ' provider'] matches ['teacher'] is True
2024-06-13 03:50:17 root INFO     [' ', ' receiver', '\n', ' t', ' rec'] matches ['teller'] is True
2024-06-13 03:50:17 root INFO     [' writer', ' ', '\n', ' promoter', ' user'] matches ['writer'] is True
2024-06-13 03:50:17 root INFO     verb+er_irreg (50) total: defaultdict(<class 'int'>, {True: 584, False: 365})
2024-06-13 03:50:17 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='verb+able_reg', prompt_templates=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], prompt_templates_zs=['If you can {} something, that thing is', 'Being able to {} something implies that thing is', 'Being able to {} something suggests that thing is'], samples=[RelationSample(subject='accept', object=['acceptable']), RelationSample(subject='achieve', object=['achieveable']), RelationSample(subject='adapt', object=['adaptable']), RelationSample(subject='adjust', object=['adjustable']), RelationSample(subject='admire', object=['admirable']), RelationSample(subject='adore', object=['adorable']), RelationSample(subject='advise', object=['advisable']), RelationSample(subject='afford', object=['affordable']), RelationSample(subject='avoid', object=['avoidable']), RelationSample(subject='believe', object=['believeable', 'believable']), RelationSample(subject='consider', object=['considerable']), RelationSample(subject='contain', object=['containable']), RelationSample(subject='define', object=['definable']), RelationSample(subject='deliver', object=['deliverable']), RelationSample(subject='discover', object=['discoverable']), RelationSample(subject='dispose', object=['disposable']), RelationSample(subject='download', object=['downloadable']), RelationSample(subject='edit', object=['editable']), RelationSample(subject='enjoy', object=['enjoyable']), RelationSample(subject='execute', object=['executable']), RelationSample(subject='expand', object=['expandable']), RelationSample(subject='expect', object=['expectable']), RelationSample(subject='explain', object=['explainable']), RelationSample(subject='extend', object=['extendable']), RelationSample(subject='foresee', object=['foreseeable']), RelationSample(subject='identify', object=['identifiable']), RelationSample(subject='imagine', object=['imaginable']), RelationSample(subject='improve', object=['improvable']), RelationSample(subject='inflate', object=['inflatable']), RelationSample(subject='learn', object=['learnable']), RelationSample(subject='maintain', object=['maintainable']), RelationSample(subject='manage', object=['manageable']), RelationSample(subject='observe', object=['observable']), RelationSample(subject='perform', object=['performable']), RelationSample(subject='predict', object=['predictable']), RelationSample(subject='prefer', object=['preferable']), RelationSample(subject='prevent', object=['preventable']), RelationSample(subject='protect', object=['protectable']), RelationSample(subject='publish', object=['publishable']), RelationSample(subject='recognize', object=['recognizable', 'recognisable']), RelationSample(subject='recommend', object=['recommendable']), RelationSample(subject='rely', object=['reliable']), RelationSample(subject='renew', object=['renewable']), RelationSample(subject='replace', object=['replaceable']), RelationSample(subject='represent', object=['representable']), RelationSample(subject='survive', object=['survivable']), RelationSample(subject='sustain', object=['sustainable']), RelationSample(subject='understand', object=['understandable']), RelationSample(subject='vary', object=['variable']), RelationSample(subject='write', object=['writeable', 'writable'])], _domain=None, _range=None)
2024-06-13 03:50:19 root INFO     starting operator prediction
2024-06-13 03:50:19 lre.operators WARNING  relation has > 1 prompt_templates, will use first (If you can {} something, that thing is)
2024-06-13 03:50:20 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:54:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:54:21 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:54:21 root INFO     [order_1_approx] starting weight calculation
2024-06-13 03:58:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 03:58:21 root INFO     [order_1_approx] weight calculation finished
2024-06-13 03:58:21 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:02:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:02:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:02:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:06:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:06:24 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:06:25 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:10:27 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:10:27 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:10:27 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:14:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:14:28 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:14:28 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:18:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:18:31 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:18:31 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:22:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:22:31 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:22:31 root INFO     total operator prediction time: 1931.944494009018 seconds
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' ', ' acceptable', ' a'] matches ['acceptable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' possible', ' avoid', ' achievable'] matches ['achieveable'] is False
2024-06-13 04:22:34 root INFO     [' adapt', ' capable', ' able', ' ', ' a'] matches ['adaptable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' ', ' a', ' manageable'] matches ['adjustable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' in', ' a', ' ', ' to'] matches ['admirable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' ', ' a', ' in'] matches ['adorable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' a', ' ', ' avoid'] matches ['advisable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' ', ' a', ' to'] matches ['affordable'] is True
2024-06-13 04:22:34 root INFO     [' avoid', ' capable', ' able', ' prevent', ' manageable'] matches ['avoidable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' possible', ' able', ' ', ' a'] matches ['believeable', 'believable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' possible', ' ', ' potentially', ' a'] matches ['considerable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' manageable', ' able', ' ', ' in'] matches ['containable'] is False
2024-06-13 04:22:34 root INFO     [' def', ' capable', ' defin', ' a', ' '] matches ['definable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' a', ' ', ' to'] matches ['deliverable'] is False
2024-06-13 04:22:34 root INFO     [' capable', '\n', ' ', ' a', ' in'] matches ['discoverable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' ', ' disposable', ' a', ' able'] matches ['disposable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' a', ' able', ' ', ' to'] matches ['downloadable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' edit', ' ', ' ext'] matches ['editable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' in', ' a', ' '] matches ['enjoyable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' ', ' executable', ' ext'] matches ['executable'] is True
2024-06-13 04:22:34 root INFO     [' expand', ' capable', ' ext', ' ', ' able'] matches ['expandable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' predictable', ' able', ' possible', ' pre'] matches ['expectable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' explain', ' ', ' able', ' predictable'] matches ['explainable'] is True
2024-06-13 04:22:34 root INFO     [' ext', ' extend', ' capable', ' ', ' able'] matches ['extendable'] is True
2024-06-13 04:22:34 root INFO     [' predictable', ' pre', ' prevent', ' capable', ' possible'] matches ['foreseeable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' ', ' able', '\n', ' in'] matches ['identifiable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' possible', ' ', ' potentially', ' able'] matches ['imaginable'] is False
2024-06-13 04:22:34 root INFO     [' impro', ' capable', ' possible', ' ', ' potentially'] matches ['improvable'] is True
2024-06-13 04:22:34 root INFO     [' inf', ' in', ' ', ' capable', ' a'] matches ['inflatable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' learn', ' able', ' a', ' manageable'] matches ['learnable'] is True
2024-06-13 04:22:34 root INFO     [' manageable', ' capable', ' maintain', ' a', ' '] matches ['maintainable'] is True
2024-06-13 04:22:34 root INFO     [' manageable', ' capable', ' able', ' a', ' possible'] matches ['manageable'] is True
2024-06-13 04:22:34 root INFO     [' observable', ' capable', ' able', ' ', ' a'] matches ['observable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' perform', ' able', ' ', ' possible'] matches ['performable'] is True
2024-06-13 04:22:34 root INFO     [' predictable', ' pre', ' capable', ' possible', ' potentially'] matches ['predictable'] is True
2024-06-13 04:22:34 root INFO     [' preferable', ' capable', ' pre', ' a', ' '] matches ['preferable'] is True
2024-06-13 04:22:34 root INFO     [' prevent', ' pre', ' capable', ' avoid', ' predictable'] matches ['preventable'] is True
2024-06-13 04:22:34 root INFO     [' protect', ' prevent', ' capable', ' predictable', ' pre'] matches ['protectable'] is True
2024-06-13 04:22:34 root INFO     [' a', ' capable', ' potentially', ' ', ' pre'] matches ['publishable'] is False
2024-06-13 04:22:34 root INFO     [' capable', '\n', ' ', ' a', ' able'] matches ['recognizable', 'recognisable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' ', ' a', ' to', '\n'] matches ['recommendable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' reliable', ' able', ' a', ' likely'] matches ['reliable'] is True
2024-06-13 04:22:34 root INFO     [' ', ' capable', ' re', ' a', ' in'] matches ['renewable'] is True
2024-06-13 04:22:34 root INFO     [' replace', ' capable', ' a', ' ', ' able'] matches ['replaceable'] is True
2024-06-13 04:22:34 root INFO     [' capable', ' ', ' a', ' able', '\n'] matches ['representable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' ', ' potentially', '\n'] matches ['survivable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' ', '\n', ' a', ' able'] matches ['sustainable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' ', '\n', ' able', ' in'] matches ['understandable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' able', ' a', ' ', ' possible'] matches ['variable'] is False
2024-06-13 04:22:34 root INFO     [' capable', ' a', ' able', ' ', ' possible'] matches ['writeable', 'writable'] is False
2024-06-13 04:22:34 root INFO     verb+able_reg (50) total: defaultdict(<class 'int'>, {True: 613, False: 386})
2024-06-13 04:22:34 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='meronyms - part', prompt_templates=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], prompt_templates_zs=['A part of a {} is a', 'A piece of a {} is a', 'An element of a {} is a'], samples=[RelationSample(subject='academia', object=['college', 'university', 'institute']), RelationSample(subject='apartment', object=['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room']), RelationSample(subject='bird', object=['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat']), RelationSample(subject='brush', object=['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem']), RelationSample(subject='bus', object=['seats', 'conductor', 'window', 'driver', 'roof']), RelationSample(subject='byte', object=['bit']), RelationSample(subject='car', object=['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system']), RelationSample(subject='castle', object=['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall']), RelationSample(subject='cat', object=['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth']), RelationSample(subject='chair', object=['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs']), RelationSample(subject='church', object=['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner']), RelationSample(subject='comb', object=['teeth', 'shaft', 'grip', 'tooth', 'handle']), RelationSample(subject='day', object=['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour']), RelationSample(subject='deer', object=['antler', 'antlers', 'withers', 'flag', 'scut']), RelationSample(subject='dollar', object=['cent']), RelationSample(subject='door', object=['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill']), RelationSample(subject='dress', object=['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener']), RelationSample(subject='filename', object=['extension', 'name']), RelationSample(subject='flower', object=['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium']), RelationSample(subject='gigabit', object=['megabit', 'kbit', 'kb', 'kilobit', 'mb', 'mbit']), RelationSample(subject='gramm', object=['milligram', 'mg', 'grain', 'milligram', 'mcg', 'carat', 'microgram', 'ng', 'dg', 'decigram', 'nanogram', 'metric_grain', 'obolus']), RelationSample(subject='guitar', object=['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard']), RelationSample(subject='gun', object=['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover']), RelationSample(subject='harbor', object=['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='jail', object=['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell']), RelationSample(subject='jewellery', object=['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel']), RelationSample(subject='litre', object=['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre']), RelationSample(subject='movie', object=['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption']), RelationSample(subject='orthography', object=['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling']), RelationSample(subject='piano', object=['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal']), RelationSample(subject='pie', object=['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing']), RelationSample(subject='poem', object=['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry']), RelationSample(subject='pub', object=['bar', 'barroom', 'taproom', 'saloon', 'ginmill']), RelationSample(subject='radio', object=['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set']), RelationSample(subject='railcar', object=['suspension', 'cushion', 'shock', 'shock_absorber', 'suspension_system']), RelationSample(subject='seafront', object=['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage']), RelationSample(subject='shilling', object=['pence']), RelationSample(subject='shirt', object=['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button']), RelationSample(subject='sonata', object=['movement', 'part']), RelationSample(subject='staircase', object=['step', 'riser', 'landing', 'tread', 'stair', 'stairhead']), RelationSample(subject='sword', object=['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge']), RelationSample(subject='table', object=['tabletop', 'tableware', 'leg', 'legs']), RelationSample(subject='teapot', object=['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter']), RelationSample(subject='telephone', object=['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver']), RelationSample(subject='tonne', object=['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg']), RelationSample(subject='torso', object=['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end']), RelationSample(subject='tripod', object=['leg', 'stand']), RelationSample(subject='typewriter', object=['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer']), RelationSample(subject='window', object=['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame']), RelationSample(subject='womb', object=['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'])], _domain=None, _range=None)
2024-06-13 04:22:36 root INFO     starting operator prediction
2024-06-13 04:22:36 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A part of a {} is a)
2024-06-13 04:22:36 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:26:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:26:40 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:26:40 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:30:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:30:42 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:30:42 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:34:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:34:41 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:34:41 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:38:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:38:41 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:38:41 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:42:40 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:42:40 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:42:40 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:46:41 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:46:41 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:46:41 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:50:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:50:42 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:50:42 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:54:42 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:54:42 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:54:42 root INFO     total operator prediction time: 1925.7676286697388 seconds
2024-06-13 04:54:45 root INFO     [' name', ' part', ' seat', ' body', ' f'] matches ['college', 'university', 'institute'] is False
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' floor', ' room', ' frame'] matches ['bedroom', 'room', 'bathroom', 'kitchen', 'kitchenette', 'living_room', 'pantry', 'toilet', 'shower_room'] is True
2024-06-13 04:54:45 root INFO     [' part', ' body', ' seat', ' name', ' frame'] matches ['feathers', 'plume', 'preen', 'croup', 'calamus', 'fowl', 'drumstick', 'syrinx', 'bill', 'rump', 'vane', 'barb', 'quill', 'shaft', 'pecker', 'pennon', 'feet', 'giblets', 'alula', 'talon', 'foot', 'pinion', 'wing', 'wishbone', 'nib', 'sac', 'giblet', 'furcula', 'bird', 'neb', 'feather', 'gland', 'oyster', 'thigh', 'plumage', 'web', 'hindquarters', 'beak', "parson's_nose", 'wishing_bone', "pope's_nose", 'spurious_wing', 'bastard_wing', 'croupe', 'air_sac', 'quill_feather', 'uropygium', "bird's_foot", 'uropygial', 'second_joint', 'uropygial_gland', 'preen_gland', 'flight_feather', 'dark_meat'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' set', ' seat', ' frame'] matches ['bristle', 'hold', 'shank', 'grip', 'handgrip', 'handle', 'head', 'stem'] is False
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' frame', ' body', ' chair'] matches ['seats', 'conductor', 'window', 'driver', 'roof'] is True
2024-06-13 04:54:45 root INFO     [' body', ' part', ' seat', ' bit', ' foot'] matches ['bit'] is True
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' frame', ' body', ' piece'] matches ['engine', 'armrest', 'headrest', 'grille', 'hinge', 'tailpipe', 'suspension', 'hood', 'horn', 'hooter', 'petrol', 'pintle', 'trunk', 'floorboard', 'bar', 'gas', 'buffer', 'door', 'stabilizer', 'seat', 'window', 'exhaust', 'tailfin', 'back', 'luggage', 'pedal', 'cowling', 'seatbelt', 'high', 'wing', 'gasoline', 'fin', 'cowl', 'silencer', 'gun', 'compartment', 'rear', 'radiator', 'accessory', 'sunroof', 'roof', 'lights', 'bumper', 'glove', 'bag', 'cushion', 'backrest', 'accelerator', 'fender', 'third', 'throttle', 'bonnet', 'air', 'gear', 'muffler', 'mirror', 'shock', 'reverse', 'anti-sway_bar', 'tail_fin', 'accelerator_pedal', 'car_seat', 'automobile_horn', 'anti-sway', 'automobile_engine', 'gasoline_engine', 'car_door', 'shock_absorber', 'luggage_compartment', 'glove_compartment', 'bumper_guard', 'exhaust_system', 'first_gear', 'high_gear', 'rear_window', 'sunshine-roof', 'third_gear', 'air_bag', 'doorlock', 'petrol_engine', 'automobile_trunk', 'auto_accessory', 'inlet_manifold', 'horn_button', 'running_board', 'stabilizer_bar', 'motor_horn', 'exhaust_manifold', 'exhaust_pipe', 'radiator_grille', 'low_gear', 'flexible_joint', 'head_restraint', 'hood_ornament', 'exhaust_valve', 'car_mirror', 'gas_pedal', 'seat_belt', 'reverse_gear', 'car_horn', 'car_window', 'suspension_system'] is True
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' set', ' chair'] matches ['donjon', 'tower', 'turret', 'gate', 'dungeon', 'moat', 'keep', 'great_hall'] is False
2024-06-13 04:54:45 root INFO     [' body', ' part', ' piece', ' seat', ' f'] matches ['whiskers', 'coat', 'paw', 'paws', 'fur', 'eyes', 'back', 'claws', 'tail', 'teeth'] is True
2024-06-13 04:54:45 root INFO     [' seat', ' chair', ' frame', ' leg', ' part'] matches ['seat', 'armrest', 'headrest', 'armrests', 'rest', 'pad', 'back', 'leg', 'backrest', 'legs'] is True
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' chair', ' body', ' frame'] matches ['altar', 'choir', 'vestry', 'transept', 'apse', 'sanctuary', 'rood', 'screen', 'bema', 'nave', 'tower', 'sacristy', 'corner', 'chancel', 'amen', 'chapel', 'apsis', 'side', 'narthex', 'presbytery', 'side_chapel', 'lady_chapel', 'church_tower', 'rood_screen', 'amen_corner'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' bit', ' set', ' seat'] matches ['teeth', 'shaft', 'grip', 'tooth', 'handle'] is False
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' piece', ' set'] matches ['hour', 'forenoon', 'eventide', 'nanosecond', 'noonday', 'femtosecond', 'hr', 'minutes', 'microsecond', 'msec', 'time', 'midnight', 'sec', 'nighttime', 'min', 'morning', 'noon', 'evening', 'dark', 'picosecond', 'daytime', 'minute', 'daylight', 's', 'high', 'even', 'quarter', 'morn', 'noontide', 'second', 'afternoon', 'twelve', 'millisecond', 'midday', 'midafternoon', 'attosecond', 'night', 'morning_time', 'high_noon', 'half-hour', 'twelve_noon', 'late-night_hour', 'early-morning_hour', 'lights-out', '60_minutes', 'small_hours', '30_minutes', '15_minutes', 'quarter-hour'] is False
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' frame', ' bit'] matches ['cent'] is False
2024-06-13 04:54:45 root INFO     [' part', ' frame', ' door', ' seat', ' body'] matches ['hinge', 'keyhole', 'threshold', 'doorframe', 'bolt', 'deadbolt', 'doorjamb', 'tumbler', 'doorpost', 'doorstep', 'doorcase', 'case', 'lock', 'casing', 'doorsill'] is True
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' frame', ' piece'] matches ['sleeve', 'slide', 'plastron', 'zip', 'zipper', 'fastener', 'hemline', 'bodice', 'neckline', 'waistline', 'belt', 'slide_fastener', 'zip_fastener'] is False
2024-06-13 04:54:45 root INFO     [' name', ' part', ' body', ' f', ' field'] matches ['extension', 'name'] is True
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' piece', ' set'] matches ['petal', 'leaf', 'anther', 'style', 'perianth', 'placenta', 'stamen', 'pistil', 'ovary', 'corolla', 'carpel', 'envelope', 'sepal', 'calyx', 'stigma', 'chlamys', 'petals', 'corona', 'perigonium', 'perigone', 'flower_petal', 'floral_leaf', 'floral_envelope', 'gynostegium'] is False
2024-06-13 04:54:45 root INFO     [' frame', ' part', ' piece', ' seat', ' body'] matches ['string', 'deck', 'pegs', 'fret', 'strings', 'frets', 'peg', 'fingerboard'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' frame', ' set', ' piece'] matches ['trigger', 'holder', 'safety', 'extractor', 'clip', 'magazine', 'barrel', 'hammer', 'viewfinder', 'gunsight', 'stock', 'cartridge', 'remover', 'chamber', 'ejector', 'cock', 'catch', 'finder', 'mechanism', 'gunstock', 'lock', 'action', 'muzzle', 'key', 'gunlock', 'cartridge_holder', 'gun_muzzle', 'gun-sight', 'action_mechanism', 'gun_chamber', 'gun_trigger', 'firing_mechanism', 'safety_lock', 'cartridge_extractor', 'firing_chamber', 'cartridge_ejector', 'view_finder', 'cartridge_clip', 'gun_barrel', 'safety_catch', 'cartridge_remover'] is False
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' set', ' name', ' body'] matches ['dock', 'facility', 'anchorage', 'landing', 'docking', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is False
2024-06-13 04:54:45 root INFO     [' seat', ' body', ' cell', ' f', ' part'] matches ['cell', 'cellblock', 'guard', 'police', 'prison_cell', 'jail_cell'] is True
2024-06-13 04:54:45 root INFO     [' part', ' body', ' seat', ' set', ' frame'] matches ['bead', 'stone', 'wire', 'beads', 'gemstone', 'gem', 'metal', 'gold', 'silver', 'platina', 'bead', 'beads', 'jewel'] is False
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' bit', ' piece'] matches ['millilitre', 'cc', 'ml', 'milliliter', 'cl', 'dl', 'deciliter', 'mil', 'cubic_centimetre', 'centiliter', 'decilitre', 'cubic_centimeter', 'centilitre', 'cubic_millimeter', 'cubic_millimetre'] is False
2024-06-13 04:54:45 root INFO     [' frame', ' part', ' seat', ' body', ' set'] matches ['scene', 'subtitles', 'footage', 'credit', 'episode', 'shot', 'sequence', 'credits', 'caption'] is False
2024-06-13 04:54:45 root INFO     [' body', ' seat', ' name', ' part', ' head'] matches ['hyphenation', 'punctuation', 'punctuation_mark', 'word_division', 'spelling'] is False
2024-06-13 04:54:45 root INFO     [' piece', ' frame', ' seat', ' part', ' bit'] matches ['keyboard', 'clavier', 'loud', 'hammer', 'sounding', 'pedal', 'sustaining', 'soft', 'fingerboard', 'soundboard', 'action', 'board', 'key', 'fallboard', 'piano_action', 'action_mechanism', 'damper_block', 'fall-board', 'sounding_board', 'sustaining_pedal', 'loud_pedal', 'piano_damper', 'piano_keyboard', 'sound_hole', 'soft_pedal'] is False
2024-06-13 04:54:45 root INFO     [' part', ' piece', ' frame', ' body', ' bit'] matches ['crust', 'cheese', 'filling', 'fruit', 'apple', 'berries', 'glazing', 'pastry', 'icing'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' piece', ' seat', ' frame'] matches ['stanza', 'canto', 'prosody', 'rime', 'line', 'rhyme', 'verse', 'poetic_rhythm', 'rhythmic_pattern', 'verse_line', 'line_of_verse', 'line_of_poetry'] is False
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' chair', ' bar', ' set'] matches ['bar', 'barroom', 'taproom', 'saloon', 'ginmill'] is True
2024-06-13 04:54:45 root INFO     [' part', ' frame', ' seat', ' body', ' set'] matches ['receiver', 'tuner', 'radio', 'demodulator', 'transmitter', 'detector', 'receiving', 'set', 'amplifier', 'wireless', 'radio_transmitter', 'receiving_set', 'radio_receiver', 'radio_set'] is True
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' f', ' name'] matches ['harbor', 'seaport', 'dock', 'haven', 'anchorage', 'landing', 'harbour', 'dockage', 'anchorage_ground', 'docking_facility', 'landing_place', 'landing_stage'] is False
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' piece', ' bit'] matches ['pence'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' seat', ' piece', ' frame'] matches ['button', 'dickie', 'collar', 'dickey', 'sleeve', 'buttons', 'dicky', 'pocket', 'shirttail', 'shirtsleeve', 'shirtfront', 'shirt_button'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' seat', ' piece', ' bit'] matches ['movement', 'part'] is True
2024-06-13 04:54:45 root INFO     [' seat', ' part', ' floor', ' leg', ' chair'] matches ['step', 'riser', 'landing', 'tread', 'stair', 'stairhead'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' piece', ' frame', ' seat'] matches ['blade', 'forte', 'hilt', 'peak', 'foible', 'point', 'pommel', 'haft', 'tip', 'knob', 'helve', 'knife_edge', 'cutting_edge'] is False
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' body', ' frame', ' table'] matches ['tabletop', 'tableware', 'leg', 'legs'] is True
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' top', ' piece', ' frame'] matches ['spout', 'handle', 'knob', 'lid', 'body', 'belly', 'base', 'filter', 'tea_filter'] is False
2024-06-13 04:54:45 root INFO     [' part', ' seat', ' frame', ' body', ' name'] matches ['receiver', 'mouthpiece', 'dial', 'wire', 'screen', 'display', 'telephone_receiver'] is False
2024-06-13 04:54:45 root INFO     [' part', ' body', ' bit', ' set', ' seat'] matches ['kilogram', 'mg', 'gm', 'hg', 'grain', 'milligram', 'hundredweight', 'kilo', 'mcg', 'dag', 'carat', 'microgram', 'gramme', 'quintal', 'ng', 'gram', 'dg', 'g', 'kg', 'decigram', 'nanogram', 'myriagram', 'centner', 'metric_grain', 'myg', 'dekagram', 'decagram', 'metric_hundredweight', 'obolus', 'doppelzentner', 'hectogram', 'dkg'] is False
2024-06-13 04:54:45 root INFO     [' body', ' part', ' seat', ' b', ' back'] matches ['chest', 'arse', 'shoulder', 'bum', 'midriff', 'groin', 'deltoid', 'diaphragm', 'lat', 'pectoralis', 'behind', 'gluteus', 'middle', 'stomach', 'teres', 'thorax', 'tush', 'ab', 'rump', 'breastbone', 'buns', 'gladiolus', 'haunch', 'backside', 'buttocks', 'serratus', 'pectoral', 'stern', 'navel', 'paunch', 'seat', 'mediastinum', 'ass', 'axilla', 'back', 'belly', 'bottom', 'omphalos', 'fundament', 'acromion', 'derriere', 'hindgut', 'gut', 'gallbladder', 'saddle', 'cheek', 'waist', 'butt', 'bowel', 'keister', 'bellybutton', 'pectus', 'prat', 'loins', 'abdominal', 'rear', 'dorsum', 'posterior', 'venter', 'small', 'abdomen', 'umbilicus', 'armpit', 'waistline', 'sternum', 'scapula', 'glute', 'manubrium', 'fanny', 'side', 'midsection', 'pecs', 'hip', 'buttock', 'intestine', 'breast', 'can', 'tail', 'hindquarters', 'xiphoid_process', 'thoracic_vertebra', 'abdominal_wall', 'musculus_deltoideus', 'abdominal_cavity', 'arteria_circumflexa_scapulae', 'arteria_glutes', 'arteria_axillaris', 'axillary_fossa', 'arteria_colica', 'articulatio_humeri', 'shoulder_joint', 'gall_bladder', 'spare_tire', 'arteria_circumflexa_humeri', 'serratus_muscles', 'axillary_artery', 'gluteus_muscle', 'love_handle', 'latissimus_dorsi', 'pectoral_muscle', 'tooshie', 'abdominal_muscle', 'circumflex_humeral_artery', 'abdominal_aorta', 'vena_thoracica', 'musculus_pectoralis', 'hypochondrium', 'area_of_cardiac_dullness', 'glenoid_cavity', 'rib_cage', 'thoracic_aorta', 'omphalus', 'circumflex_scapular_artery', 'acromial_process', 'shoulder_bone', 'tail_end', 'rear_end', 'gluteal_muscle', 'inguen', 'shoulder_blade', 'rotator_cuff', 'corpus_sternum', 'dorsal_vertebra', 'teres_muscle', 'thoracic_cavity', 'axillary_cavity', 'chest_cavity', 'deltoid_muscle', 'belly_button', 'gluteal_artery', 'thoracic_vein', 'glenoid_fossa', 'nates', 'colic_artery', 'lumbar_vertebra', 'hind_end'] is True
2024-06-13 04:54:45 root INFO     [' base', ' leg', ' part', ' seat', ' foot'] matches ['leg', 'stand'] is True
2024-06-13 04:54:45 root INFO     [' seat', ' frame', ' part', ' piece', ' body'] matches ['keyboard', 'typewriter', 'carriage', 'tab', 'ribbon', 'shift', 'backspace', 'action', 'key', 'typewriter_carriage', 'backspace_key', 'action_mechanism', 'typewriter_keyboard', 'shift_key', 'space_bar', 'tab_key', 'typewriter_ribbon', 'backspacer'] is False
2024-06-13 04:54:45 root INFO     [' frame', ' seat', ' part', ' window', ' body'] matches ['pane', 'sash', 'windowpane', 'window', 'fastener', 'glass', 'frame', 'case', 'windowsill', 'mullion', 'jamb', 'lock', 'casing', 'sash_lock', 'window_glass', 'sash_fastener', 'pane_of_glass', 'window_lock', 'window_sash', 'window_frame'] is True
2024-06-13 04:54:45 root INFO     [' body', ' seat', ' part', ' frame', ' f'] matches ['cervix', 'caul', 'placenta', 'oviduct', 'veil', 'myometrium', 'endometrium', 'uterine_artery', 'embryonic_membrane', 'uterine_cervix', 'uterine_cavity', 'fallopian_tube', 'uterine_tube', 'cervix_uteri', 'arteria_uterina'] is True
2024-06-13 04:54:45 root INFO     meronyms - part (50) total: defaultdict(<class 'int'>, {True: 630, False: 415})
2024-06-13 04:54:45 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='synonyms - exact', prompt_templates=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], prompt_templates_zs=['Another word for {} is ', 'Another way to say {} is', 'A different manner of saying {} is'], samples=[RelationSample(subject='airplane', object=['aeroplane', 'plane']), RelationSample(subject='auto', object=['car', 'automobile', 'motorcar']), RelationSample(subject='baby', object=['infant', 'babe']), RelationSample(subject='bicycle', object=['bike', 'wheel', 'cycle']), RelationSample(subject='child', object=['kid', 'youngster', 'minor', 'shaver', 'nipper', 'small_fry', 'tiddler', 'tike', 'tyke', 'fry', 'nestling']), RelationSample(subject='cloth', object=['fabric', 'material', 'textile']), RelationSample(subject='clothes', object=['clothing', 'apparel', 'dress']), RelationSample(subject='confused', object=['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up']), RelationSample(subject='dollars', object=['bucks']), RelationSample(subject='emphasis', object=['accent', 'accentuaion', 'importance', 'stress', 'significance']), RelationSample(subject='father', object=['dad', 'daddy']), RelationSample(subject='flower', object=['blossom', 'bloom']), RelationSample(subject='harbor', object=['seaport', 'haven', 'harbour']), RelationSample(subject='help', object=['aid', 'assist']), RelationSample(subject='hieroglyph', object=['hieroglyphic', 'pictogram']), RelationSample(subject='homogeneous', object=['uniform', 'unvarying']), RelationSample(subject='honest', object=['sincere', 'ingenuous', 'true', 'direct', 'truthful']), RelationSample(subject='identical', object=['same', 'indistinguishable']), RelationSample(subject='incorrect', object=['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false']), RelationSample(subject='intelligent', object=['clever', 'smart']), RelationSample(subject='jewel', object=['gem', 'stone']), RelationSample(subject='lad', object=['chap', 'fellow', 'feller', 'fella', 'gent', 'blighter', 'cuss', 'bloke']), RelationSample(subject='lady', object=['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman']), RelationSample(subject='lazy', object=['indolent', 'faineant', 'otiose', 'slothful', 'work-shy']), RelationSample(subject='list', object=['listing', 'enumeration']), RelationSample(subject='loyal', object=['faithful', 'true', 'dependable', 'devoted', 'reliable']), RelationSample(subject='market', object=['marketplace', 'mart', 'bazaar']), RelationSample(subject='mend', object=['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning']), RelationSample(subject='mesh', object=['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork']), RelationSample(subject='monument', object=['memorial']), RelationSample(subject='mother', object=['mom', 'mommy', 'mum']), RelationSample(subject='murder', object=['slaying', 'slay', 'execution']), RelationSample(subject='new', object=['modern', 'recent']), RelationSample(subject='obsolete', object=['outdated', 'out-of-date', 'superannuated']), RelationSample(subject='organized', object=['arranged', 'configured', 'corporate', 'incorporated', 're-formed', 'reorganized', 'reorganised']), RelationSample(subject='package', object=['parcel', 'pack', 'packet', 'bundle']), RelationSample(subject='phone', object=['telephone', 'cell', 'cellphone', 'smartphone']), RelationSample(subject='portion', object=['part', 'component_part', 'component', 'constituent']), RelationSample(subject='railway', object=['railroad']), RelationSample(subject='rational', object=['logical', 'coherent', 'reasonable', 'sane']), RelationSample(subject='reasonable', object=['sensible']), RelationSample(subject='rock', object=['stone']), RelationSample(subject='shore', object=['coast', 'strand', 'bank', 'beach', '']), RelationSample(subject='snake', object=['serpent', 'ophidian']), RelationSample(subject='sofa', object=['couch', 'lounge']), RelationSample(subject='spouse', object=['partner', 'mate', 'better_half']), RelationSample(subject='style', object=['manner', 'mode', 'fashion', 'way']), RelationSample(subject='sweets', object=['confectionery', 'dessert', 'confection']), RelationSample(subject='villain', object=['scoundrel', 'rascal']), RelationSample(subject='vocabulary', object=['lexicon', 'wordbook', 'dictionary', 'glossary'])], _domain=None, _range=None)
2024-06-13 04:54:47 root INFO     starting operator prediction
2024-06-13 04:54:47 lre.operators WARNING  relation has > 1 prompt_templates, will use first (Another word for {} is )
2024-06-13 04:54:47 root INFO     [order_1_approx] starting weight calculation
2024-06-13 04:58:48 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 04:58:48 root INFO     [order_1_approx] weight calculation finished
2024-06-13 04:58:48 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:02:49 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:02:49 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:02:49 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:06:50 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:06:50 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:06:50 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:10:51 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:10:51 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:10:51 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:14:53 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:14:53 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:14:53 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:18:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:18:54 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:18:54 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:22:56 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:22:56 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:22:57 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:26:58 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:26:58 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:26:58 root INFO     total operator prediction time: 1931.6433084011078 seconds
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' a', ' l'] matches ['aeroplane', 'plane'] is True
2024-06-13 05:27:01 root INFO     [' ', ' in', ' f', ' l', ' fair'] matches ['car', 'automobile', 'motorcar'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' in'] matches ['infant', 'babe'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' in', ' a'] matches ['bike', 'wheel', 'cycle'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' d'] matches ['fabric', 'material', 'textile'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' fair'] matches ['clothing', 'apparel', 'dress'] is False
2024-06-13 05:27:01 root INFO     [' ', ' m', ' f', ' in', ' l'] matches ['baffled', 'befuddled', 'bemused', 'bewildered', 'confounded', 'lost', 'mazed', 'mixed-up'] is True
2024-06-13 05:27:01 root INFO     [' ', ' m', ' f', ' in', ' l'] matches ['accent', 'accentuaion', 'importance', 'stress', 'significance'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' proper', ' in'] matches ['dad', 'daddy'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' v'] matches ['blossom', 'bloom'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' in', ' m'] matches ['seaport', 'haven', 'harbour'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' fair', ' l'] matches ['aid', 'assist'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' in', ' m', ' con'] matches ['hieroglyphic', 'pictogram'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' l', ' m'] matches ['uniform', 'unvarying'] is False
2024-06-13 05:27:01 root INFO     [' ', ' fair', ' frank', ' just', ' honest'] matches ['sincere', 'ingenuous', 'true', 'direct', 'truthful'] is False
2024-06-13 05:27:01 root INFO     [' ', ' l', ' f', ' in', ' fair'] matches ['same', 'indistinguishable'] is True
2024-06-13 05:27:01 root INFO     [' ', ' proper', ' correct', ' in', ' f'] matches ['wrong', 'counterfactual', 'erroneous', 'inaccurate', 'specious', 'unsound', 'untrue', 'false'] is True
2024-06-13 05:27:01 root INFO     [' ', ' intelligent', ' good', ' in', ' m'] matches ['clever', 'smart'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' l', ' d'] matches ['gem', 'stone'] is False
2024-06-13 05:27:01 root INFO     [' ', ' fair', ' f', ' d', ' m'] matches ['madam', 'dame', "ma'am", 'gentlewoman', 'madame', 'woman'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' d', ' l'] matches ['indolent', 'faineant', 'otiose', 'slothful', 'work-shy'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' fair', ' m'] matches ['faithful', 'true', 'dependable', 'devoted', 'reliable'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' l', ' m'] matches ['marketplace', 'mart', 'bazaar'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' in', ' fair', ' m'] matches ['repair', 'fix', 'fixing', 'fixture', 'mending', 'reparation', 'patch', 'darn', 'darning'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' in', ' l'] matches ['gauze', 'netting', 'veiling', 'hairnet', 'reseau', 'net', 'save-all', 'snood', 'sparker', 'tulle', 'wirework', 'grillwork'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' fair', ' in'] matches ['memorial'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' l', ' fair'] matches ['mom', 'mommy', 'mum'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' in'] matches ['modern', 'recent'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' in', ' m', ' l'] matches ['outdated', 'out-of-date', 'superannuated'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' l', ' fair'] matches ['parcel', 'pack', 'packet', 'bundle'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' a'] matches ['telephone', 'cell', 'cellphone', 'smartphone'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' m', ' l'] matches ['part', 'component_part', 'component', 'constituent'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' a', ' d'] matches ['railroad'] is False
2024-06-13 05:27:01 root INFO     [' ', ' logical', ' sound', ' intelligent', ' common'] matches ['logical', 'coherent', 'reasonable', 'sane'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' m', ' in'] matches ['stone'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' fair', ' m'] matches ['coast', 'strand', 'bank', 'beach', ''] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' in', ' m'] matches ['serpent', 'ophidian'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' in', ' l'] matches ['couch', 'lounge'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' fair', ' m', ' p'] matches ['partner', 'mate', 'better_half'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' in', ' m'] matches ['manner', 'mode', 'fashion', 'way'] is True
2024-06-13 05:27:01 root INFO     [' ', ' f', ' l', ' fair', ' m'] matches ['confectionery', 'dessert', 'confection'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' m', ' fair', ' in'] matches ['scoundrel', 'rascal'] is False
2024-06-13 05:27:01 root INFO     [' ', ' f', ' in', ' all', ' l'] matches ['lexicon', 'wordbook', 'dictionary', 'glossary'] is True
2024-06-13 05:27:01 root INFO     synonyms - exact (50) total: defaultdict(<class 'int'>, {True: 649, False: 439})
2024-06-13 05:27:01 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='synonyms - intensity', prompt_templates=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], prompt_templates_zs=['A more intense word for {} is ', 'A more extreme version of {} is ', 'An intensified form of {} is '], samples=[RelationSample(subject='afraid', object=['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky']), RelationSample(subject='angry', object=['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething']), RelationSample(subject='ask', object=['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist']), RelationSample(subject='bad', object=['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable']), RelationSample(subject='boring', object=['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome']), RelationSample(subject='cat', object=['lion', 'tiger', 'leopard', 'panther', 'jaguar']), RelationSample(subject='chuckle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='confused', object=['lost', 'bewildered', 'trapped', 'desperate']), RelationSample(subject='creative', object=['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative']), RelationSample(subject='cry', object=['scream', 'shriek', 'screech', 'screeching']), RelationSample(subject='damp', object=['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet']), RelationSample(subject='dinner', object=['feast', 'banquet', 'fiesta']), RelationSample(subject='dislike', object=['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain']), RelationSample(subject='doze', object=['sleep', 'slumber']), RelationSample(subject='drizzle', object=['rain', 'shower', 'raifall', 'deluge']), RelationSample(subject='excited', object=['agitated', 'nervous']), RelationSample(subject='faith', object=['fanatism', 'fanaticism', 'zealotry']), RelationSample(subject='giggle', object=['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar']), RelationSample(subject='guilty', object=['remorseful', 'sorrowful', 'unworthy']), RelationSample(subject='happy', object=['ecstatic', 'enraptured', 'rapturous', 'rapt', 'rhapsodic']), RelationSample(subject='house', object=['palace', 'castle']), RelationSample(subject='hungry', object=['starving', 'famished', 'peckish', 'ravenous', 'starved']), RelationSample(subject='indulge', object=['pamper', 'spoil', 'coddle']), RelationSample(subject='interesting', object=['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling']), RelationSample(subject='irritate', object=['enrage', 'incense', 'infuriate', 'ire', 'mad', 'madden', 'steam', 'umbrage']), RelationSample(subject='jog', object=['run', 'scarper', 'flee', 'fly']), RelationSample(subject='lake', object=['sea', 'ocean']), RelationSample(subject='like', object=['love', 'care', 'fond', 'crush', 'infatuate']), RelationSample(subject='love', object=['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere']), RelationSample(subject='monkey', object=['gorilla']), RelationSample(subject='nap', object=['sleep', 'slumber']), RelationSample(subject='necessary', object=['essential', 'indispensable', 'vital', 'required']), RelationSample(subject='opposed', object=['averse', 'antipathetic', 'antipathetical', 'indisposed', 'loath', 'loth']), RelationSample(subject='pain', object=['torment', 'torture', 'agony']), RelationSample(subject='pony', object=['horse']), RelationSample(subject='poorly', object=['afflicted', 'sick', 'ill', 'stricken']), RelationSample(subject='rain', object=['deluge', 'shower']), RelationSample(subject='sad', object=['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy']), RelationSample(subject='sea', object=['ocean']), RelationSample(subject='snack', object=['meal', 'eat']), RelationSample(subject='sniffles', object=['pneumonia']), RelationSample(subject='soon', object=['immediately', 'promptly', 'straightaway']), RelationSample(subject='strong', object=['powerful', 'forceful', 'super', 'potent']), RelationSample(subject='tasty', object=['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly']), RelationSample(subject='tired', object=['exhausted', 'drained']), RelationSample(subject='unfortunate', object=['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous']), RelationSample(subject='unhappy', object=['miserable', 'suffering', 'wretched']), RelationSample(subject='want', object=['crave', 'hunger', 'thirst', 'starve', 'lust']), RelationSample(subject='warm', object=['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot']), RelationSample(subject='well', object=['flourishing', 'robust', 'booming', 'prospering', 'prosperous', 'thriving'])], _domain=None, _range=None)
2024-06-13 05:27:03 root INFO     starting operator prediction
2024-06-13 05:27:03 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more intense word for {} is )
2024-06-13 05:27:03 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:31:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:31:06 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:31:06 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:35:08 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:35:08 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:35:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:39:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:39:10 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:39:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:43:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:43:11 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:43:11 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:47:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:47:12 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:47:12 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:51:13 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:51:13 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:51:13 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:55:13 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:55:13 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:55:13 root INFO     [order_1_approx] starting weight calculation
2024-06-13 05:59:14 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 05:59:14 root INFO     [order_1_approx] weight calculation finished
2024-06-13 05:59:14 root INFO     total operator prediction time: 1930.875058889389 seconds
2024-06-13 05:59:17 root INFO     [' d', ' ', ' de', ' un', ' a'] matches ['terrified', 'horrified', 'scared', 'stiff', 'petrified', 'fearful', 'panicky'] is False
2024-06-13 05:59:17 root INFO     [' d', ' m', ' ', ' gr', ' s'] matches ['furious', 'enraged', 'outraged', 'aggrivated', 'irate', 'seething'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' to'] matches ['beg', 'implore', 'pray', 'entreat', 'supplicate', 'insist'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' un', ' bad'] matches ['awful', 'atrocious', 'abominable', 'dreadful', 'painful', 'terrible', 'unspeakable'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' un', ' dull', ' de'] matches ['tedious', 'deadening', 'dull', 'ho-hum', 'irksome', 'tiresome', 'wearisome'] is True
2024-06-13 05:59:17 root INFO     [' d', ' a', ' ', ' de', ' m'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is False
2024-06-13 05:59:17 root INFO     [' d', ' m', ' de', ' ', ' be'] matches ['lost', 'bewildered', 'trapped', 'desperate'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' m'] matches ['ingenious', 'inventive', 'demiurgic', 'deviceful', 'innovational', 'innovative', 'innovatory', 'original', 'originative'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' m'] matches ['scream', 'shriek', 'screech', 'screeching'] is False
2024-06-13 05:59:17 root INFO     [' d', ' de', ' ', ' s', ' m'] matches ['drenched', 'dripping', 'saturated', 'soaked', 'soaking', 'sodden', 'sopping', 'soppy', 'soused', 'wringing-wet'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' rep'] matches ['feast', 'banquet', 'fiesta'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' un', ' lo', ' a'] matches ['hate', 'abhor', 'detest', 'loathe', 'abominate', 'execrate', 'contemn', 'despise', 'scorn', 'disdain'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' de', ' a', ' m'] matches ['sleep', 'slumber'] is False
2024-06-13 05:59:17 root INFO     [' d', ' de', ' ', ' a', ' m'] matches ['rain', 'shower', 'raifall', 'deluge'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' de', ' m', ' a'] matches ['laugh', 'guffaw', 'chortle', 'guffaw', 'snicker', 'snigger', 'titter', 'roar'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' s'] matches ['remorseful', 'sorrowful', 'unworthy'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' rep', ' un'] matches ['palace', 'castle'] is False
2024-06-13 05:59:17 root INFO     [' d', ' de', ' ', ' s', ' un'] matches ['starving', 'famished', 'peckish', 'ravenous', 'starved'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' rep', ' de', ' a'] matches ['pamper', 'spoil', 'coddle'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' de', ' a', ' un'] matches ['exciting', 'exhilarant', 'exhilarating', 'exhilarative', 'eye-popping', 'inspiring', 'intoxicating', 'rousing', 'stimulating', 'stirring', 'arresting', 'interesting', 'intriguing', 'moving', 'provocative', 'heady', 'thrilling'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' m'] matches ['run', 'scarper', 'flee', 'fly'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' de', ' a', ' l'] matches ['sea', 'ocean'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' un'] matches ['love', 'care', 'fond', 'crush', 'infatuate'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' rep'] matches ['adore', 'fetishize', 'idolize', 'idolise', 'worship', 'hero-worship', 'revere'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' m', ' de'] matches ['gorilla'] is False
2024-06-13 05:59:17 root INFO     [' d', ' a', ' ', ' de', ' s'] matches ['sleep', 'slumber'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' rep'] matches ['essential', 'indispensable', 'vital', 'required'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' m', ' s'] matches ['torment', 'torture', 'agony'] is True
2024-06-13 05:59:17 root INFO     [' d', ' a', ' ', ' de', ' m'] matches ['horse'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' un', ' a', ' de'] matches ['afflicted', 'sick', 'ill', 'stricken'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' m'] matches ['deluge', 'shower'] is True
2024-06-13 05:59:17 root INFO     [' d', ' s', ' de', ' miserable', ' '] matches ['desparate', 'despondent', 'despairing', 'desponding', 'forlorn', 'hopeless', 'melancholy'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' un'] matches ['ocean'] is False
2024-06-13 05:59:17 root INFO     [' d', ' a', ' ', ' de', ' s'] matches ['meal', 'eat'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' s'] matches ['powerful', 'forceful', 'super', 'potent'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' un'] matches ['delicious', 'delectable', 'luscious', 'pleasant-tasting', 'scrumptious', 'toothsome', 'yummy', 'mouth-watering', 'ambrosial', 'heavenly'] is True
2024-06-13 05:59:17 root INFO     [' d', ' de', ' weary', ' ', ' bored'] matches ['exhausted', 'drained'] is True
2024-06-13 05:59:17 root INFO     [' d', ' a', ' un', ' ', ' de'] matches ['tragic', 'woeful', 'grievous', 'wretched', 'miserable', 'awful', 'lamentable', 'regrettable', 'desperate', 'hopeless', 'disastrous'] is True
2024-06-13 05:59:17 root INFO     [' d', ' unhappy', ' un', ' miserable', ' '] matches ['miserable', 'suffering', 'wretched'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' de', ' be'] matches ['crave', 'hunger', 'thirst', 'starve', 'lust'] is False
2024-06-13 05:59:17 root INFO     [' d', ' ', ' l', ' s', ' de'] matches ['hot', 'fiery', 'flaming', 'heated', 'red-hot', 'sizzling', 'sensual', 'sultry', 'torrid', 'white-hot'] is True
2024-06-13 05:59:17 root INFO     [' d', ' ', ' a', ' un', ' de'] matches ['flourishing', 'robust', 'booming', 'prospering', 'prosperous', 'thriving'] is False
2024-06-13 05:59:17 root INFO     synonyms - intensity (50) total: defaultdict(<class 'int'>, {True: 672, False: 458})
2024-06-13 05:59:17 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='hypernyms - misc', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='armchair', object=['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='blender', object=['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='bracelet', object=['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='brooch', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', '']), RelationSample(subject='cake', object=['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity']), RelationSample(subject='computer', object=['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', '']), RelationSample(subject='croissant', object=['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity']), RelationSample(subject='cup', object=['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container']), RelationSample(subject='denim', object=['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='deodorant', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='desk', object=['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='diary', object=['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dishwasher', object=['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='dress', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='fridge', object=['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='gasoline', object=['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity']), RelationSample(subject='grapefruit', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='hairnet', object=['net', 'network', 'mesh', 'meshing', 'meshwork', 'fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hairpin', object=['pin', 'fastener', 'fastening', 'holdfast', 'fixing', 'restraint', 'constraint', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='hamburger', object=['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='jacket', object=['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='jeans', object=['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='juicer', object=['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='lemon', object=['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='lotion', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='mascara', object=['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='necklace', object=['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notebook', object=['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='notepad', object=['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity']), RelationSample(subject='pastry', object=['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity']), RelationSample(subject='peach', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='perfume', object=['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='photo', object=['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='pie', object=['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='plum', object=['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object']), RelationSample(subject='postcard', object=['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity']), RelationSample(subject='shelf', object=['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='shirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sidewalk', object=['walk', 'walkway', 'paseo', 'path', 'way', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='skirt', object=['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='sofa', object=['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='stapler', object=['device', 'machine', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sunscreen', object=['cream', 'lotion', 'ointment', 'emollient', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='sweater', object=['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', '']), RelationSample(subject='toaster', object=['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='toothbrush', object=['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tub', object=['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='tv', object=['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='vase', object=['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity']), RelationSample(subject='wristband', object=['band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'])], _domain=None, _range=None)
2024-06-13 05:59:19 root INFO     starting operator prediction
2024-06-13 05:59:19 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-13 05:59:19 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:03:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:03:21 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:03:22 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:07:22 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:07:22 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:07:22 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:11:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:11:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:11:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:15:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:15:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:15:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:19:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:19:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:19:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:23:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:23:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:23:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:27:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:27:24 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:27:24 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:31:24 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:31:24 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:31:24 root INFO     total operator prediction time: 1925.162133693695 seconds
2024-06-13 06:31:27 root INFO     [' furniture', ' home', ' appliance', ' household', ' furn'] matches ['chair', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' device', ' equipment', ' kitchen', ' household'] matches ['appliance', 'mixer', 'kitchen_utensil', 'utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' accessory', ' item', ' equipment', ' decoration', ' accessories'] matches ['jewelry', 'band', 'strip', 'slip', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' decoration', ' accessory', ' household', ' appliance', ' item'] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', ''] is True
2024-06-13 06:31:27 root INFO     [' home', ' food', ' household', ' the', '\n'] matches ['dessert', 'baked_goods', 'food', 'solid_food', 'course', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' device', ' equipment', ' gadget', ' furniture'] matches ['device', 'machine', 'gadget', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'expert', 'person', 'individual', 'someone', 'somebody', 'mortal', 'soul', 'causal_agent', 'cause', 'causal_agency', 'organism', 'being', 'physical_entity', 'living_thing', 'animate_thing', 'entity', 'unit', 'object', 'physical_object', ''] is True
2024-06-13 06:31:27 root INFO     [' appliance', '\n', ' food', ' furniture', ' the'] matches ['pastry', 'bun', 'roll', 'bread', 'breadstuff', 'staff_of_life', 'baked_goods', 'starches', 'food', 'solid_food', 'foodstuff', 'food_product', 'solid', 'food', 'nutrient', 'matter', 'substance', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' item', ' household', ' furniture', ' appliance', ' ut'] matches ['tableware', 'crockery', 'dishware', 'ware', 'article', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'container'] is False
2024-06-13 06:31:27 root INFO     [' the', ' a', ' furniture', ' clothing', ' home'] matches ['fabric', 'cloth', 'material', 'textile', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' household', ' equipment', ' home', ' item'] matches ['toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-13 06:31:27 root INFO     [' furniture', ' home', ' appliance', ' equipment', ' office'] matches ['furniture', 'table', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' home', ' appliance', '\n', ' equipment', ' furniture'] matches ['journal', 'writing', 'written_material', 'piece_of_writing', 'written_communication', 'written_language', 'black_and_white', 'communication', 'abstraction', 'abstract_entity', 'entity', 'journal', 'book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-13 06:31:27 root INFO     [' appliance', ' household', ' home', ' kitchen', ' equipment'] matches ['appliance', 'machine', 'entity', 'unit', 'object', 'physical_object', 'white_goods', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' furniture', ' home', ' the', ' item', ' clothing'] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' household', ' kitchen', ' home', ' furniture'] matches ['appliance', 'icebox', 'white_goods', 'home_appliance', 'household_appliance', 'appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' home', ' household', ' the', ' equipment'] matches ['fuel', 'hydrocarbon', 'substance', 'organic_compound', 'matter', 'compound', 'chemical_compound', 'physical_entity', 'chemical', 'chemical_substance', 'entity', 'material', 'stuff', 'substance', 'part', 'portion', 'component_part', 'component', 'constituent', 'relation', 'abstraction', 'abstract_entity'] is False
2024-06-13 06:31:27 root INFO     [' appliance', '\n', ' the', ' furniture', ' item'] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-13 06:31:27 root INFO     [' appliance', ' food', ' the', ' a', ' equipment'] matches ['sandwich', 'snack_food', 'dish', 'nutriment', 'nourishment', 'nutrition', 'sustenance', 'aliment', 'alimentation', 'victuals', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'beef', 'boeuf', 'meat', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' furniture', ' home', ' item', ' the', ' a'] matches ['clothes', 'coat', 'overgarment', 'outer_garment', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-13 06:31:27 root INFO     [' the', ' a', ' home', ' furniture', ' clothing'] matches ['trousers', 'pants', 'workwear', 'garment', 'clothing', 'clothes', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' equipment', ' kitchen', ' device', ' home'] matches ['utensil', 'physical_entity', 'entity', 'unit', 'object', 'physical_object', 'squeezer', 'kitchen_utensil', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' a', ' the', '\n', ' home'] matches ['citrus', 'citrus_fruit', 'citrous_fruit', 'fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-13 06:31:27 root INFO     [' household', ' personal', ' the', ' a', ' home'] matches ['makeup', 'make-up', 'war_paint', 'cosmetic', 'toiletry', 'toilet_articles', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' accessory', ' decoration', ' item', ' home', ' household'] matches ['jewelry', 'jewellery', 'adornment', 'decoration', 'ornament', 'ornamentation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' equipment', ' appliance', ' furniture', ' device', ' home'] matches ['book', 'volume', 'product', 'production', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'portable_computer', 'personal_computer', 'pc', 'microcomputer', 'digital_computer', 'computer', 'computing_machine', 'computing_device', 'data_processor', 'electronic_computer', 'information_processing_system', 'machine', 'device', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' equipment', ' furniture', ' home', ' device'] matches ['pad', 'pad_of_paper', 'tablet', 'paper', 'material', 'stuff', 'substance', 'matter', 'part', 'portion', 'component_part', 'component', 'constituent', 'physical_entity', 'relation', 'entity', 'abstraction', 'abstract_entity'] is False
2024-06-13 06:31:27 root INFO     [' home', ' food', ' kitchen', ' the', '\n'] matches ['food', 'dough', 'concoction', 'mixture', 'intermixture', 'foodstuff', 'food_product', 'food', 'nutrient', 'substance', 'matter', 'physical_entity', 'entity', 'baked_goods', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     ['\n', ' the', ' a', ' home', ' furniture'] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-13 06:31:27 root INFO     [' art', ' the', ' decoration', '\n', ' home'] matches ['picture', 'image', 'representation', 'creation', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' food', ' kitchen', ' home', ' the', '\n'] matches ['pastry', 'baked_goods', 'food', 'solid_food', 'solid', 'matter', 'physical_entity', 'entity', 'indo-european', 'indo-european_language', 'indo-hittite', 'natural_language', 'tongue', 'language', 'linguistic_communication', 'communication', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' the', ' a', '\n', ' home', ' furniture'] matches ['fruit', 'drupe', 'stone_fruit', 'edible_fruit', 'fruit', 'produce', 'green_goods', 'green_groceries', 'garden_truck', 'food', 'matter', 'natural_object', 'physical_entity', 'unit', 'entity', 'object', 'physical_object'] is False
2024-06-13 06:31:27 root INFO     [' home', ' decoration', '\n', ' household', ' a'] matches ['card', 'correspondence', 'first_class', '1st_class', 'first-class_mail', '1st-class_mail', 'written_communication', 'written_language', 'black_and_white', 'mail', 'communication', 'message', 'abstraction', 'abstract_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' furniture', ' household', ' home', ' appliance', ' equipment'] matches ['furniture', 'support', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' the', ' furniture', ' home', ' appliance', ' household'] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is False
2024-06-13 06:31:27 root INFO     [' home', ' furniture', ' clothing', ' a', ' the'] matches ['clothes', 'garment', 'clothing', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is True
2024-06-13 06:31:27 root INFO     [' furniture', ' home', ' household', ' appliance', ' furn'] matches ['furniture', 'seat', 'piece_of_furniture', 'article_of_furniture', 'furnishing', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' home', ' furniture', ' household', ' item', '\n'] matches ['clothes', 'garment', 'clothing', 'article_of_clothing', 'vesture', 'wear', 'wearable', 'habiliment', 'consumer_goods', 'covering', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', ''] is False
2024-06-13 06:31:27 root INFO     [' appliance', ' household', ' kitchen', ' home', ' equipment'] matches ['appliance', 'entity', 'unit', 'object', 'physical_object', 'kitchen_appliance', 'home_appliance', 'household_appliance', 'durables', 'durable_goods', 'consumer_durables', 'consumer_goods', 'commodity', 'trade_good', 'good', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' appliance', ' household', ' home', ' equipment', ' device'] matches ['brush', 'toiletry', 'toilet_articles', 'implement', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'mustache', 'moustache', 'facial_hair', 'hair', 'body_covering', 'covering', 'natural_covering', 'cover', 'natural_object', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-13 06:31:27 root INFO     [' home', ' furniture', ' household', ' appliance', ' kitchen'] matches ['container', 'vessel', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-13 06:31:27 root INFO     [' appliance', ' furniture', ' device', ' home', ' equipment'] matches ['device', 'machine', 'receiver', 'receiving_system', 'set', 'electronic_equipment', 'equipment', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity', 'broadcasting', 'telecommunication', 'telecom', 'medium', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is True
2024-06-13 06:31:27 root INFO     [' household', ' home', ' decoration', ' item', ' furniture'] matches ['jar', 'vessel', 'container', 'artifact', 'artefact', 'unit', 'object', 'physical_object', 'physical_entity', 'entity'] is False
2024-06-13 06:31:27 root INFO     hypernyms - misc (50) total: defaultdict(<class 'int'>, {True: 700, False: 472})
2024-06-13 06:31:27 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='hyponyms - misc', prompt_templates=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], prompt_templates_zs=['A more specific term for a {} is', 'A narrower term for a {} is', 'An example of a {} is'], samples=[RelationSample(subject='backpack', object=['daypack', 'kitbag', 'kit_bag']), RelationSample(subject='bag', object=['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag']), RelationSample(subject='bed', object=['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble']), RelationSample(subject='boat', object=['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat']), RelationSample(subject='book', object=['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook']), RelationSample(subject='brush', object=['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush']), RelationSample(subject='burger', object=['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger']), RelationSample(subject='camera', object=['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera']), RelationSample(subject='candy', object=['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg']), RelationSample(subject='car', object=['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand']), RelationSample(subject='church', object=['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk']), RelationSample(subject='citrus', object=['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu']), RelationSample(subject='cloud', object=['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke']), RelationSample(subject='collar', object=['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece']), RelationSample(subject='color', object=['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown']), RelationSample(subject='computer', object=['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad']), RelationSample(subject='container', object=['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag']), RelationSample(subject='cookware', object=['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner']), RelationSample(subject='cup', object=['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail']), RelationSample(subject='cushion', object=['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat']), RelationSample(subject='cutlery', object=['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork']), RelationSample(subject='dessert', object=['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice']), RelationSample(subject='dress', object=['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress']), RelationSample(subject='drum', object=['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka']), RelationSample(subject='emotion', object=['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy']), RelationSample(subject='flask', object=['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask']), RelationSample(subject='guitar', object=['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke']), RelationSample(subject='gun', object=['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling']), RelationSample(subject='jewel', object=['diamond', 'ruby', 'pearl', 'emerald', 'sapphire']), RelationSample(subject='jewelry', object=['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst']), RelationSample(subject='mixer', object=['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk']), RelationSample(subject='month', object=['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']), RelationSample(subject='oven', object=['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor']), RelationSample(subject='painting', object=['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti']), RelationSample(subject='poem', object=['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle']), RelationSample(subject='railway', object=['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail']), RelationSample(subject='season', object=['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek']), RelationSample(subject='seat', object=['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet']), RelationSample(subject='shelf', object=['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm']), RelationSample(subject='shirt', object=['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt']), RelationSample(subject='shoes', object=['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled']), RelationSample(subject='sofa', object=['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab']), RelationSample(subject='song', object=['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song']), RelationSample(subject='spice', object=['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed']), RelationSample(subject='sweater', object=['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck']), RelationSample(subject='tool', object=['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage']), RelationSample(subject='toy', object=['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo']), RelationSample(subject='trousers', object=['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen']), RelationSample(subject='weapon', object=['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire']), RelationSample(subject='weekday', object=['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'])], _domain=None, _range=None)
2024-06-13 06:31:29 root INFO     starting operator prediction
2024-06-13 06:31:29 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A more specific term for a {} is)
2024-06-13 06:31:29 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:35:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:35:28 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:35:28 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:39:25 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:39:25 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:39:25 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:43:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:43:21 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:43:22 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:47:19 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:47:19 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:47:20 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:51:14 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:51:14 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:51:14 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:55:14 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:55:14 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:55:14 root INFO     [order_1_approx] starting weight calculation
2024-06-13 06:59:08 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 06:59:08 root INFO     [order_1_approx] weight calculation finished
2024-06-13 06:59:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:03:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:03:06 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:03:06 root INFO     total operator prediction time: 1896.914092540741 seconds
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' l', ' an'] matches ['daypack', 'kitbag', 'kit_bag'] is False
2024-06-13 07:03:08 root INFO     [' a', ' t', ' l', ' p', ' an'] matches ['pouch', 'backpack', 'knapsack', 'packsack', 'rucksack', 'haversack', 'beanbag', 'bladder', 'pouch', 'carryall', 'holdall', 'tote', 'tote', 'drawstring', 'dust', 'vacuum', 'envelope', 'gasbag', 'gamebag', 'golf', 'gunnysack', 'gunny', 'burlap', 'ice', 'mailbag', 'postbag', 'nosebag', 'feedbag', 'pannier', 'plastic', 'purse', 'ragbag', 'rosin', 'sachet', 'sack', 'poke', 'paper', 'carrier', 'saddlebag', 'sandbag', 'schoolbag', 'shopping', 'sick_bag', 'sickbag', 'skin', 'sleeping', 'sweat', 'tea', 'toilet', 'sponge', 'tool', 'tucker-bag'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' c', ' j', ' p'] matches ['bunk', 'berth', 'built', 'built-in', 'bunk', 'cot', 'camp', 'couch', 'deathbed', 'double', 'four-poster', 'hammock', 'sack', 'marriage_bed', 'murphy', 'plank-bed', 'platform', 'sickbed', 'single_bed', 'sleigh', 'trundle', 'truckle', 'truckle', 'twin', 'water', 'semi-double', 'semidouble'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' car', ' j', ' p'] matches ['ferry', 'ark', 'barge', 'flatboat', 'hoy', 'lighter', 'bumboat', 'canal_boat', 'narrow_boat', 'narrowboat', 'ferryboat', 'fireboat', 'gondola', 'guard_boat', 'gunboat', 'junk', 'longboat', 'lugger', 'mackinaw', 'mackinaw', 'mailboat', 'mail', 'packet', 'packet', 'motorboat', 'powerboat', 'pilot', 'police', 'punt', 'river_boat', 'scow', 'sea_boat', 'small_boat', 'steamboat', 'surfboat', 'tender_boat', 'pinnace', 'cutter_boat', 'tugboat', 'tug', 'towboat', 'tower_boat', 'motorboat', 'yacht', 'sail', 'row', 'canoe', 'kayak', 'paddle', 'paddle_boat'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' the', ' ch'] matches ['paperback', 'album', 'folio', 'hardback', 'hardcover', 'journal', 'novel', 'order', 'paper-back', 'softback', 'soft-cover', 'picture', 'sketchbook', 'sketch', 'notebook'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' p', ' ch', ' be'] matches ['toothbrush', 'bottlebrush', 'bristle', 'clothesbrush', 'hairbrush', 'nailbrush', 'paintbrush', 'sable', 'scrub', 'scrubbing', 'scrubber', 'shaving_brush'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' p', ' an', ' coffee'] matches ['hamburger', 'cheeseburger', '50', '50_burger', 'angus_burger', 'banquet_burger', 'barbecue_burger', 'bøfsandwich', 'utter_burge', 'buffalo_burger', 'california_burger', 'chili_burger', 'curry_burger', 'hamdog', 'salmon_burger', 'rice_burger', 'veggie_burger'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' l', ' the'] matches ['camcorder', 'box_camera', 'box_kodak', 'candid_camera', 'digital_camera', 'flash_camera', 'motion-picture_camera', 'movie_camera', 'cine-camera', 'point-and-shoot_camera', 'point-and-shoot', 'polaroid_camera', 'polaroid_land_camera', 'polaroid', 'portrait_camera', 'reflex_camera', 'webcam', 'webcamera', 'sound_camera'] is False
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' chocolate', ' ch'] matches ['lollipop', 'candy_bar', 'carob_bar', 'hard_candy', 'brandyball', 'patty', 'bonbon', 'brittle', 'toffee', 'toffy', 'butterscotch', 'candy_cane', 'candy_corn', 'caramel', 'cotton_candy', 'spun_sugar', 'candyfloss', 'dragee', 'fondant', 'fudge', 'gumdrop', 'honey_crisp', 'mint', 'mint_candy', 'horehound', 'jelly_bean', 'jelly_egg', 'kiss', 'candy_kiss', 'licorice', 'liquorice', 'life_saver', 'sucker', 'all-day_sucker', 'lozenge', 'marshmallow', 'marzipan', 'marchpane', 'nougat', 'nougat_bar', 'nut_bar', 'peanut_bar', 'popcorn_ball', 'praline', 'rock_candy', 'rock', 'sugar_candy', 'sugarplum', 'taffy', 'truffle', 'chocolate_truffle', 'turkish_delight', 'easter_egg'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' car', ' an', ' l'] matches ['limousine', 'convertible', 'ambulance', 'beach', 'wagon', 'station', 'estate', 'waggon', 'bus', 'jalopy', 'heap', 'cab', 'hack', 'taxi', 'taxicab', 'compact', 'coupe', 'cruiser', 'police', 'patrol', 'prowl', 'squad', 'electric', 'hardtop', 'hatchback', 'hot-rod', 'jeep', 'landrover', 'limo', 'loaner', 'minicar', 'minivan', 'model', 'pace', 'racer', 'race', 'racing', 'roadster', 'runabout', 'two-seater', 'sedan', 'saloon', 'sports', 'sport', 'sport', 'suv', 'stanley', 'steamer', 'stock', 'subcompact', 'touring', 'tourer', 'used', 'secondhand'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' ch'] matches ['chapel', 'abbey', 'basilica', 'cathedral', 'duomo', 'kirk'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' coffee', ' orange'] matches ['lemon', 'orange', 'lime', 'mandarin', 'tangerine', 'yuzu'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' p', ' an', ' l'] matches ['thundercloud', 'cirrocumulus', 'cirrocumulus', 'cirrostratus', 'cirrus', 'contrail', 'condensation', 'trail', 'cumulonimbus', 'cumulonimbus', 'cumulus', 'nacreous', 'nebule', 'nimbus', 'rain', 'storm', 'stratus', 'mushroom', 'smoke'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' an', ' l'] matches ['choker', 'ruff', 'ruffle', 'clerical', 'roman_collar', 'dog_collar', 'eton_collar', 'rabato_collar', 'rebato_collar', 'turtleneck', 'polo-neck', 'neckpiece'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' the'] matches ['white', 'black', 'blue', 'green', 'red', 'yello', 'orange', 'vermilion', 'amber', 'chartreuse', 'teal', 'violet', 'magenta', 'rose', 'azure', 'cyan', 'indigo', 'purple', 'brown'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' coffee', ' ch'] matches ['laptop', 'desktop', 'tablet', 'smartphone', 'supercomputer', 'iphone', 'ipad'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' l', ' p', ' an'] matches ['bag', 'handbag', 'pocketbook', 'purse', 'basket', 'handbasket', 'bin', 'bowl', 'pipe', 'bowl', 'box', 'bread-bin', 'breadbox', 'bunker', 'can', 'tin', 'canister', 'cannister', 'capsule', 'cargo', 'case', 'display', 'showcase', 'vitrine', 'cassette', 'cup', 'cylinder', 'dice', 'cup', 'box', 'dish', 'dispenser', 'drawer', 'dumpster', 'empty', 'envelope', 'glass', 'bag', 'bottle', 'mailer', 'manger', 'trough', 'measure', 'mold', 'mould', 'cast', 'package', 'parcel', 'pan', 'pod', 'pot', 'flowerpot', 'flask', 'receptacle', 'reliquary', 'saltcellar', 'savings', 'bank', 'coin', 'money', 'bank', 'scuttle', 'coal', 'scuttle', 'shaker', 'spoon', 'thimble', 'capsule', 'vessel', 'basket', 'bin', 'waste-paper', 'wastebasket', 'waste', 'file', 'can', 'pot', 'workbasket', 'workbox', 'workbag'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' c', ' ch', ' w'] matches ['pot', 'baster', 'chafing', 'dish', 'cooker', 'sheet', 'tray', 'enamelware', 'grid', 'gridiron', 'griddle', 'pan', 'poacher', 'skimmer', 'steamer', 'turner'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' coffee', ' an', ' ch'] matches ['teacup', 'beaker', 'chalice', 'goblet', 'coffee_cup', 'dixie', 'paper_cup', 'grace', 'kylix', 'cylix', 'mustache_cup', 'moustache_cup', 'scyphus', 'grail'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' p', ' an'] matches ['pincushion', 'pillow', 'air', 'inflatable', 'gaddi', 'hassock', 'headrest', 'pillow', 'seat'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' coffee', ' ch', ' m'] matches ['knife', 'fork', 'spoon', 'tablefork', 'teaspoon', 'dessert_spoon', 'salad_fork', 'carving_fork'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' coffee', ' ch', ' chocolate'] matches ['cake', 'ambrosia', 'baked_alaska', 'blancmange', 'charlotte', 'compote', 'fruit_compote', 'dumpling', 'flan', 'frozen_dessert', 'junket', 'mold', 'mould', 'mousse', 'pavlova', 'peach_melba', 'pudding', 'pud', 'pudding', 'syllabub', 'sillabub', 'tiramisu', 'whip', 'zabaglione', 'sabayon', 'charlotte_russe', 'apple_dumpling', 'frozen_custard', 'soft_ice_cream', 'frozen_pudding', 'frozen_yogurt', 'ice-cream_cake', 'icebox_cake', 'ice-cream_cone', 'ice-cream_sundae', 'sundae', 'ice', 'frappe', 'ice_cream', 'icecream', 'ice_lolly', 'lolly', 'lollipop', 'popsicle', 'ice_milk', 'parfait', 'sherbert', 'sherbet', 'snowball', 'snowball', 'split', 'chocolate_mousse', 'trifle', 'brown_betty', 'chocolate_pudding', 'duff', 'plum_duff', 'flummery', 'nesselrode', 'nesselrode_pudding', 'pease_pudding', 'plum_pudding', 'christmas_pudding', 'roly-poly', 'roly-poly_pudding', 'steamed_pudding', 'suet_pudding', 'tapioca_pudding', 'vanilla_pudding', 'prune_whip', 'water_ice', 'sorbet', 'chocolate_ice_cream', 'neapolitan_ice_cream', 'peach_ice_cream', 'strawberry_ice_cream', 'tutti-frutti', 'vanilla_ice_cream', 'banana_split', 'tipsy_cake', 'spotted_dick', 'choc-ice'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' p', ' l'] matches ['gown', 'caftan', 'kaftan', 'chemise', 'sack', 'shift', 'coatdress', 'cocktail_dress', 'sheath', 'dirndl', 'gown', 'jumper', 'pinafore', 'pinny', 'kirtle', 'morning', 'evening', 'muumuu', 'polonaise', 'sari', 'saree', 'shirtdress', 'strapless', 'sundress'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' be'] matches ['tambourine', 'bass_drum', 'gran_casa', 'bongo', 'bongo_drum', 'snare_drum', 'snare', 'side_drum', 'tabor', 'tabour', 'tambour', 'tenor_drum', 'tom-tom', 'timbrel', 'djembe', 'doumbek', 'darbuka'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' the'] matches ['anger', 'choler', 'ire', 'anxiety', 'conditioned_emotional_response', 'cer', 'conditioned_emotion', 'emotional_state', 'spirit', 'fear', 'fearfulness', 'fright', 'fear', 'reverence', 'awe', 'veneration', 'hate', 'hatred', 'joy', 'joyousness', 'joyfulness', 'love', 'annoyance', 'chafe', 'vexation', 'bad_temper', 'ill_temper', 'dander', 'hackles', 'fury', 'rage', 'madness', 'huffiness', 'indignation', 'outrage', 'infuriation', 'enragement', 'umbrage', 'offense', 'offence', 'angst', 'anxiousness', 'disquiet', 'concern', 'care', 'fear', 'discomfiture', 'discomposure', 'disconcertion', 'disconcertment', 'edginess', 'uneasiness', 'inquietude', 'disquietude', 'insecurity', 'jitteriness', 'jumpiness', 'nervousness', 'restiveness', 'scruple', 'qualm', 'misgiving', 'sinking', 'sinking_feeling', 'worry', 'trouble', 'ecstasy', 'rapture', 'transport', 'exaltation', 'raptus', 'embarrassment', 'gratification', 'satisfaction', 'happiness', 'felicity', 'state', 'unhappiness', 'alarm', 'dismay', 'consternation', 'apprehension', 'apprehensiveness', 'dread', 'creeps', 'frisson', 'shiver', 'chill', 'quiver', 'shudder', 'thrill', 'tingle', 'horror', 'hysteria', 'intimidation', 'panic', 'terror', 'affright', 'scare', 'panic_attack', 'stage_fright', 'timidity', 'timidness', 'timorousness', 'abhorrence', 'abomination', 'detestation', 'execration', 'loathing', 'odium', 'despisal', 'despising', 'hostility', 'enmity', 'ill_will', 'malevolence', 'malignity', 'misanthropy', 'misogamy', 'misogyny', 'misogynism', 'misology', 'misoneism', 'misopedia', 'murderousness', 'elation', 'high_spirits', 'lightness', 'exhilaration', 'excitement', 'exuberance', 'exultation', 'jubilance', 'jubilancy', 'jubilation', 'agape', 'agape', 'agape_love', 'amorousness', 'enamoredness', 'ardor', 'ardour', 'benevolence', 'devotion', 'devotedness', 'filial_love', 'heartstrings', 'lovingness', 'caring', 'loyalty', 'puppy_love', 'calf_love', 'crush', 'infatuation', 'worship', 'adoration', 'aggravation', 'exasperation', 'displeasure', 'frustration', 'harassment', 'torment', 'pique', 'temper', 'irritation', 'fit', 'tantrum', 'scene', 'conniption', 'irascibility', 'short_temper', 'spleen', 'quick_temper', 'lividity', 'wrath', 'dudgeon', 'high_dudgeon', 'willies', 'comfort', 'quality_of_life', 'blessedness', 'beatitude', 'beatification', 'radiance', 'embitterment', 'sadness', 'sorrow', 'sorrowfulness', 'chill', 'pall', 'foreboding', 'premonition', 'presentiment', 'boding', 'gloom', 'gloominess', 'somberness', 'sombreness', 'suspense', 'trepidation', 'swivet', 'cold_feet', 'diffidence', 'self-doubt', 'self-distrust', 'shyness', 'aggression', 'aggressiveness', 'animosity', 'animus', 'bad_blood', 'antagonism', 'belligerence', 'belligerency', 'class_feeling', 'resentment', 'bitterness', 'gall', 'rancor', 'rancour', 'maleficence', 'malice', 'maliciousness', 'spite', 'spitefulness', 'venom', 'vindictiveness', 'vengefulness', 'misocainea', 'euphoria', 'euphory', 'bang', 'boot', 'charge', 'rush', 'flush', 'thrill', 'kick', 'intoxication', 'titillation', 'triumph', 'beneficence', 'warmheartedness', 'warmth', 'nirvana', 'enlightenment', 'mourning', 'bereavement', 'poignance', 'poignancy', 'presage', 'shadow', 'hesitance', 'hesitancy', 'unassertiveness', 'warpath', 'envy', 'enviousness', 'grudge', 'score', 'grievance', 'heartburning', 'sulkiness', 'huffishness', 'covetousness', 'jealousy', 'green-eyed_monster', 'penis_envy'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' coffee', ' l'] matches ['thermos', 'ampulla', 'canteen', 'erlenmeyer_flask', 'hipflask', 'pocket_flask', 'round-bottom_flask', 'vacuum_flask', 'vacuum_bottle', 'dewar_flask', 'dewar', 'thermos_bottle', 'thermos_flask'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' the', ' l'] matches ['ukulele', 'bass', 'bass_guitar', 'acoustic_guitar', 'cittern', 'cithern', 'cither', 'citole', 'gittern', 'electric_guitar', 'hawaiian', 'steel', 'uke'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' l', ' p'] matches ['rifle', 'air', 'airgun', 'antiaircraft', 'flak', 'flack', 'pom-pom', 'ack-ack', 'breechloader', 'cannon', 'firearm', 'piece', 'small-arm', 'gas', 'minute', 'quaker', 'set', 'spring', 'whaling'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' an', ' the'] matches ['diamond', 'ruby', 'pearl', 'emerald', 'sapphire'] is False
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' an', ' p'] matches ['bracelet', 'bead', 'bijou', 'bling', 'bling_bling', 'bangle', 'clip', 'cufflink', 'earring', 'jewel', 'gem', 'precious_stone', 'necklace', 'pin', 'ring', 'band', 'tie_clip', 'bugle', 'anklet', 'ankle_bracelet', 'armilla', 'pendant_earring', 'drop_earring', 'eardrop', 'crown_jewel', 'diamond', 'emerald', 'pearl', 'ruby', 'sapphire', 'solitaire', 'chain', 'chain', 'string', 'strand', 'choker', 'collar', 'dog_collar', 'neckband', 'brooch', 'broach', 'breastpin', 'scatter_pin', 'stickpin', 'tie_tack', 'tiepin', 'scarfpin', 'annulet', 'engagement_ring', 'mourning_ring', 'ringlet', 'signet_ring', 'seal_ring', 'wedding_ring', 'wedding_band', 'ice', 'sparkler', 'seed_pearl', 'sunburst'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' ch', ' coffee'] matches ['blender', 'liquidizer', 'liquidiser', 'eggbeater', 'eggwhisk', 'electric', 'whisk'] is False
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' j'] matches ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' w', ' to'] matches ['broiler', 'dutch_oven', 'gas_oven', 'rotisserie', 'tandoor'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' ch'] matches ['watercolor', 'abstraction', 'cityscape', 'daub', 'distemper', 'finger-painting', 'icon', 'ikon', 'landscape', 'miniature', 'illumination', 'monochrome', 'mural', 'wall', 'nude', 'nude_painting', 'oil', 'pentimento', 'sand', 'seascape', 'waterscape', 'semi-abstraction', 'still_life', 'tanka', 'water-color', 'watercolour', 'water-colour', 'fresco', 'graffitti'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' j', ' ch'] matches ['haiku', 'abecedarius', 'alcaic', 'alcaic_verse', 'ballad', 'lay', 'ballade', 'blank_verse', 'elegy', 'lament', 'epic_poem', 'heroic_poem', 'epic', 'epos', 'free_verse', 'vers_libre', 'lyric', 'lyric_poem', 'rondeau', 'rondel', 'sonnet', 'tanka', 'terza_rima', 'verse', 'rhyme', 'versicle'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' the', ' p'] matches ['monorail', 'cable', 'funicular', 'cog', 'rack', 'elevated', 'el', 'overhead', 'metro', 'tube', 'underground', 'subway', 'rail'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' the'] matches ['spring', 'harvest', 'haying', 'fall', 'autumn', 'springtime', 'summer', 'summertime', 'winter', 'wintertime', 'rainy', 'dry', 'growing', 'seedtime', 'sheepshearing', 'holiday', 'high', 'peak', 'off-season', 'preseason', 'baseball', 'basketball', 'exhibition', 'concert', 'fishing', 'football', 'hockey', 'hunting', 'social', 'theatrical', 'whitsun', 'whitsuntide', 'whitweek'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' an', ' car'] matches ['chair', 'bench', 'box', 'ottoman', 'pouf', 'pouffe', 'puff', 'hassock', 'sofa', 'couch', 'lounge', 'stool', 'toilet'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' table', ' ch', ' coffee'] matches ['bookshelf', 'hob', 'mantel', 'mantelpiece', 'mantle', 'mantlepiece', 'chimneypiece', 'overmantel', 'berm'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' l', ' ch'] matches ['polo', 'camise', 'dashiki', 'daishiki', 'dress', 'evening', 'hair', 'jersey', 't-shirt', 'tee', 'kurta', 'sport', 'tank', 'work-shirt'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' p', ' ch'] matches ['sneakers', 'anklet', 'baby_shoes', 'balmoral', 'blucher', 'bowling_shoes', 'brogan', 'brogue', 'clodhopper', 'work_shoes', 'calceus', 'chopine', 'platform_shoes', 'chukka', 'boots', 'cleats', 'congress_shoes', 'gaiters', 'flipper_shoes', 'fin_shoes', 'ghillie', 'gillie', 'gym_shoes', 'tennis_shoes', 'loafers', 'moccasins', 'mocassins', 'oxford_shoes', 'pump_shoes', 'running_shoes', 'sabot', 'wooden_shoes', 'sandals', 'slingbacks', 'sling_shoes', 'walker_shoes', 'walking_shoes', 'wedgie', 'wing_shoes', 'tip_shoes', 'stiletto', 'heeled'] is True
2024-06-13 07:03:08 root INFO     [' t', ' a', ' ch', ' coffee', ' j'] matches ['divan', 'diwan', 'convertible_sofa', 'daybed', 'loveseat', 'settee', 'squab'] is False
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' j', ' p'] matches ['lullaby', 'religious_song', 'anthem', 'aria', 'ballad', 'lay', 'barcarole', 'barcarolle', 'ditty', 'dirge', 'coronach', 'lament', 'requiem', 'threnody', 'drinking_song', 'folk_song', 'folksong', 'folk_ballad', 'lied', 'love_song', 'love-song', 'cradlesong', 'berceuse', 'oldie', 'golden_oldie', 'partsong', 'prothalamion', 'prothalamium', 'roundelay', 'scolion', 'banquet_song', 'serenade', 'torch_song', 'work_song'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' coffee', ' ch', ' an'] matches ['pepper', 'allspice', 'ajwain', 'cumin', 'caraway_seed', 'cardamom', 'cassia', 'cayenne', 'celery_seeds', 'chile_pepper', 'chile', 'cinnamon', 'clove', 'coriander', 'dill', 'fennel', 'fenugreek', 'frankincense', 'galangal', 'garlic', 'ginger', 'horseradish', 'jalapeño', 'juniper', 'licorice', 'mace', 'mustard', 'nutmeg', 'onion', 'paprika', 'peppercorns', 'saffron', 'savory', 'sesame', 'anise', 'sumac', 'tabasco', 'tamarind', 'turmeric', 'five_spice_powder', 'ginger', 'powdered_ginger', 'chinese_anise', 'star_anise', 'star_aniseed'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' ch', ' p', ' an'] matches ['turtleneck', 'cardigan', 'pullover', 'slipover', 'turtle', 'polo-neck'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' l', ' an', ' the'] matches ['rake', 'abrader', 'abradant', 'bender', 'clincher', 'comb', 'cutting_implement', 'drill', 'eolith', 'fork', 'gang', 'garden_tool', 'lawn_tool', 'grapnel', 'grapple', 'grappler', 'grappling_hook', 'grappling_iron', 'hack', 'hand_tool', 'hoe', 'jack', 'jaws_of_life', 'neolith', 'paleolith', 'pestle', 'muller', 'pounder', 'plow', 'plough', 'power_tool', 'punch', 'puncher', 'ram', 'rounder', 'saw_set', 'shaping_tool', 'strickle', 'stylus', 'style', 'tamp', 'tamper', 'tamping_bar', 'tap', 'upset', 'swage'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' l', ' an', ' tr'] matches ['doll', 'ball', 'balloon', 'cockhorse', 'dolly', 'dollhouse', 'house', 'frisbee', 'hobby', 'hobbyhorse', 'rocking', 'horse', 'hula-hoop', 'jack-in-the-box', 'jungle', 'gym', 'jumping', 'jack', 'kaleidoscope', 'kite', 'lego', 'meccano', 'shooter', 'pinata', 'pinwheel', 'playhouse', 'wendy', 'pogo', 'stick', 'popgun', 'rattle', 'sandbox', 'sandpile', 'sandpit', 'seesaw', 'teeter', 'teeter-totter', 'teetertotter', 'teeterboard', 'tilting', 'board', 'dandle', 'slide', 'playground', 'sliding', 'slingshot', 'sling', 'catapult', 'stick', 'horse', 'swing', 'teddy', 'bear', 'top', 'whirligig', 'teetotum', 'spinning', 'train', 'water_pistol', 'gun', 'squirt', 'squirter', 'yo-yo'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' p', ' an', ' ch'] matches ['jeans', 'bellbottom_trousers', 'bell-bottoms', 'bellbottom_pants', 'breeches', 'knee_breeches', 'knee_pants', 'knickerbockers', 'knickers', 'chino', 'churidars', 'cords', 'corduroys', 'flannel', 'gabardine', 'tweed', 'white', 'jean', 'blue_jean', 'denim', 'jodhpurs', 'jodhpur_breeches', 'riding_breeches', 'long_trousers', 'long_pants', 'pajama', 'pyjama', 'pantaloon', 'pedal_pusher', 'toreador_pants', 'salwar', 'shalwar', 'short_pants', 'shorts', 'trunks', 'slacks', 'stretch_pants', 'sweat_pants', 'sweatpants', 'trews', 'britches', 'buckskins', 'plus_fours', 'trunk_hose', "levi's", 'levis', 'bermuda_shorts', 'jamaica_shorts', 'hot_pants', 'lederhosen'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' the', ' ch'] matches ['gun', 'bow', 'bow', 'arrow', 'dart', 'knucks', 'knuckles', 'flamethrower', 'knife', 'missile', 'pike', 'projectile', 'slasher', 'sling', 'spear', 'lance', 'shaft', 'stun', 'baton', 'sword', 'blade', 'brand', 'steel', 'tomahawk', 'hatchet', 'fire'] is True
2024-06-13 07:03:08 root INFO     [' a', ' t', ' an', ' coffee', ' p'] matches ['monday', 'workday', 'working_day', 'work_day', 'feria', 'mon', 'tuesday', 'tues', 'wednesday', 'midweek', 'wed', 'thursday', 'th', 'friday', 'fri', 'saturday', 'sabbatum', 'sat'] is True
2024-06-13 07:03:08 root INFO     hyponyms - misc (50) total: defaultdict(<class 'int'>, {True: 745, False: 477})
2024-06-13 07:03:09 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='hypernyms - animals', prompt_templates=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], prompt_templates_zs=['The {} falls into the category of', 'The {} is classified as a', 'The {} is a type of'], samples=[RelationSample(subject='allosaurus', object=['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='anaconda', object=['snake', 'reptile', 'boa', 'serpent', 'ophidian']), RelationSample(subject='ant', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing']), RelationSample(subject='beaver', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='bee', object=['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing']), RelationSample(subject='beetle', object=['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing']), RelationSample(subject='buffalo', object=['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='butterfly', object=['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing']), RelationSample(subject='cat', object=['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', '']), RelationSample(subject='chicken', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='chimpanzee', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='chinchilla', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='cobra', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='cockroach', object=['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing']), RelationSample(subject='cow', object=['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='coyote', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='deer', object=['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='dog', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='duck', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='eagle', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='falcon', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='fox', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='gibbon', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='goat', object=['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing']), RelationSample(subject='goose', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing']), RelationSample(subject='gorilla', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='hawk', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='human', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='jackal', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing']), RelationSample(subject='jaguar', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='leopard', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='lion', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='mamba', object=['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian']), RelationSample(subject='mouse', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='orangutan', object=['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing']), RelationSample(subject='owl', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='pony', object=['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus']), RelationSample(subject='porcupine', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='quail', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='rattlesnake', object=['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian']), RelationSample(subject='squirrel', object=['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', '']), RelationSample(subject='stegosaurus', object=['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='tiger', object=['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat']), RelationSample(subject='triceratops', object=['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='turkey', object=['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing']), RelationSample(subject='tyrannosaurus', object=['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='velociraptor', object=['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', '']), RelationSample(subject='viper', object=['snake', 'reptile', 'snake', 'serpent', 'ophidian']), RelationSample(subject='vulture', object=['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', '']), RelationSample(subject='wolf', object=['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'])], _domain=None, _range=None)
2024-06-13 07:03:11 root INFO     starting operator prediction
2024-06-13 07:03:11 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The {} falls into the category of)
2024-06-13 07:03:11 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:07:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:07:09 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:07:09 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:11:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:11:09 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:11:09 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:15:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:15:06 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:15:06 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:19:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:19:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:19:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:23:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:23:05 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:23:06 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:27:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:27:05 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:27:05 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:31:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:31:05 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:31:05 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:35:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:35:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:35:03 root INFO     total operator prediction time: 1912.3760690689087 seconds
2024-06-13 07:35:05 root INFO     [' dinosaur', ' rept', ' f', ' p', ' b'] matches ['dinosaur', 'reptile', 'bird', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' b', ' p', ' rept', ' a'] matches ['snake', 'reptile', 'boa', 'serpent', 'ophidian'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' r', ' rodent', ' a'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'physical_hymenopteron', 'physical_entity', 'hymenopter', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' rodent', ' f', ' p', ' b', ' r'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' insect', ' b', ' r', ' p'] matches ['insect', 'invertebrate', 'creature', 'beast', 'hymenopteran', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'hymenopterous_insect', 'animate_being', 'hymenopteron', 'hymenopter', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' insect', ' p', ' f', ' r', ' rept'] matches ['insect', 'invertebrate', 'creature', 'beast', 'being', 'animal', 'insect', 'organism', 'fauna', 'arthropod', 'animate_being', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' b', ' r', ' f', ' p', ' un'] matches ['bovid', 'mammal', 'bison', 'cow', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' bird', ' rept', ' a'] matches ['insect', 'creature', 'beast', 'lepidopteran', 'animal', 'organism', 'fauna', 'arthropod', 'lepidopterous_insect', 'lepidopteron', 'animate_being', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' b', ' mammal', ' p', ' r'] matches ['feline', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' bird', ' av', ' b', ' ov'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' pr', ' sim', ' mammal', ' b'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' rodent', ' b', ' p', ' r'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' rept', ' p', ' b', ' a'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is True
2024-06-13 07:35:05 root INFO     [' f', ' rept', ' rodent', ' insect', ' p'] matches ['insect', 'invertebrate', 'creature', 'beast', 'dictyopterous_insect', 'being', 'animal', 'organism', 'fauna', 'arthropod', 'animate_being', 'physical_entity', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' r', ' b', ' un', ' f', ' art'] matches ['bovid', 'mammal', 'cattle', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' can', ' carniv', ' canine', ' b'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' r', ' cerv', ' un', ' f', ' b'] matches ['bovid', 'mammal', 'vertebrate', 'creature', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'ruminant', 'chordate', 'eutherian', 'mammalian', 'bovine', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_hoofed_mammal', 'physical_entity', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' canine', ' can', ' f', ' carniv', ' mammal'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' b', ' bird', ' av'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' bird', ' p', ' av', ' rapt'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'iving_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' bird', ' p', ' av', ' rapt'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' carniv', ' can', ' b', ' omn'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' b', ' p', ' un', ' mammal'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' r', ' b', ' f', ' un', ' ov'] matches ['bovid', 'mammal', 'vertebrate', 'ungulate', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'artiodactyl', 'chordate', 'eutherian', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'hoofed_mammal', 'even-toed_ungulate', 'artiodactyl_mammal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' bird', ' p', ' av', ' b'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'waterfowl', 'water_fowl', 'animate_being', 'anseriform_bird', 'craniate', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' b', ' pr', ' mammal', ' p'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' bird', ' rapt', ' p', ' av'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' mammal', ' mammalian', ' pr', ' b'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' can', ' canine', ' carniv', ' rodent'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' cat', ' carniv', ' b'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' cat', ' carniv', ' fel'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'causal_agent', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' b', ' carniv', ' cat'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-13 07:35:05 root INFO     [' f', ' rept', ' p', ' b', ' a'] matches ['snake', 'reptile', 'elapid', 'elapid_snake', 'serpent', 'ophidian'] is True
2024-06-13 07:35:05 root INFO     [' rodent', ' f', ' mammal', ' b', ' un'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' mammal', ' b', ' pr'] matches ['primate', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'placental', 'hominid', 'chordate', 'eutherian', 'mammal', 'ape', 'mammalian', 'animate_being', 'eutherian_mammal', 'placental_mammal', 'craniate', 'physical_physical_entity', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' bird', ' av', ' pe'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-13 07:35:05 root INFO     [' b', ' f', ' un', ' equ', ' r'] matches ['bovid', 'mammal', 'horse', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'eutherian', 'mammal', 'equine', 'mammalian', 'equid', 'living_thing', 'odd-toed_ungulate', 'animate_being', 'eutherian_mammal', 'perissodactyl', 'placental_mammal', 'craniate', 'hoofed_mammal', 'physical_entity', 'perissodactyl_mammal', 'equus_caballus'] is True
2024-06-13 07:35:05 root INFO     [' rodent', ' f', ' b', ' p', ' mammal'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' b', ' bird', ' p', ' r'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'wild_fowl', 'wildfowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' rept', ' f', ' carniv', ' p', ' animal'] matches ['snake', 'reptile', 'pit_viper', 'serpent', 'ophidian'] is True
2024-06-13 07:35:05 root INFO     [' rodent', ' f', ' p', ' b', ' un'] matches ['rodent', 'vertebrate', 'creature', 'beast', 'animal', 'organism', 'fauna', 'placental', 'chordate', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'gnawer', 'animate_being', 'living_thing', 'placental_mammal', 'craniate', ''] is True
2024-06-13 07:35:05 root INFO     [' rept', ' dinosaur', ' p', ' f', ' b'] matches ['dinosaur', 'reptile', 'armored_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' cat', ' carniv', ' fel'] matches ['feline', 'cat', 'beast', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'felid', 'eutherian', 'mammal', 'mammalian', 'eutherian_mammal', 'animate_being', 'placental_mammal', 'craniate', 'big_cat'] is True
2024-06-13 07:35:05 root INFO     [' b', ' f', ' r', ' p', ' dinosaur'] matches ['dinosaur', 'reptile', 'ceratopsian', 'horned_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' b', ' bird', ' p', ' r'] matches ['fowl', 'bird', 'vertebrate', 'poultry', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'poultry', 'chordate', 'domestic_fowl', 'animate_being', 'gallinaceous_bird', 'craniate', 'gallinacean', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     [' dinosaur', ' f', ' rept', ' p', ' b'] matches ['dinosaur', 'reptile', 'theropod', 'theropod_dinosaur', 'bird-footed_dinosaur', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' carniv', ' rept', ' p', ' b'] matches ['dinosaur', 'reptile', 'maniraptor', 'archosaur', 'archosaurian', 'archosaurian_reptile', ''] is True
2024-06-13 07:35:05 root INFO     [' f', ' rept', ' snake', ' carniv', ' p'] matches ['snake', 'reptile', 'snake', 'serpent', 'ophidian'] is True
2024-06-13 07:35:05 root INFO     [' f', ' p', ' bird', ' b', ' av'] matches ['raptor', 'bird', 'vertebrate', 'creature', 'beast', 'being', 'animal', 'organism', 'fauna', 'chordate', 'animate_being', 'craniate', 'living_thing', 'raptorial_bird', 'bird_of_prey', ''] is True
2024-06-13 07:35:05 root INFO     [' can', ' f', ' carniv', ' canine', ' b'] matches ['canine', 'vertebrate', 'creature', 'beast', 'canid', 'being', 'animal', 'organism', 'fauna', 'placental', 'carnivore', 'chordate', 'eutherian', 'mammal', 'mammalian', 'animate_being', 'eutherian_mammal', 'locomote', 'placental_mammal', 'craniate', 'domesticated_animal', 'physical_entity', 'domestic_animal', 'living_thing'] is True
2024-06-13 07:35:05 root INFO     hypernyms - animals (50) total: defaultdict(<class 'int'>, {True: 795, False: 477})
2024-06-13 07:35:06 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='antonyms - binary', prompt_templates=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], prompt_templates_zs=['The opposite of {} is', 'The inverse of {} is', 'Something that is {} is not'], samples=[RelationSample(subject='after', object=['before', 'earlier', 'previously']), RelationSample(subject='ahead', object=['behind', 'rear', 'after', 'tail', 'beforehand']), RelationSample(subject='anterior', object=['posterior']), RelationSample(subject='backward', object=['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward']), RelationSample(subject='before', object=['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead']), RelationSample(subject='beginning', object=['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='below', object=['above', 'higher', 'up']), RelationSample(subject='climb', object=['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining']), RelationSample(subject='dead', object=['alive', 'living', 'live']), RelationSample(subject='decrement', object=['increment']), RelationSample(subject='descend', object=['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant']), RelationSample(subject='dive', object=['emerge']), RelationSample(subject='down', object=['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward']), RelationSample(subject='downslope', object=['upslope', 'ascent']), RelationSample(subject='drop', object=['lift', 'pick_up']), RelationSample(subject='dynamic', object=['static', 'still', 'unmoving', 'unchanging']), RelationSample(subject='employ', object=['dismiss', 'fire', 'sack', 'displace', 'terminate']), RelationSample(subject='exit', object=['entrance', 'entranceway', 'entryway', 'entry', 'entree']), RelationSample(subject='fall', object=['rise', 'upward', 'climb']), RelationSample(subject='first', object=['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion']), RelationSample(subject='forget', object=['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect']), RelationSample(subject='forward', object=['backward', 'back', 'backwards', 'rearward', 'rearwards']), RelationSample(subject='front', object=['back', 'rear', 'forepart']), RelationSample(subject='in', object=['out', 'outer', 'exterior', 'outside']), RelationSample(subject='inbound', object=['outbound']), RelationSample(subject='inhale', object=['exhale']), RelationSample(subject='input', object=['output']), RelationSample(subject='inside', object=['outside', 'exterior', 'out']), RelationSample(subject='interior', object=['exterior', 'outdoor', 'out-of-door', 'outside']), RelationSample(subject='internal', object=['external', 'outer', 'outside']), RelationSample(subject='inverse', object=['reverse', 'reversion', 'reversal', 'turnabout', 'turnaround']), RelationSample(subject='mortal', object=['immortal']), RelationSample(subject='occupied', object=['vacant', 'free']), RelationSample(subject='off', object=['on']), RelationSample(subject='out', object=['in', 'inside']), RelationSample(subject='outward', object=['upward', 'up', 'upwards']), RelationSample(subject='over', object=['under', 'below', 'beneath']), RelationSample(subject='previously', object=['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent']), RelationSample(subject='proceed', object=['retreat', 'return']), RelationSample(subject='rise', object=['sink', 'drop', 'fall']), RelationSample(subject='south', object=['north']), RelationSample(subject='southeast', object=['southwest', 'northeast']), RelationSample(subject='submerge', object=['emerge']), RelationSample(subject='top', object=['bottom', 'underside', 'undersurface']), RelationSample(subject='toward', object=['away', 'off', 'forth', 'aside']), RelationSample(subject='true', object=['false', 'incorrect', 'wrong', 'mistaken']), RelationSample(subject='under', object=['over', 'above', 'up']), RelationSample(subject='up', object=['down', 'downwards', 'downward', 'downwardly']), RelationSample(subject='uphill', object=['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping']), RelationSample(subject='west', object=['east'])], _domain=None, _range=None)
2024-06-13 07:35:08 root INFO     starting operator prediction
2024-06-13 07:35:08 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The opposite of {} is)
2024-06-13 07:35:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:39:07 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:39:07 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:39:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:43:06 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:43:06 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:43:06 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:47:05 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:47:05 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:47:05 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:51:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:51:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:51:03 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:54:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:54:59 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:55:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 07:58:56 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 07:58:56 root INFO     [order_1_approx] weight calculation finished
2024-06-13 07:58:57 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:02:54 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:02:54 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:02:54 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:06:52 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:06:52 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:06:52 root INFO     total operator prediction time: 1904.582431793213 seconds
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' the', ' in'] matches ['before', 'earlier', 'previously'] is False
2024-06-13 08:06:55 root INFO     [' ', '\n', ' in', ' ahead', ' opposite'] matches ['behind', 'rear', 'after', 'tail', 'beforehand'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' posterior', ' interior', ' ', ' the'] matches ['posterior'] is True
2024-06-13 08:06:55 root INFO     [' forward', '\n', ' ', ' inward', '...'] matches ['forward', 'forwards', 'frontward', 'frontwards', 'forrad', 'forrard', 'forth', 'onward'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' the', ' in'] matches ['after', 'subsequently', 'later', 'afterwards', 'afterward', 'ahead'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' the', '...', ' not'] matches ['end', 'terminal', 'ending', 'last', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' upward', ' ', ' above', ' not'] matches ['above', 'higher', 'up'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' in', ' the'] matches ['descend', 'declivitous', 'downhill', 'downward-sloping', 'degressive', 'descendant', 'descendent', 'down', 'downward', 'downward-arching', 'drizzling', 'dropping', 'falling', 'raining'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' the', ' ', ' not', ' in'] matches ['alive', 'living', 'live'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' the', ' not', ' a'] matches ['increment'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' upward', ' ascent', ' the'] matches ['ascend', 'climb', 'rise', 'upward', 'ascendent', 'ascendant'] is True
2024-06-13 08:06:55 root INFO     [' up', ' upward', '\n', ' uphill', ' '] matches ['up', 'above', 'ahead', 'lead', 'leading', 'aweigh', 'dormie', 'dormy', 'heavenward', 'skyward', 'risen', 'sprouted', 'upbound', 'upfield', 'upward'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' upward', ' the', ' uphill'] matches ['upslope', 'ascent'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' the', ' not', ' a'] matches ['lift', 'pick_up'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' static', ' the', ' not'] matches ['static', 'still', 'unmoving', 'unchanging'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' in', ' not', ' the'] matches ['dismiss', 'fire', 'sack', 'displace', 'terminate'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' the', ' entrance', '...'] matches ['entrance', 'entranceway', 'entryway', 'entry', 'entree'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' the', ' a', '...'] matches ['rise', 'upward', 'climb'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' not', ' ', '...', ' the'] matches ['last', 'end', 'terminal', 'ending', 'final', 'finish', 'finale', 'conclusion'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' the', ' in'] matches ['remember', 'retrieve', 'recall', 'call_back', 'call_up', 'recollect'] is False
2024-06-13 08:06:55 root INFO     [' backward', ' reverse', '\n', ' inward', ' forward'] matches ['backward', 'back', 'backwards', 'rearward', 'rearwards'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' reverse', ' not', ' back', ' rear'] matches ['back', 'rear', 'forepart'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' the', ' in'] matches ['out', 'outer', 'exterior', 'outside'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' out', ' the', '...'] matches ['outbound'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', '...', ' the', ' an'] matches ['exhale'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', '...', ' output', ' the'] matches ['output'] is True
2024-06-13 08:06:55 root INFO     [' outside', '\n', ' inside', ' ', '...'] matches ['outside', 'exterior', 'out'] is True
2024-06-13 08:06:55 root INFO     [' exterior', ' interior', '\n', ' ', ' the'] matches ['exterior', 'outdoor', 'out-of-door', 'outside'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' external', ' ', ' internal', ' outward'] matches ['external', 'outer', 'outside'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' in', ' not', ' the'] matches ['immortal'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' un', ' in', ' the'] matches ['vacant', 'free'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' in', ' the', ' ', ' inside'] matches ['on'] is False
2024-06-13 08:06:55 root INFO     [' in', ' inside', '\n', ' not', ' inward'] matches ['in', 'inside'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' not', ' ', ' in', ' the'] matches ['under', 'below', 'beneath'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' in', ' the'] matches ['subsequently', 'later', 'afterwards', 'afterward', 'after', 'subsequent'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' in', ' not', ' the'] matches ['retreat', 'return'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' the', ' not', ' a'] matches ['sink', 'drop', 'fall'] is False
2024-06-13 08:06:55 root INFO     [' north', ' west', '\n', ' east', ' northeast'] matches ['north'] is True
2024-06-13 08:06:55 root INFO     [' northwest', ' ', ' northeast', '\n', ' north'] matches ['southwest', 'northeast'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' the', ' in'] matches ['emerge'] is False
2024-06-13 08:06:55 root INFO     [' bottom', '\n', ' ', ' not', ' opposite'] matches ['bottom', 'underside', 'undersurface'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' toward', ' the', ' not'] matches ['away', 'off', 'forth', 'aside'] is False
2024-06-13 08:06:55 root INFO     ['\n', ' not', ' ', ' false', ' the'] matches ['false', 'incorrect', 'wrong', 'mistaken'] is True
2024-06-13 08:06:55 root INFO     ['\n', ' ', ' not', ' the', ' in'] matches ['over', 'above', 'up'] is False
2024-06-13 08:06:55 root INFO     [' down', '\n', ' ', ' not', ' in'] matches ['down', 'downwards', 'downward', 'downwardly'] is True
2024-06-13 08:06:55 root INFO     [' downhill', '\n', ' ', ' uphill', ' down'] matches ['downhill', 'decline', 'fall', 'declivitous', 'downward-sloping'] is True
2024-06-13 08:06:55 root INFO     [' east', ' west', ' north', '\n', ' northeast'] matches ['east'] is True
2024-06-13 08:06:55 root INFO     antonyms - binary (50) total: defaultdict(<class 'int'>, {True: 817, False: 502})
2024-06-13 08:06:55 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='meronyms - substance', prompt_templates=['A {} is made up of', 'A {} is comprised of', '{} is made from'], prompt_templates_zs=['A {} is made up of', 'A {} is comprised of', '{} is made from'], samples=[RelationSample(subject='atmosphere', object=['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone']), RelationSample(subject='bag', object=['leather', 'fabric', 'plastic']), RelationSample(subject='beach', object=['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si']), RelationSample(subject='beard', object=['hair']), RelationSample(subject='body', object=['flesh', 'bones']), RelationSample(subject='boots', object=['leather', 'canvas']), RelationSample(subject='bottle', object=['glass', 'plastic']), RelationSample(subject='bowl', object=['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay']), RelationSample(subject='box', object=['cardboard', 'tin', 'boxwood', 'turkish_boxwood']), RelationSample(subject='bread', object=['flour', 'yeast', '']), RelationSample(subject='bronze', object=['copper', 'tin', 'cu', 'atomic_number_29']), RelationSample(subject='candy', object=['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts']), RelationSample(subject='chocolate', object=['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean']), RelationSample(subject='clothing', object=['fabric', 'leather', '']), RelationSample(subject='cloud', object=['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor']), RelationSample(subject='cocktail', object=['alcohol', 'juice', 'water']), RelationSample(subject='concrete', object=['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si']), RelationSample(subject='desk', object=['wood', 'metal', 'steel']), RelationSample(subject='diamond', object=['carbon']), RelationSample(subject='doorknob', object=['metal', 'steel', 'bronze', 'wood']), RelationSample(subject='flag', object=['fabric', 'paper']), RelationSample(subject='glacier', object=['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice']), RelationSample(subject='glass', object=['silicone']), RelationSample(subject='house', object=['bricks', 'cement', 'wood', 'clay']), RelationSample(subject='ice', object=['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='icicle', object=['ice', 'water']), RelationSample(subject='jam', object=['fruit', 'sugar', 'berries']), RelationSample(subject='jeans', object=['fabric', 'denim']), RelationSample(subject='lawn', object=['grass']), RelationSample(subject='lens', object=['glass', 'plastic']), RelationSample(subject='mirror', object=['glass', 'bronze']), RelationSample(subject='money', object=['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin']), RelationSample(subject='ocean', object=['water']), RelationSample(subject='omelette', object=['eggs', 'egg', 'milk', 'cheese']), RelationSample(subject='pastry', object=['flour', 'egg', 'butter', 'filling']), RelationSample(subject='penny', object=['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin']), RelationSample(subject='pill', object=['medicine', 'drug']), RelationSample(subject='plastic', object=['polymer', 'oil', 'gas', 'coal']), RelationSample(subject='roof', object=['shingles', 'tiles', 'wood', 'metal']), RelationSample(subject='sea', object=['water']), RelationSample(subject='snow', object=['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='spoon', object=['aluminium', 'wood', 'steel']), RelationSample(subject='steel', object=['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron']), RelationSample(subject='table', object=['wood', 'metal', 'plastic']), RelationSample(subject='wall', object=['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud']), RelationSample(subject='water', object=['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o']), RelationSample(subject='wig', object=['hair']), RelationSample(subject='wine', object=['grapes', 'grape']), RelationSample(subject='wire', object=['metal']), RelationSample(subject='yogurt', object=['milk'])], _domain=None, _range=None)
2024-06-13 08:06:57 root INFO     starting operator prediction
2024-06-13 08:06:57 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is made up of)
2024-06-13 08:06:57 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:11:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:11:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:11:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:15:01 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:15:01 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:15:01 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:19:01 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:19:01 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:19:01 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:23:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:23:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:23:01 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:27:02 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:27:02 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:27:02 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:31:01 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:31:01 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:31:01 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:35:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:35:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:35:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:39:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:39:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:39:00 root INFO     total operator prediction time: 1922.5798683166504 seconds
2024-06-13 08:39:02 root INFO     [' paper', ' a', ' plastic', ' air', ' cotton'] matches ['gas', 'oxygen', 'hydrogen', 'nitrogen', 'ozone'] is False
2024-06-13 08:39:02 root INFO     [' plastic', ' a', ' paper', ' cotton', '...'] matches ['leather', 'fabric', 'plastic'] is True
2024-06-13 08:39:02 root INFO     [' a', ' sand', ' water', ' plastic', '...'] matches ['sand', 'silicon', 'rocks', 'pebbles', 'atomic_number_14', 'si'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', ' cotton', ' wood'] matches ['hair'] is False
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' paper', ' metal', ' water'] matches ['flesh', 'bones'] is False
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' leather', ' paper', ' rubber'] matches ['leather', 'canvas'] is True
2024-06-13 08:39:02 root INFO     [' plastic', ' a', ' paper', ' wax', ' glass'] matches ['glass', 'plastic'] is True
2024-06-13 08:39:02 root INFO     [' a', ' clay', ' plastic', ' paper', ' water'] matches ['glass', 'china', 'aluminium', 'wood', 'steel', 'plastic', 'clay'] is True
2024-06-13 08:39:02 root INFO     [' paper', ' a', ' plastic', ' cardboard', ' metal'] matches ['cardboard', 'tin', 'boxwood', 'turkish_boxwood'] is True
2024-06-13 08:39:02 root INFO     [' flour', ' bread', ' wheat', ' a', ' sugar'] matches ['flour', 'yeast', ''] is True
2024-06-13 08:39:02 root INFO     [' metal', ' a', ' clay', ' aluminum', ' iron'] matches ['copper', 'tin', 'cu', 'atomic_number_29'] is True
2024-06-13 08:39:02 root INFO     [' sugar', ' a', ' plastic', ' chocolate', ' wax'] matches ['sugar', 'nougat', 'chocolate', 'gelatin', 'molasses', 'syrup', 'honey', 'fruit', 'nuts'] is True
2024-06-13 08:39:02 root INFO     [' a', ' chocolate', ' sugar', ' wax', ' milk'] matches ['cocoa', 'bean', 'cacao', 'cacao_bean', 'cocoa_bean'] is False
2024-06-13 08:39:02 root INFO     [' cotton', ' a', ' plastic', ' paper', ' fabric'] matches ['fabric', 'leather', ''] is True
2024-06-13 08:39:02 root INFO     [' a', ' water', ' paper', ' air', ' plastic'] matches ['vapor', 'water', 'vapour', 'water_vapour', 'water_vapor'] is True
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' water', ' paper', ' sugar'] matches ['alcohol', 'juice', 'water'] is True
2024-06-13 08:39:02 root INFO     [' water', ' sand', ' a', ' clay', ' plastic'] matches ['silicon', 'cement', 'water', 'sand', 'atomic_number_14', 'si'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', ' wood', ' metal'] matches ['wood', 'metal', 'steel'] is True
2024-06-13 08:39:02 root INFO     [' sand', ' a', ' stones', ' sugar', ' rocks'] matches ['carbon'] is False
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' paper', ' wood', ' metal'] matches ['metal', 'steel', 'bronze', 'wood'] is True
2024-06-13 08:39:02 root INFO     [' paper', ' a', ' cotton', ' plastic', '...'] matches ['fabric', 'paper'] is True
2024-06-13 08:39:02 root INFO     [' a', ' water', ' ice', ' plastic', ' sugar'] matches ['ice', 'water', 'oxygen', 'hydrogen', 'h', 'h2o', 'atomic_number_8', 'atomic_number_1', 'o', 'water_ice'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', ' wood', ' water'] matches ['bricks', 'cement', 'wood', 'clay'] is True
2024-06-13 08:39:02 root INFO     [' water', ' ice', ' a', ' sugar', ' salt'] matches ['water', 'oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-13 08:39:02 root INFO     [' a', ' sugar', ' plastic', ' wax', ' water'] matches ['ice', 'water'] is True
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' sugar', ' water', ' paper'] matches ['fruit', 'sugar', 'berries'] is True
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' cotton', ' paper', ' leather'] matches ['fabric', 'denim'] is False
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', ' water', ' cotton'] matches ['grass'] is False
2024-06-13 08:39:02 root INFO     [' plastic', ' a', ' paper', ' water', ' metal'] matches ['glass', 'plastic'] is True
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' paper', ' wax', ' glass'] matches ['glass', 'bronze'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', ' metal', '...'] matches ['paper', 'metal', 'silver', 'gold', 'iron', 'copper', 'tin'] is True
2024-06-13 08:39:02 root INFO     [' water', ' a', ' plastic', ' paper', ' salt'] matches ['water'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' water', ' sugar', ' plastic'] matches ['eggs', 'egg', 'milk', 'cheese'] is False
2024-06-13 08:39:02 root INFO     [' a', ' sugar', ' flour', ' paper', ' dough'] matches ['flour', 'egg', 'butter', 'filling'] is True
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' paper', ' metal', ' aluminum'] matches ['metal', 'alloy', 'bronze', 'nickel', 'zinc', 'copper', 'tin'] is True
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' paper', ' metal', ' chemicals'] matches ['medicine', 'drug'] is False
2024-06-13 08:39:02 root INFO     [' plastic', ' a', ' paper', ' chemicals', ' water'] matches ['polymer', 'oil', 'gas', 'coal'] is False
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', '...', ' water'] matches ['shingles', 'tiles', 'wood', 'metal'] is False
2024-06-13 08:39:02 root INFO     [' a', ' water', ' plastic', ' paper', ' salt'] matches ['water'] is True
2024-06-13 08:39:02 root INFO     [' water', ' a', ' ice', ' sugar', ' sand'] matches ['water', 'oxygen', 'hydrogen', 'flake', 'ice', 'snowflake', 'snowflakes', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-13 08:39:02 root INFO     [' metal', ' plastic', ' a', ' clay', ' aluminum'] matches ['aluminium', 'wood', 'steel'] is True
2024-06-13 08:39:02 root INFO     [' metal', ' iron', ' steel', ' a', ' aluminum'] matches ['iron', 'pearlite', 'carbon', 'cementite', 'ferrite', 'iron_carbide', 'fe', 'atomic_number_26', 'alpha_iron'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' wood', ' plastic', ' metal'] matches ['wood', 'metal', 'plastic'] is True
2024-06-13 08:39:02 root INFO     [' a', ' paper', ' plastic', '...', ' cotton'] matches ['cement', 'bricks', 'stones', 'rocks', 'wood', 'cardboard', 'board', 'plank', 'clay', 'mud'] is False
2024-06-13 08:39:02 root INFO     [' water', ' a', ' plastic', ' salt', ' paper'] matches ['oxygen', 'hydrogen', 'water', 'h2o', 'atomic_number_1', 'atomic_number_8', 'h', 'o'] is True
2024-06-13 08:39:02 root INFO     [' plastic', ' a', ' paper', ' rubber', ' cotton'] matches ['hair'] is False
2024-06-13 08:39:02 root INFO     [' water', ' a', ' sugar', ' wine', ' paper'] matches ['grapes', 'grape'] is False
2024-06-13 08:39:02 root INFO     [' a', ' plastic', ' metal', ' aluminum', ' paper'] matches ['metal'] is True
2024-06-13 08:39:02 root INFO     [' a', ' milk', ' sugar', ' water', ' plastic'] matches ['milk'] is True
2024-06-13 08:39:02 root INFO     meronyms - substance (50) total: defaultdict(<class 'int'>, {True: 852, False: 516})
2024-06-13 08:39:02 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='meronyms - member', prompt_templates=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], prompt_templates_zs=['A {} is a member of a', 'A {} is a part of a', 'A {} belongs to a'], samples=[RelationSample(subject='acrobat', object=['troupe']), RelationSample(subject='antelope', object=['herd']), RelationSample(subject='bee', object=['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand']), RelationSample(subject='bird', object=['flock']), RelationSample(subject='book', object=['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting']), RelationSample(subject='calf', object=['cattle', 'herd']), RelationSample(subject='car', object=['train', 'procession']), RelationSample(subject='cat', object=['clowder', 'glaring', 'clutter', 'pounce']), RelationSample(subject='cattle', object=['herd']), RelationSample(subject='christian', object=['congregation', 'church', 'parish']), RelationSample(subject='citizen', object=['citizenry', 'country', 'state']), RelationSample(subject='college', object=['university']), RelationSample(subject='county', object=['state', 'country']), RelationSample(subject='cow', object=['herd']), RelationSample(subject='crow', object=['murder']), RelationSample(subject='division', object=['company', 'business', 'platoon', 'battle_group']), RelationSample(subject='elephant', object=['herd']), RelationSample(subject='employee', object=['staff', 'company']), RelationSample(subject='fish', object=['school']), RelationSample(subject='flower', object=['bouquet', 'bunch']), RelationSample(subject='galaxy', object=['universe']), RelationSample(subject='goose', object=['gaggle']), RelationSample(subject='juror', object=['jury']), RelationSample(subject='kitten', object=['litter']), RelationSample(subject='letter', object=['alphabet']), RelationSample(subject='lion', object=['pride']), RelationSample(subject='listener', object=['audience']), RelationSample(subject='member', object=['club', 'team', 'group', 'band', 'community']), RelationSample(subject='musician', object=['orchestra', 'band']), RelationSample(subject='nomad', object=['horde']), RelationSample(subject='page', object=['book', 'notebook', 'website', 'web-site']), RelationSample(subject='parishioner', object=['parish', 'church']), RelationSample(subject='person', object=['society', 'company', 'party', 'world']), RelationSample(subject='photo', object=['album', 'collection', 'library']), RelationSample(subject='player', object=['team', 'group', 'orchestra']), RelationSample(subject='policeman', object=['police']), RelationSample(subject='secretary', object=['staff']), RelationSample(subject='senator', object=['senate', 'house']), RelationSample(subject='sheep', object=['flock']), RelationSample(subject='shrub', object=['shrubbery']), RelationSample(subject='singer', object=['choir', 'band', 'duo', 'trio', 'quartet']), RelationSample(subject='soldier', object=['army', 'unit', 'division', 'troop']), RelationSample(subject='song', object=['album', 'collection', 'antology', 'library']), RelationSample(subject='spouse', object=['couple', 'relationship', 'family']), RelationSample(subject='star', object=['constellation', 'galaxy']), RelationSample(subject='state', object=['country', 'province']), RelationSample(subject='student', object=['class', 'school']), RelationSample(subject='tree', object=['forest', 'wood', 'grove']), RelationSample(subject='wolf', object=['pack']), RelationSample(subject='word', object=['paragraph', 'sentence', 'text'])], _domain=None, _range=None)
2024-06-13 08:39:04 root INFO     starting operator prediction
2024-06-13 08:39:04 lre.operators WARNING  relation has > 1 prompt_templates, will use first (A {} is a member of a)
2024-06-13 08:39:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:43:02 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:43:02 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:43:02 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:47:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:47:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:47:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:50:59 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:50:59 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:50:59 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:55:00 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:55:00 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:55:00 root INFO     [order_1_approx] starting weight calculation
2024-06-13 08:59:01 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 08:59:01 root INFO     [order_1_approx] weight calculation finished
2024-06-13 08:59:01 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:03:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:03:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:03:03 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:07:04 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:07:04 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:07:04 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:11:03 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:11:03 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:11:03 root INFO     total operator prediction time: 1918.3898973464966 seconds
2024-06-13 09:11:05 root INFO     [' team', ' club', ' group', ' company', ' society'] matches ['troupe'] is False
2024-06-13 09:11:05 root INFO     [' group', ' herd', ' club', ' team', ' tribe'] matches ['herd'] is True
2024-06-13 09:11:05 root INFO     [' group', ' company', ' team', ' club', ' society'] matches ['swarm', 'hive', 'colony', 'drift', 'cast', 'nest', 'rabble', 'stand'] is False
2024-06-13 09:11:05 root INFO     [' flock', ' group', ' company', ' team', ' family'] matches ['flock'] is True
2024-06-13 09:11:05 root INFO     [' team', ' club', ' group', ' company', ' society'] matches ['library', 'shelf', 'collection', 'accounting', 'accounting_system', 'method_of_accounting'] is False
2024-06-13 09:11:05 root INFO     [' herd', ' team', ' group', ' club', ' company'] matches ['cattle', 'herd'] is True
2024-06-13 09:11:05 root INFO     [' herd', ' group', ' team', ' club', ' company'] matches ['herd'] is True
2024-06-13 09:11:05 root INFO     [' church', ' club', ' group', ' congregation', ' team'] matches ['congregation', 'church', 'parish'] is True
2024-06-13 09:11:05 root INFO     [' club', ' society', ' group', ' community', ' nation'] matches ['citizenry', 'country', 'state'] is False
2024-06-13 09:11:05 root INFO     [' club', ' group', ' team', ' company', ' society'] matches ['university'] is False
2024-06-13 09:11:05 root INFO     [' group', ' team', ' club', ' company', ' family'] matches ['state', 'country'] is False
2024-06-13 09:11:05 root INFO     [' herd', ' team', ' group', ' company', ' family'] matches ['herd'] is True
2024-06-13 09:11:05 root INFO     [' team', ' group', ' company', ' club', ' family'] matches ['company', 'business', 'platoon', 'battle_group'] is True
2024-06-13 09:11:05 root INFO     [' herd', ' company', ' group', ' team', ' club'] matches ['herd'] is True
2024-06-13 09:11:05 root INFO     [' company', ' team', ' club', ' group', ' staff'] matches ['staff', 'company'] is True
2024-06-13 09:11:05 root INFO     [' group', ' team', ' company', ' club', ' flock'] matches ['school'] is False
2024-06-13 09:11:05 root INFO     [' group', ' company', ' team', ' flock', ' family'] matches ['bouquet', 'bunch'] is False
2024-06-13 09:11:05 root INFO     [' group', ' club', ' team', ' company', ' family'] matches ['universe'] is False
2024-06-13 09:11:05 root INFO     [' flock', ' group', ' family', ' club', ' team'] matches ['gaggle'] is False
2024-06-13 09:11:05 root INFO     [' group', ' club', ' team', ' society', ' company'] matches ['jury'] is False
2024-06-13 09:11:05 root INFO     [' family', ' club', ' company', ' group', ' team'] matches ['litter'] is False
2024-06-13 09:11:05 root INFO     [' team', ' group', ' company', ' club', ' society'] matches ['alphabet'] is False
2024-06-13 09:11:05 root INFO     [' club', ' team', ' group', ' company', ' tribe'] matches ['pride'] is False
2024-06-13 09:11:05 root INFO     [' club', ' society', ' group', ' team', ' company'] matches ['club', 'team', 'group', 'band', 'community'] is True
2024-06-13 09:11:05 root INFO     [' team', ' group', ' band', ' club', ' company'] matches ['orchestra', 'band'] is True
2024-06-13 09:11:05 root INFO     [' group', ' team', ' club', ' tribe', ' company'] matches ['horde'] is False
2024-06-13 09:11:05 root INFO     [' group', ' club', ' team', ' company', ' society'] matches ['book', 'notebook', 'website', 'web-site'] is False
2024-06-13 09:11:05 root INFO     [' club', ' group', ' team', ' company', ' society'] matches ['parish', 'church'] is False
2024-06-13 09:11:05 root INFO     [' team', ' group', ' club', ' company', ' society'] matches ['society', 'company', 'party', 'world'] is True
2024-06-13 09:11:05 root INFO     [' group', ' team', ' club', ' company', ' family'] matches ['album', 'collection', 'library'] is False
2024-06-13 09:11:05 root INFO     [' team', ' club', ' group', ' company', ' sports'] matches ['team', 'group', 'orchestra'] is True
2024-06-13 09:11:05 root INFO     [' club', ' team', ' group', ' company', ' society'] matches ['police'] is False
2024-06-13 09:11:05 root INFO     [' team', ' club', ' group', ' company', ' staff'] matches ['staff'] is True
2024-06-13 09:11:05 root INFO     [' club', ' group', ' team', ' society', ' company'] matches ['senate', 'house'] is False
2024-06-13 09:11:05 root INFO     [' flock', ' herd', ' group', ' team', ' club'] matches ['flock'] is True
2024-06-13 09:11:05 root INFO     [' group', ' team', ' club', ' company', ' band'] matches ['choir', 'band', 'duo', 'trio', 'quartet'] is True
2024-06-13 09:11:05 root INFO     [' team', ' group', ' club', ' company', ' regiment'] matches ['army', 'unit', 'division', 'troop'] is False
2024-06-13 09:11:05 root INFO     [' team', ' family', ' group', ' club', ' company'] matches ['couple', 'relationship', 'family'] is True
2024-06-13 09:11:05 root INFO     [' team', ' club', ' group', ' company', ' society'] matches ['constellation', 'galaxy'] is False
2024-06-13 09:11:05 root INFO     [' group', ' club', ' team', ' society', ' company'] matches ['country', 'province'] is False
2024-06-13 09:11:05 root INFO     [' group', ' club', ' team', ' school', ' company'] matches ['class', 'school'] is True
2024-06-13 09:11:05 root INFO     [' group', ' team', ' company', ' club', ' family'] matches ['forest', 'wood', 'grove'] is False
2024-06-13 09:11:05 root INFO     [' team', ' club', ' group', ' family', ' company'] matches ['pack'] is False
2024-06-13 09:11:05 root INFO     [' group', ' team', ' club', ' company', ' society'] matches ['paragraph', 'sentence', 'text'] is False
2024-06-13 09:11:05 root INFO     meronyms - member (50) total: defaultdict(<class 'int'>, {True: 870, False: 542})
2024-06-13 09:11:05 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='UK_city - county', prompt_templates=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], prompt_templates_zs=['In the United Kingdom, the city of {} is in the county of', 'In the UK, the city of {} resides in the county of', 'The city of {} in the UK belongs to the county of'], samples=[RelationSample(subject='aberdeen', object=['aberdeenshire']), RelationSample(subject='bath', object=['somerset']), RelationSample(subject='belfast', object=['antrim']), RelationSample(subject='birmingham', object=['midlands']), RelationSample(subject='bradford', object=['yorkshire']), RelationSample(subject='brighton', object=['sussex']), RelationSample(subject='cambridge', object=['cambridgeshire']), RelationSample(subject='canterbury', object=['kent']), RelationSample(subject='cardiff', object=['glamorgan']), RelationSample(subject='carlisle', object=['cumbria']), RelationSample(subject='chester', object=['cheshire']), RelationSample(subject='chichester', object=['sussex']), RelationSample(subject='coventry', object=['midlands']), RelationSample(subject='crawley', object=['sussex']), RelationSample(subject='derby', object=['derbyshire']), RelationSample(subject='dundee', object=['lowlands']), RelationSample(subject='edinburgh', object=['lowlands']), RelationSample(subject='ely', object=['cambridgeshire']), RelationSample(subject='exeter', object=['devon']), RelationSample(subject='glasgow', object=['lowlands']), RelationSample(subject='gloucester', object=['gloucestershire']), RelationSample(subject='hereford', object=['herefordshire']), RelationSample(subject='hull', object=['yorkshire']), RelationSample(subject='inverness', object=['highlands']), RelationSample(subject='lancaster', object=['lancashire']), RelationSample(subject='leeds', object=['yorkshire']), RelationSample(subject='leicester', object=['midlands']), RelationSample(subject='lincoln', object=['lincolnshire']), RelationSample(subject='liverpool', object=['lancashire']), RelationSample(subject='newcastle', object=['northumberland']), RelationSample(subject='newport', object=['gwent']), RelationSample(subject='norwich', object=['norfolk']), RelationSample(subject='nottingham', object=['nottinghamshire']), RelationSample(subject='oxford', object=['oxfordshire']), RelationSample(subject='plymouth', object=['devon']), RelationSample(subject='portsmouth', object=['hampshire']), RelationSample(subject='preston', object=['lancashire']), RelationSample(subject='reading', object=['berkshire']), RelationSample(subject='salford', object=['manchester']), RelationSample(subject='salisbury', object=['wiltshire']), RelationSample(subject='sheffield', object=['yorkshire']), RelationSample(subject='southampton', object=['hampshire']), RelationSample(subject='stirling', object=['stirlingshire']), RelationSample(subject='swansea', object=['glamorgan']), RelationSample(subject='wakefield', object=['yorkshire']), RelationSample(subject='wells', object=['somerset']), RelationSample(subject='winchester', object=['hampshire']), RelationSample(subject='wolverhampton', object=['midlands']), RelationSample(subject='worcester', object=['worcestershire']), RelationSample(subject='york', object=['yorkshire'])], _domain=None, _range=None)
2024-06-13 09:11:08 root INFO     starting operator prediction
2024-06-13 09:11:08 lre.operators WARNING  relation has > 1 prompt_templates, will use first (In the United Kingdom, the city of {} is in the county of)
2024-06-13 09:11:08 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:15:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:15:10 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:15:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:19:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:19:11 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:19:11 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:23:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:23:09 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:23:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:27:09 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:27:09 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:27:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:31:10 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:31:10 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:31:10 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:35:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:35:11 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:35:12 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:39:12 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:39:12 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:39:12 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:43:11 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:43:11 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:43:11 root INFO     total operator prediction time: 1923.120744228363 seconds
2024-06-13 09:43:14 root INFO     [' north', ' sc', ' east', ' the', ' nor'] matches ['aberdeenshire'] is False
2024-06-13 09:43:14 root INFO     [' north', ' east', ' w', ' the', ' west'] matches ['antrim'] is False
2024-06-13 09:43:14 root INFO     [' the', ' w', ' e', ' east', ' mid'] matches ['midlands'] is True
2024-06-13 09:43:14 root INFO     [' east', ' north', ' the', ' e', ' l'] matches ['sussex'] is False
2024-06-13 09:43:14 root INFO     [' cam', ' north', ' the', ' east', ' e'] matches ['cambridgeshire'] is True
2024-06-13 09:43:14 root INFO     [' east', ' cam', ' k', ' north', ' the'] matches ['kent'] is True
2024-06-13 09:43:14 root INFO     [' w', ' ang', ' den', ' card', ' mid'] matches ['glamorgan'] is False
2024-06-13 09:43:14 root INFO     [' north', ' e', ' the', ' l', ' nor'] matches ['cumbria'] is False
2024-06-13 09:43:14 root INFO     [' east', ' south', ' north', ' nor', ' west'] matches ['sussex'] is False
2024-06-13 09:43:14 root INFO     [' north', ' east', ' derby', ' nor', ' w'] matches ['derbyshire'] is True
2024-06-13 09:43:14 root INFO     [' e', ' east', ' north', ' cam', ' l'] matches ['cambridgeshire'] is True
2024-06-13 09:43:14 root INFO     [' south', ' dev', ' north', ' east', ' west'] matches ['devon'] is True
2024-06-13 09:43:14 root INFO     [' east', ' north', ' e', ' the', ' nor'] matches ['gloucestershire'] is False
2024-06-13 09:43:14 root INFO     [' sh', ' w', ' mid', ' west', ' the'] matches ['herefordshire'] is False
2024-06-13 09:43:14 root INFO     [' north', ' sc', ' nor', ' the', ' '] matches ['highlands'] is False
2024-06-13 09:43:14 root INFO     [' north', ' penn', ' l', ' den', ' c'] matches ['lancashire'] is True
2024-06-13 09:43:14 root INFO     [' north', ' l', ' east', ' e', ' le'] matches ['yorkshire'] is False
2024-06-13 09:43:14 root INFO     [' l', ' north', ' le', ' nor', ' den'] matches ['lincolnshire'] is True
2024-06-13 09:43:14 root INFO     [' l', ' mer', ' w', ' city', ' the'] matches ['lancashire'] is True
2024-06-13 09:43:14 root INFO     [' north', ' east', ' ty', ' new', ' the'] matches ['northumberland'] is True
2024-06-13 09:43:14 root INFO     [' nor', ' east', ' north', ' e', ' the'] matches ['norfolk'] is True
2024-06-13 09:43:14 root INFO     [' east', ' not', ' the', ' nor', ' e'] matches ['nottinghamshire'] is True
2024-06-13 09:43:14 root INFO     [' ox', ' cam', ' o', ' east', ' sh'] matches ['oxfordshire'] is True
2024-06-13 09:43:14 root INFO     [' north', ' west', ' w', ' east', ' south'] matches ['devon'] is False
2024-06-13 09:43:14 root INFO     [' l', ' north', ' the', ' nor', ' e'] matches ['manchester'] is False
2024-06-13 09:43:14 root INFO     [' north', ' sh', ' south', ' cam', ' east'] matches ['wiltshire'] is False
2024-06-13 09:43:14 root INFO     [' the', ' north', ' nor', ' eng', ' east'] matches ['yorkshire'] is False
2024-06-13 09:43:14 root INFO     [' east', ' south', ' the', ' l', ' e'] matches ['hampshire'] is False
2024-06-13 09:43:14 root INFO     [' w', ' the', ' sh', ' cam', ' mid'] matches ['worcestershire'] is True
2024-06-13 09:43:14 root INFO     [' north', ' nor', ' y', ' e', ' east'] matches ['yorkshire'] is True
2024-06-13 09:43:14 root INFO     UK_city - county (50) total: defaultdict(<class 'int'>, {True: 885, False: 557})
2024-06-13 09:43:14 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - sound', prompt_templates=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], prompt_templates_zs=['The sound that a {} makes is called a', 'The sound produced by a {} is known as', 'The {} makes a sound called a'], samples=[RelationSample(subject='alpaca', object=['bray']), RelationSample(subject='bear', object=['growl']), RelationSample(subject='bee', object=['buzz', 'hum']), RelationSample(subject='beetle', object=['drone']), RelationSample(subject='cat', object=['meow', 'meu', 'purr', 'caterwaul']), RelationSample(subject='cattle', object=['moo', 'bellow', 'low']), RelationSample(subject='chicken', object=['cluck', 'crow', 'cock-a-doodle-doo']), RelationSample(subject='chimpanzee', object=['scream']), RelationSample(subject='cicada', object=['buzz']), RelationSample(subject='coyote', object=['howl']), RelationSample(subject='cricket', object=['chirp']), RelationSample(subject='crow', object=['caw']), RelationSample(subject='deer', object=['bellow']), RelationSample(subject='dog', object=['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof']), RelationSample(subject='donkey', object=['bray', 'hee-haw']), RelationSample(subject='duck', object=['quack']), RelationSample(subject='elephant', object=['trumpet']), RelationSample(subject='elk', object=['bellow']), RelationSample(subject='ferret', object=['dook']), RelationSample(subject='fly', object=['buzz']), RelationSample(subject='fox', object=['howl', 'yelp']), RelationSample(subject='frog', object=['ribbit', 'croak']), RelationSample(subject='goat', object=['bleat']), RelationSample(subject='gorilla', object=['grunt', 'scream']), RelationSample(subject='hornet', object=['buzz']), RelationSample(subject='horse', object=['neigh', 'snort', 'whinny']), RelationSample(subject='hound', object=['bark', 'howl', 'bay']), RelationSample(subject='hyena', object=['laugh']), RelationSample(subject='leopard', object=['growl']), RelationSample(subject='lion', object=['roar', 'growl']), RelationSample(subject='magpie', object=['chatter']), RelationSample(subject='mallard', object=['quack']), RelationSample(subject='monkey', object=['chatter', 'gibber', 'howl', 'scream']), RelationSample(subject='moose', object=['bellow']), RelationSample(subject='mouse', object=['squeak']), RelationSample(subject='mule', object=['bray', 'hee-haw']), RelationSample(subject='pig', object=['oink', 'grunt', 'gruff', 'squeal']), RelationSample(subject='pigeon', object=['coo']), RelationSample(subject='rat', object=['squeak']), RelationSample(subject='raven', object=['caw']), RelationSample(subject='seal', object=['bark']), RelationSample(subject='sheep', object=['baa', 'bleat']), RelationSample(subject='snake', object=['hiss']), RelationSample(subject='songbird', object=['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter']), RelationSample(subject='tiger', object=['growl', 'roar']), RelationSample(subject='toad', object=['ribbit', 'croak']), RelationSample(subject='turkey', object=['gobble']), RelationSample(subject='wasp', object=['buzz']), RelationSample(subject='whale', object=['sing']), RelationSample(subject='wolf', object=['howl'])], _domain=None, _range=None)
2024-06-13 09:43:16 root INFO     starting operator prediction
2024-06-13 09:43:16 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The sound that a {} makes is called a)
2024-06-13 09:43:16 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:47:19 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:47:19 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:47:19 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:51:20 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:51:20 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:51:20 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:55:21 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:55:21 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:55:21 root INFO     [order_1_approx] starting weight calculation
2024-06-13 09:59:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 09:59:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 09:59:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:03:23 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:03:23 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:03:23 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:07:20 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:07:20 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:07:20 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:11:20 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:11:20 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:11:20 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:15:20 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:15:20 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:15:20 root INFO     total operator prediction time: 1924.1078972816467 seconds
2024-06-13 10:15:22 root INFO     [' m', ' b', ' br', ' ch', ' roar'] matches ['bray'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' grow', ' m', ' b', ' sn'] matches ['growl'] is True
2024-06-13 10:15:22 root INFO     [' buzz', ' ch', ' b', ' m', ' tr'] matches ['buzz', 'hum'] is True
2024-06-13 10:15:22 root INFO     [' m', ' me', ' his', ' pur', ' ch'] matches ['meow', 'meu', 'purr', 'caterwaul'] is True
2024-06-13 10:15:22 root INFO     [' b', ' m', ' bell', ' br', ' roar'] matches ['moo', 'bellow', 'low'] is True
2024-06-13 10:15:22 root INFO     [' squ', ' m', ' c', ' cl', ' ch'] matches ['cluck', 'crow', 'cock-a-doodle-doo'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' scream', ' ch', ' squ', ' bark'] matches ['scream'] is True
2024-06-13 10:15:22 root INFO     [' ch', ' scream', ' scree', ' tr', ' buzz'] matches ['buzz'] is True
2024-06-13 10:15:22 root INFO     [' y', ' bark', ' how', ' b', ' roar'] matches ['howl'] is True
2024-06-13 10:15:22 root INFO     [' ch', ' m', ' tr', ' cry', ' scream'] matches ['chirp'] is True
2024-06-13 10:15:22 root INFO     [' c', ' scree', ' ch', ' cry', ' h'] matches ['caw'] is True
2024-06-13 10:15:22 root INFO     [' m', ' b', ' ch', ' cry', ' h'] matches ['bellow'] is True
2024-06-13 10:15:22 root INFO     [' bark', ' b', ' y', ' m', ' how'] matches ['bark', 'growl', 'howl', 'yelp', 'whine', 'arf', 'bow_wow', 'woof'] is True
2024-06-13 10:15:22 root INFO     [' br', ' b', ' m', ' roar', ' sn'] matches ['bray', 'hee-haw'] is True
2024-06-13 10:15:22 root INFO     [' qu', ' hon', ' squ', ' m', ' br'] matches ['quack'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' br', ' m', ' trumpet', ' bell'] matches ['trumpet'] is True
2024-06-13 10:15:22 root INFO     [' m', ' b', ' roar', ' h', ' br'] matches ['bellow'] is True
2024-06-13 10:15:22 root INFO     [' m', ' ch', ' buzz', ' scream', ' b'] matches ['buzz'] is True
2024-06-13 10:15:22 root INFO     [' ch', ' m', ' cry', ' sn', ' y'] matches ['howl', 'yelp'] is True
2024-06-13 10:15:22 root INFO     [' cro', ' ch', ' squ', ' h', ' tr'] matches ['ribbit', 'croak'] is True
2024-06-13 10:15:22 root INFO     [' b', ' m', ' br', ' ble', ' cry'] matches ['bleat'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' grow', ' scream', ' h', ' bell'] matches ['grunt', 'scream'] is True
2024-06-13 10:15:22 root INFO     [' scream', ' roar', ' his', ' scree', ' shri'] matches ['buzz'] is False
2024-06-13 10:15:22 root INFO     [' br', ' m', ' wh', ' neigh', ' b'] matches ['neigh', 'snort', 'whinny'] is True
2024-06-13 10:15:22 root INFO     [' b', ' bark', ' h', ' m', ' roar'] matches ['bark', 'howl', 'bay'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' m', ' scream', ' grow', ' his'] matches ['growl'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' grow', ' ro', ' m', ' scream'] matches ['roar', 'growl'] is True
2024-06-13 10:15:22 root INFO     [' ch', ' scree', ' c', ' scream', ' cry'] matches ['chatter'] is True
2024-06-13 10:15:22 root INFO     [' m', ' h', ' qu', ' br', ' ch'] matches ['quack'] is True
2024-06-13 10:15:22 root INFO     [' ch', ' scream', ' squ', ' chatter', ' scree'] matches ['chatter', 'gibber', 'howl', 'scream'] is True
2024-06-13 10:15:22 root INFO     [' m', ' roar', ' b', ' br', ' h'] matches ['bellow'] is True
2024-06-13 10:15:22 root INFO     [' m', ' sque', ' ch', ' me', ' squ'] matches ['squeak'] is True
2024-06-13 10:15:22 root INFO     [' br', ' b', ' m', ' sn', ' h'] matches ['bray', 'hee-haw'] is True
2024-06-13 10:15:22 root INFO     [' squ', ' br', ' m', ' grunt', ' b'] matches ['oink', 'grunt', 'gruff', 'squeal'] is True
2024-06-13 10:15:22 root INFO     [' co', ' squ', ' ch', ' m', ' h'] matches ['coo'] is True
2024-06-13 10:15:22 root INFO     [' sque', ' m', ' ch', ' squ', ' scream'] matches ['squeak'] is True
2024-06-13 10:15:22 root INFO     [' h', ' c', ' cro', ' scree', ' roar'] matches ['caw'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' m', ' h', ' b', ' bark'] matches ['bark'] is True
2024-06-13 10:15:22 root INFO     [' b', ' ble', ' m', ' br', ' cry'] matches ['baa', 'bleat'] is True
2024-06-13 10:15:22 root INFO     [' his', ' scream', ' squ', ' grow', ' roar'] matches ['hiss'] is True
2024-06-13 10:15:22 root INFO     [' ch', ' scree', ' squ', ' cry', ' c'] matches ['chirrup', 'chirp', 'tweet', 'sing', 'warble', 'twitter'] is True
2024-06-13 10:15:22 root INFO     [' roar', ' grow', ' scream', ' m', ' ro'] matches ['growl', 'roar'] is True
2024-06-13 10:15:22 root INFO     [' cro', ' m', ' squ', ' h', ' br'] matches ['ribbit', 'croak'] is True
2024-06-13 10:15:22 root INFO     [' m', ' gob', ' squ', ' c', ' cry'] matches ['gobble'] is True
2024-06-13 10:15:22 root INFO     [' scream', ' buzz', ' ch', ' his', ' scree'] matches ['buzz'] is True
2024-06-13 10:15:22 root INFO     [' how', ' roar', ' grow', ' b', ' bark'] matches ['howl'] is True
2024-06-13 10:15:22 root INFO     animal - sound (50) total: defaultdict(<class 'int'>, {True: 930, False: 558})
2024-06-13 10:15:23 __main__ INFO     starting test: <class 'lre.operators.JacobianIclMeanEstimator'> on Relation(name='animal - shelter', prompt_templates=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], prompt_templates_zs=['The place {} lives in is called', 'The {} lives in a', 'The {} can be found living in a {}'], samples=[RelationSample(subject='ant', object=['anthill', 'insectarium', 'terrarium', 'formicarium']), RelationSample(subject='ape', object=['grove', 'tree', 'cage']), RelationSample(subject='baboon', object=['grove', 'tree', 'cage']), RelationSample(subject='bat', object=['cave', 'cage']), RelationSample(subject='bear', object=['den', 'cage']), RelationSample(subject='beaver', object=['dam', 'river', 'pen']), RelationSample(subject='bee', object=['hive']), RelationSample(subject='cattle', object=['barn', 'coral']), RelationSample(subject='chimpanzee', object=['grove', 'tree', 'cage']), RelationSample(subject='chinchilla', object=['nest', 'cage']), RelationSample(subject='cockroach', object=['nest']), RelationSample(subject='cricket', object=['nest']), RelationSample(subject='crocodile', object=['river', 'lake', 'pool']), RelationSample(subject='crow', object=['nest', 'cage']), RelationSample(subject='dog', object=['doghouse', 'home', 'den', 'kennel']), RelationSample(subject='dolphin', object=['sea', 'sanctuary']), RelationSample(subject='duck', object=['pond', 'nest']), RelationSample(subject='fish', object=['sea', 'lake', 'river', 'acquarium', 'farm', 'sanctuary']), RelationSample(subject='fly', object=['nest']), RelationSample(subject='fox', object=['den', 'cage']), RelationSample(subject='goldfish', object=['pond', 'bowl', 'aquarium', 'sanctuary']), RelationSample(subject='gorilla', object=['grove', 'tree', 'cage']), RelationSample(subject='hamster', object=['nest', 'cage']), RelationSample(subject='hedgehog', object=['nest', 'hedge', 'pen']), RelationSample(subject='herring', object=['sea', 'sanctuary']), RelationSample(subject='hippopotamus', object=['river', 'lake', 'pen']), RelationSample(subject='hornet', object=['nest']), RelationSample(subject='horse', object=['stable', 'range', 'paddock', 'corral']), RelationSample(subject='insect', object=['nest', 'cage', 'box']), RelationSample(subject='lion', object=['den', 'cage', 'savannah']), RelationSample(subject='locust', object=['nest']), RelationSample(subject='mallard', object=['nest', 'pond']), RelationSample(subject='mole', object=['hole', 'nest']), RelationSample(subject='monkey', object=['tree', 'grove', 'cage']), RelationSample(subject='mouse', object=['nest', 'cage']), RelationSample(subject='pig', object=['sty', 'pigsty', 'pen', 'pigpen']), RelationSample(subject='rabbit', object=['burrow', 'warren', 'hutch', 'cage']), RelationSample(subject='rat', object=['nest', 'cage']), RelationSample(subject='raven', object=['nest', 'cage']), RelationSample(subject='scorpion', object=['nest', 'aquarium', 'terrarium']), RelationSample(subject='seal', object=['den', 'aquarium', 'sea']), RelationSample(subject='snake', object=['nest', 'pit', 'acquarium']), RelationSample(subject='spider', object=['web', 'acquarium', 'terrarium']), RelationSample(subject='termite', object=['hill', 'terrarium']), RelationSample(subject='tiger', object=['den', 'cage']), RelationSample(subject='trout', object=['river', 'lake', 'sanctuary', 'aquarium', 'pond', 'tank']), RelationSample(subject='wasp', object=['nest']), RelationSample(subject='whale', object=['sea', 'sanctuary']), RelationSample(subject='wolf', object=['den', 'cage']), RelationSample(subject='woodchuck', object=['hole'])], _domain=None, _range=None)
2024-06-13 10:15:25 root INFO     starting operator prediction
2024-06-13 10:15:25 lre.operators WARNING  relation has > 1 prompt_templates, will use first (The place {} lives in is called)
2024-06-13 10:15:25 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:19:28 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:19:28 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:19:28 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:23:29 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:23:29 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:23:29 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:27:31 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:27:31 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:27:31 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:31:33 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:31:33 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:31:33 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:35:34 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:35:34 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:35:35 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:39:36 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:39:36 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:39:36 root INFO     [order_1_approx] starting weight calculation
2024-06-13 10:43:37 root INFO     weight size is torch.Size([4096, 4096])
2024-06-13 10:43:37 root INFO     [order_1_approx] weight calculation finished
2024-06-13 10:43:37 root INFO     [order_1_approx] starting weight calculation
